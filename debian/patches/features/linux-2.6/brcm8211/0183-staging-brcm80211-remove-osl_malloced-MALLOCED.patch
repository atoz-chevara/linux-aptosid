commit 97e17d0e7bb861c197e50433325bf2f5f9871f90
Author: mike.rapoport@gmail.com <mike.rapoport@gmail.com>
Date:   Wed Oct 13 00:09:09 2010 +0200

    staging: brcm80211: remove osl_malloced()/MALLOCED()
    
    because there are other means to track memory leaks in kernel
    
    Signed-off-by: Mike Rapoport <mike.rapoport@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

--- a/drivers/staging/brcm80211/brcmfmac/bcmsdh.c
+++ b/drivers/staging/brcm80211/brcmfmac/bcmsdh.c
@@ -60,8 +60,7 @@ bcmsdh_info_t *bcmsdh_attach(osl_t *osh,
 
 	bcmsdh = (bcmsdh_info_t *) MALLOC(osh, sizeof(bcmsdh_info_t));
 	if (bcmsdh == NULL) {
-		BCMSDH_ERROR(("bcmsdh_attach: out of memory, "
-			"malloced %d bytes\n", MALLOCED(osh)));
+		BCMSDH_ERROR(("bcmsdh_attach: out of memory"));
 		return NULL;
 	}
 	bzero((char *)bcmsdh, sizeof(bcmsdh_info_t));
--- a/drivers/staging/brcm80211/brcmfmac/bcmsdh_linux.c
+++ b/drivers/staging/brcm80211/brcmfmac/bcmsdh_linux.c
@@ -197,8 +197,7 @@ int bcmsdh_probe(struct device *dev)
 	}
 	sdhc = MALLOC(osh, sizeof(bcmsdh_hc_t));
 	if (!sdhc) {
-		SDLX_MSG(("%s: out of memory, allocated %d bytes\n",
-			  __func__, MALLOCED(osh)));
+		SDLX_MSG(("%s: out of memory\n", __func__));
 		goto err;
 	}
 	bzero(sdhc, sizeof(bcmsdh_hc_t));
@@ -430,8 +429,7 @@ bcmsdh_pci_probe(struct pci_dev *pdev, c
 	}
 	sdhc = MALLOC(osh, sizeof(bcmsdh_hc_t));
 	if (!sdhc) {
-		SDLX_MSG(("%s: out of memory, allocated %d bytes\n",
-			  __func__, MALLOCED(osh)));
+		SDLX_MSG(("%s: out of memory\n", __func__));
 		goto err;
 	}
 	bzero(sdhc, sizeof(bcmsdh_hc_t));
--- a/drivers/staging/brcm80211/brcmfmac/bcmsdh_sdmmc.c
+++ b/drivers/staging/brcm80211/brcmfmac/bcmsdh_sdmmc.c
@@ -125,8 +125,7 @@ extern sdioh_info_t *sdioh_attach(osl_t
 
 	sd = (sdioh_info_t *) MALLOC(osh, sizeof(sdioh_info_t));
 	if (sd == NULL) {
-		sd_err(("sdioh_attach: out of memory, malloced %d bytes\n",
-			MALLOCED(osh)));
+		sd_err(("sdioh_attach: out of memory\n"));
 		return NULL;
 	}
 	bzero((char *)sd, sizeof(sdioh_info_t));
--- a/drivers/staging/brcm80211/brcmfmac/dhd_linux.c
+++ b/drivers/staging/brcm80211/brcmfmac/dhd_linux.c
@@ -1827,10 +1827,6 @@ osl_t *dhd_osl_attach(void *pdev, uint b
 
 void dhd_osl_detach(osl_t *osh)
 {
-	if (MALLOCED(osh)) {
-		DHD_ERROR(("%s: MEMORY LEAK %d bytes\n", __func__,
-			   MALLOCED(osh)));
-	}
 	osl_detach(osh);
 }
 
--- a/drivers/staging/brcm80211/include/linux_osl.h
+++ b/drivers/staging/brcm80211/include/linux_osl.h
@@ -96,10 +96,8 @@ typedef struct {
 
 #define MALLOC(osh, size)	osl_malloc((osh), (size))
 #define MFREE(osh, addr, size)	osl_mfree((osh), (addr), (size))
-#define MALLOCED(osh)		osl_malloced((osh))
 extern void *osl_malloc(osl_t *osh, uint size);
 extern void osl_mfree(osl_t *osh, void *addr, uint size);
-extern uint osl_malloced(osl_t *osh);
 
 #define NATIVE_MALLOC(osh, size)	kmalloc(size, GFP_ATOMIC)
 #define NATIVE_MFREE(osh, addr, size)	kfree(addr)
--- a/drivers/staging/brcm80211/sys/wl_mac80211.c
+++ b/drivers/staging/brcm80211/sys/wl_mac80211.c
@@ -1615,11 +1615,6 @@ void wl_free(wl_info_t *wl)
 	}
 #endif				/* WLC_HIGH_ONLY */
 
-	if (osl_malloced(osh)) {
-		printf("****   Memory leak of bytes %d\n", osl_malloced(osh));
-		ASSERT(0 && "Memory Leak");
-	}
-
 	osl_detach(osh);
 }
 
@@ -1664,7 +1659,7 @@ wl_schedule_task(wl_info_t *wl, void (*f
 
 	task = osl_malloc(wl->osh, sizeof(wl_task_t));
 	if (!task) {
-		WL_ERROR(("wl%d: wl_schedule_task: out of memory, malloced %d bytes\n", wl->pub->unit, osl_malloced(wl->osh)));
+		WL_ERROR(("wl%d: wl_schedule_task: out of memory\n", wl->pub->unit));
 		return -ENOMEM;
 	}
 
@@ -1918,7 +1913,7 @@ wl_timer_t *wl_init_timer(wl_info_t *wl,
 
 	t = osl_malloc(wl->osh, sizeof(wl_timer_t));
 	if (!t) {
-		WL_ERROR(("wl%d: wl_init_timer: out of memory, malloced %d bytes\n", wl->pub->unit, osl_malloced(wl->osh)));
+		WL_ERROR(("wl%d: wl_init_timer: out of memory\n", wl->pub->unit));
 		return 0;
 	}
 
--- a/drivers/staging/brcm80211/sys/wlc_alloc.c
+++ b/drivers/staging/brcm80211/sys/wlc_alloc.c
@@ -39,8 +39,7 @@ void *wlc_calloc(osl_t *osh, uint unit,
 
 	item = MALLOC(osh, size);
 	if (item == NULL)
-		WL_ERROR(("wl%d: %s: out of memory, malloced %d bytes\n",
-			  unit, __func__, MALLOCED(osh)));
+		WL_ERROR(("wl%d: %s: out of memory\n", unit, __func__));
 	else
 		bzero((char *)item, size);
 	return item;
--- a/drivers/staging/brcm80211/sys/wlc_ampdu.c
+++ b/drivers/staging/brcm80211/sys/wlc_ampdu.c
@@ -181,7 +181,7 @@ ampdu_info_t *wlc_ampdu_attach(wlc_info_
 
 	ampdu = (ampdu_info_t *) MALLOC(wlc->osh, sizeof(ampdu_info_t));
 	if (!ampdu) {
-		WL_ERROR(("wl%d: wlc_ampdu_attach: out of mem, malloced %d bytes\n", wlc->pub->unit, MALLOCED(wlc->osh)));
+		WL_ERROR(("wl%d: wlc_ampdu_attach: out of mem\n", wlc->pub->unit));
 		return NULL;
 	}
 	bzero((char *)ampdu, sizeof(ampdu_info_t));
--- a/drivers/staging/brcm80211/sys/wlc_antsel.c
+++ b/drivers/staging/brcm80211/sys/wlc_antsel.c
@@ -96,7 +96,7 @@ antsel_info_t *wlc_antsel_attach(wlc_inf
 
 	asi = (antsel_info_t *) MALLOC(osh, sizeof(antsel_info_t));
 	if (!asi) {
-		WL_ERROR(("wl%d: wlc_antsel_attach: out of mem, malloced %d bytes\n", pub->unit, MALLOCED(osh)));
+		WL_ERROR(("wl%d: wlc_antsel_attach: out of mem\n", pub->unit));
 		return NULL;
 	}
 
--- a/drivers/staging/brcm80211/sys/wlc_channel.c
+++ b/drivers/staging/brcm80211/sys/wlc_channel.c
@@ -614,8 +614,7 @@ wlc_cm_info_t *wlc_channel_mgr_attach(wl
 
 	wlc_cm = (wlc_cm_info_t *) MALLOC(pub->osh, sizeof(wlc_cm_info_t));
 	if (wlc_cm == NULL) {
-		WL_ERROR(("wl%d: %s: out of memory, malloced %d bytes",
-			  pub->unit, __func__, MALLOCED(pub->osh)));
+		WL_ERROR(("wl%d: %s: out of memory", pub->unit, __func__));
 		return NULL;
 	}
 	bzero((char *)wlc_cm, sizeof(wlc_cm_info_t));
--- a/drivers/staging/brcm80211/sys/wlc_phy_shim.c
+++ b/drivers/staging/brcm80211/sys/wlc_phy_shim.c
@@ -69,7 +69,7 @@ wlc_phy_shim_info_t *wlc_phy_shim_attach
 	physhim = (wlc_phy_shim_info_t *)MALLOC(wlc_hw->osh,
 		sizeof(wlc_phy_shim_info_t));
 	if (!physhim) {
-		WL_ERROR(("wl%d: wlc_phy_shim_attach: out of mem, malloced %d bytes\n", wlc_hw->unit, MALLOCED(wlc_hw->osh)));
+		WL_ERROR(("wl%d: wlc_phy_shim_attach: out of mem\n", wlc_hw->unit));
 		return NULL;
 	}
 	bzero((char *)physhim, sizeof(wlc_phy_shim_info_t));
--- a/drivers/staging/brcm80211/util/hnddma.c
+++ b/drivers/staging/brcm80211/util/hnddma.c
@@ -381,8 +381,7 @@ hnddma_t *dma_attach(osl_t *osh, char *n
 	di = MALLOC(osh, sizeof(dma_info_t));
 	if (di == NULL) {
 #ifdef BCMDBG
-		printf("dma_attach: out of memory, malloced %d bytes\n",
-		       MALLOCED(osh));
+		printf("dma_attach: out of memory\n");
 #endif
 		return NULL;
 	}
@@ -517,7 +516,7 @@ hnddma_t *dma_attach(osl_t *osh, char *n
 		size = ntxd * sizeof(void *);
 		di->txp = MALLOC(osh, size);
 		if (di->txp == NULL) {
-			DMA_ERROR(("%s: dma_attach: out of tx memory, malloced %d bytes\n", di->name, MALLOCED(osh)));
+			DMA_ERROR(("%s: dma_attach: out of tx memory\n", di->name));
 			goto fail;
 		}
 		bzero((char *)di->txp, size);
@@ -528,7 +527,7 @@ hnddma_t *dma_attach(osl_t *osh, char *n
 		size = nrxd * sizeof(void *);
 		di->rxp = MALLOC(osh, size);
 		if (di->rxp == NULL) {
-			DMA_ERROR(("%s: dma_attach: out of rx memory, malloced %d bytes\n", di->name, MALLOCED(osh)));
+			DMA_ERROR(("%s: dma_attach: out of rx memory\n", di->name));
 			goto fail;
 		}
 		bzero((char *)di->rxp, size);
--- a/drivers/staging/brcm80211/util/linux_osl.c
+++ b/drivers/staging/brcm80211/util/linux_osl.c
@@ -314,12 +314,6 @@ void osl_mfree(osl_t *osh, void *addr, u
 	kfree(addr);
 }
 
-uint osl_malloced(osl_t *osh)
-{
-	ASSERT((osh && (osh->magic == OS_HANDLE_MAGIC)));
-	return osh->malloced;
-}
-
 uint osl_dma_consistent_align(void)
 {
 	return PAGE_SIZE;
--- a/drivers/staging/brcm80211/util/nicpci.c
+++ b/drivers/staging/brcm80211/util/nicpci.c
@@ -117,8 +117,7 @@ void *pcicore_init(si_t *sih, osl_t *osh
 	/* alloc pcicore_info_t */
 	pi = MALLOC(osh, sizeof(pcicore_info_t));
 	if (pi == NULL) {
-		PCI_ERROR(("pci_attach: malloc failed! malloced %d bytes\n",
-			   MALLOCED(osh)));
+		PCI_ERROR(("pci_attach: malloc failed!\n"));
 		return NULL;
 	}
 
--- a/drivers/staging/brcm80211/util/siutils.c
+++ b/drivers/staging/brcm80211/util/siutils.c
@@ -90,8 +90,7 @@ si_t *si_attach(uint devid, osl_t *osh,
 	/* alloc si_info_t */
 	sii = MALLOC(osh, sizeof(si_info_t));
 	if (sii == NULL) {
-		SI_ERROR(("si_attach: malloc failed! malloced %d bytes\n",
-			  MALLOCED(osh)));
+		SI_ERROR(("si_attach: malloc failed!\n"));
 		return NULL;
 	}
 
