From bddad33475b4c9bd25e6ecaa4adb1d05aea7e0ca Mon Sep 17 00:00:00 2001
From: Ben Hutchings <ben@decadent.org.uk>
Date: Sun, 9 Jan 2011 04:16:48 +0000
Subject: [PATCH 2/4] vt6656: Use request_firmware() to load firmware

The file added to linux-firmware is a copy of the current array which
does not have a recognisable header, so no validation is done.

Change the firmware version check to accept newer versions.

Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
---
 drivers/staging/vt6656/Kconfig    |    1 +
 drivers/staging/vt6656/device.h   |    3 +
 drivers/staging/vt6656/firmware.c |  805 +++----------------------------------
 drivers/staging/vt6656/main_usb.c |    3 +
 4 files changed, 59 insertions(+), 753 deletions(-)

--- a/drivers/staging/vt6656/Kconfig
+++ b/drivers/staging/vt6656/Kconfig
@@ -1,9 +1,9 @@
 config VT6656
 	tristate "VIA Technologies VT6656 support"
-	depends on BROKEN
 	depends on USB && WLAN
 	select WIRELESS_EXT
 	select WEXT_PRIV
+	select FW_LOADER
 	---help---
 	This is a vendor-written driver for VIA VT6656.
 
--- a/drivers/staging/vt6656/device.h
+++ b/drivers/staging/vt6656/device.h
@@ -55,6 +55,7 @@
 #include <linux/reboot.h>
 #include <linux/usb.h>
 #include <linux/signal.h>
+#include <linux/firmware.h>
 #include <asm/io.h>
 #include <asm/uaccess.h>
 #ifdef SIOCETHTOOL
@@ -421,6 +422,8 @@ typedef struct __device_info {
     struct net_device*          dev;
     struct net_device_stats     stats;
 
+    const struct firmware	*firmware;
+
     OPTIONS                     sOpts;
 
 	struct tasklet_struct       CmdWorkItem;
--- a/drivers/staging/vt6656/firmware.c
+++ b/drivers/staging/vt6656/firmware.c
@@ -39,6 +39,12 @@
 
 static int          msglevel                =MSG_LEVEL_INFO;
 //static int          msglevel                =MSG_LEVEL_DEBUG;
+
+#define FIRMWARE_VERSION	0x133		/* version 1.51 */
+#define FIRMWARE_NAME		"vntwusb.fw"
+
+#define FIRMWARE_CHUNK_SIZE	0x400
+
 /*---------------------  Static Classes  ----------------------------*/
 
 /*---------------------  Static Variables  --------------------------*/
@@ -55,50 +61,61 @@ FIRMWAREbDownload(
      PSDevice pDevice
     )
 {
-    int NdisStatus;
-    PBYTE       pBuffer = NULL;
-    WORD        wLength;
-    int         ii;
-
-    DBG_PRT(MSG_LEVEL_DEBUG, KERN_INFO"---->Download firmware\n");
-    spin_unlock_irq(&pDevice->lock);
-    pBuffer = kmalloc(sizeof(abyFirmware), GFP_KERNEL);
-    if (pBuffer != NULL) {
-
-        for (ii=0;ii<sizeof(abyFirmware);ii++)
-            pBuffer[ii] = abyFirmware[ii];
-
-        for (ii=0;ii<sizeof(abyFirmware);ii+=0x400) {
-
-            if ((sizeof(abyFirmware) - ii) < 0x400)
-                wLength = (sizeof(abyFirmware) - ii);
-            else
-                wLength = 0x400;
+	const struct firmware *fw;
+	int NdisStatus;
+	void *pBuffer = NULL;
+	BOOL result = FALSE;
+	u16 wLength;
+	int ii;
+
+	DBG_PRT(MSG_LEVEL_DEBUG, KERN_INFO"---->Download firmware\n");
+	spin_unlock_irq(&pDevice->lock);
+
+	if (!pDevice->firmware) {
+		struct device *dev = &pDevice->usb->dev;
+		int rc;
+
+		rc = request_firmware(&pDevice->firmware, FIRMWARE_NAME, dev);
+		if (rc) {
+			dev_err(dev, "firmware file %s request failed (%d)\n",
+				FIRMWARE_NAME, rc);
+			goto out;
+		}
+	}
+	fw = pDevice->firmware;
+
+	pBuffer = kmalloc(FIRMWARE_CHUNK_SIZE, GFP_KERNEL);
+	if (!pBuffer)
+		goto out;
+
+	for (ii = 0; ii < fw->size; ii += FIRMWARE_CHUNK_SIZE) {
+		wLength = min_t(int, fw->size - ii, FIRMWARE_CHUNK_SIZE);
+		memcpy(pBuffer, fw->data + ii, wLength);
 
-            NdisStatus = CONTROLnsRequestOutAsyn(pDevice,
+		NdisStatus = CONTROLnsRequestOutAsyn(pDevice,
                                             0,
                                             0x1200+ii,
                                             0x0000,
                                             wLength,
-                                            &(pBuffer[ii])
+                                            pBuffer
                                             );
 
-            DBG_PRT(MSG_LEVEL_DEBUG, KERN_INFO"Download firmware...%d %zu\n", ii, sizeof(abyFirmware));
-            if (NdisStatus != STATUS_SUCCESS) {
-                if (pBuffer)
-                    kfree(pBuffer);
-                spin_lock_irq(&pDevice->lock);
-		return FALSE;
-            }
+		DBG_PRT(MSG_LEVEL_DEBUG,
+			KERN_INFO"Download firmware...%d %zu\n", ii, fw->size);
+		if (NdisStatus != STATUS_SUCCESS)
+			goto out;
         }
-    }
 
-    if (pBuffer)
-        kfree(pBuffer);
+	result = TRUE;
+
+out:
+	if (pBuffer)
+		kfree(pBuffer);
 
-    spin_lock_irq(&pDevice->lock);
-    return (TRUE);
+	spin_lock_irq(&pDevice->lock);
+	return result;
 }
+MODULE_FIRMWARE(FIRMWARE_NAME);
 
 BOOL
 FIRMWAREbBrach2Sram(
@@ -149,7 +166,7 @@ FIRMWAREbCheckVersion(
         return FALSE;
     }
     DBG_PRT(MSG_LEVEL_DEBUG, KERN_INFO"Firmware Version [%04x]\n", pDevice->wFirmwareVersion);
-    if (pDevice->wFirmwareVersion != FIRMWARE_VERSION) {
+    if (pDevice->wFirmwareVersion < FIRMWARE_VERSION) {
         // branch to loader for download new firmware
         FIRMWAREbBrach2Sram(pDevice);
         return FALSE;
--- a/drivers/staging/vt6656/main_usb.c
+++ b/drivers/staging/vt6656/main_usb.c
@@ -1272,6 +1272,9 @@ static void __devexit vt6656_disconnect(
 
 	device_release_WPADEV(device);
 
+	if (device->firmware)
+		release_firmware(device->firmware);
+
 	usb_set_intfdata(intf, NULL);
 	usb_put_dev(interface_to_usbdev(intf));
 
