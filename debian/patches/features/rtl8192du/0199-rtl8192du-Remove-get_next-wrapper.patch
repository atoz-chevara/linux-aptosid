From 11dc7c678c07d6bb264d46303c45ff9a59c5aabb Mon Sep 17 00:00:00 2001
From: Larry Finger <Larry.Finger@lwfinger.net>
Date: Mon, 17 Feb 2014 16:09:30 -0600
Subject: [PATCH 199/390] rtl8192du: Remove get_next wrapper

Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
---
 core/rtw_ap.c           | 32 +++++++++++++-------------
 core/rtw_cmd.c          |  4 ++--
 core/rtw_debug.c        |  4 ++--
 core/rtw_ioctl_set.c    |  2 +-
 core/rtw_mlme.c         | 28 +++++++++++------------
 core/rtw_mlme_ext.c     |  8 +++----
 core/rtw_p2p.c          | 10 ++++-----
 core/rtw_pwrctrl.c      |  8 +++----
 core/rtw_recv.c         | 26 ++++++++++-----------
 core/rtw_sta_mgt.c      | 28 +++++++++++------------
 core/rtw_tdls.c         |  4 ++--
 core/rtw_xmit.c         | 38 +++++++++++++++----------------
 hal/rtl8192d_dm.c       |  4 ++--
 hal/rtl8192du_xmit.c    |  6 ++---
 include/osdep_service.h |  5 -----
 os_dep/ioctl_cfg80211.c | 12 +++++-----
 os_dep/ioctl_linux.c    | 60 ++++++++++++++++++++++++-------------------------
 os_dep/xmit_linux.c     |  4 ++--
 18 files changed, 139 insertions(+), 144 deletions(-)

--- a/drivers/staging/rtl8192du/core/rtw_ap.c
+++ b/drivers/staging/rtl8192du/core/rtw_ap.c
@@ -288,11 +288,11 @@ void	expire_timeout_chk(struct rtw_adapt
 	spin_lock_bh(&pstapriv->auth_list_lock);
 
 	phead = &pstapriv->auth_list;
-	plist = get_next(phead);
+	plist = phead->next;
 
 	while (!rtw_end_of_queue_search(phead, plist)) {
 		psta = container_of(plist, struct sta_info, auth_list);
-		plist = get_next(plist);
+		plist = plist->next;
 
 		if (psta->expire_to > 0) {
 			psta->expire_to--;
@@ -323,12 +323,12 @@ void	expire_timeout_chk(struct rtw_adapt
 	spin_lock_bh(&pstapriv->asoc_list_lock);
 
 	phead = &pstapriv->asoc_list;
-	plist = get_next(phead);
+	plist = phead->next;
 
 	/* check asoc_queue */
 	while (!rtw_end_of_queue_search(phead, plist)) {
 		psta = container_of(plist, struct sta_info, asoc_list);
-		plist = get_next(plist);
+		plist = plist->next;
 
 		if (chk_sta_is_alive(psta) || !psta->expire_to) {
 			psta->expire_to = pstapriv->expire_to;
@@ -1293,11 +1293,11 @@ int rtw_acl_add_sta(struct rtw_adapter *
 	spin_lock_bh(&(pacl_node_q->lock));
 
 	phead = get_list_head(pacl_node_q);
-	plist = get_next(phead);
+	plist = phead->next;
 
 	while (!rtw_end_of_queue_search(phead, plist)) {
 		paclnode = container_of(plist, struct rtw_wlan_acl_node, list);
-		plist = get_next(plist);
+		plist = plist->next;
 
 		if (_rtw_memcmp(paclnode->addr, addr, ETH_ALEN)) {
 			if (paclnode->valid) {
@@ -1354,11 +1354,11 @@ int rtw_acl_remove_sta(struct rtw_adapte
 	spin_lock_bh(&(pacl_node_q->lock));
 
 	phead = get_list_head(pacl_node_q);
-	plist = get_next(phead);
+	plist = phead->next;
 
 	while (!rtw_end_of_queue_search(phead, plist)) {
 		paclnode = container_of(plist, struct rtw_wlan_acl_node, list);
-		plist = get_next(plist);
+		plist = plist->next;
 
 		if (_rtw_memcmp(paclnode->addr, addr, ETH_ALEN)) {
 			if (paclnode->valid) {
@@ -1659,13 +1659,13 @@ void associated_clients_update(struct rt
 		spin_lock_bh(&pstapriv->asoc_list_lock);
 
 		phead = &pstapriv->asoc_list;
-		plist = get_next(phead);
+		plist = phead->next;
 
 		/* check asoc_queue */
 		while (!rtw_end_of_queue_search(phead, plist)) {
 			psta = container_of(plist, struct sta_info, asoc_list);
 
-			plist = get_next(plist);
+			plist = plist->next;
 
 			VCS_update(padapter, psta);
 		}
@@ -1958,12 +1958,12 @@ int rtw_ap_inform_ch_switch(struct rtw_a
 
 	spin_lock_bh(&pstapriv->asoc_list_lock);
 	phead = &pstapriv->asoc_list;
-	plist = get_next(phead);
+	plist = phead->next;
 
 	/* for each sta in asoc_queue */
 	while (!rtw_end_of_queue_search(phead, plist)) {
 		psta = container_of(plist, struct sta_info, asoc_list);
-		plist = get_next(plist);
+		plist = plist->next;
 
 		issue_action_spct_ch_switch(padapter, psta->hwaddr, new_ch,
 					    ch_offset);
@@ -1994,13 +1994,13 @@ int rtw_sta_flush(struct rtw_adapter *pa
 
 	spin_lock_bh(&pstapriv->asoc_list_lock);
 	phead = &pstapriv->asoc_list;
-	plist = get_next(phead);
+	plist = phead->next;
 
 	/* free sta asoc_queue */
 	while (!rtw_end_of_queue_search(phead, plist)) {
 		psta = container_of(plist, struct sta_info, asoc_list);
 
-		plist = get_next(plist);
+		plist = plist->next;
 
 		rtw_list_delete(&psta->asoc_list);
 		pstapriv->asoc_list_cnt--;
@@ -2124,11 +2124,11 @@ void stop_ap_mode(struct rtw_adapter *pa
 	/* for ACL */
 	spin_lock_bh(&(pacl_node_q->lock));
 	phead = get_list_head(pacl_node_q);
-	plist = get_next(phead);
+	plist = phead->next;
 	while (!rtw_end_of_queue_search(phead, plist)) {
 		paclnode = container_of(plist, struct rtw_wlan_acl_node,
 					  list);
-		plist = get_next(plist);
+		plist = plist->next;
 
 		if (paclnode->valid) {
 			paclnode->valid = false;
--- a/drivers/staging/rtl8192du/core/rtw_cmd.c
+++ b/drivers/staging/rtl8192du/core/rtw_cmd.c
@@ -190,7 +190,7 @@ struct cmd_obj *_rtw_dequeue_cmd(struct
 	if (rtw_is_list_empty(&(queue->queue))) {
 		obj = NULL;
 	} else {
-		obj = container_of(get_next(&(queue->queue)), struct cmd_obj, list);
+		obj = container_of((&queue->queue)->next, struct cmd_obj, list);
 		rtw_list_delete(&obj->list);
 	}
 
@@ -471,7 +471,7 @@ struct evt_obj *rtw_dequeue_evt(_queue *
 	if (rtw_is_list_empty(&(queue->queue))) {
 		pevtobj = NULL;
 	} else {
-		pevtobj = container_of(get_next(&(queue->queue)), struct evt_obj, list);
+		pevtobj = container_of(&(queue->queue->next; struct evt_obj, list);
 		rtw_list_delete(&pevtobj->list);
 	}
 
--- a/drivers/staging/rtl8192du/core/rtw_debug.c
+++ b/drivers/staging/rtl8192du/core/rtw_debug.c
@@ -991,12 +991,12 @@ int proc_get_all_sta_info(char *page, ch
 
 	for (i = 0; i < NUM_STA; i++) {
 		phead = &(pstapriv->sta_hash[i]);
-		plist = get_next(phead);
+		plist = phead->next;
 
 		while ((rtw_end_of_queue_search(phead, plist)) == false) {
 			psta = container_of(plist, struct sta_info, hash_list);
 
-			plist = get_next(plist);
+			plist = plist->next;
 
 			len += snprintf(page + len, count - len, "sta's macaddr:%pM\n", psta->hwaddr);
 			len += snprintf(page + len, count - len, "rtsen=%d, cts2slef=%d\n", psta->rtsen, psta->cts2self);
--- a/drivers/staging/rtl8192du/core/rtw_ioctl_set.c
+++ b/drivers/staging/rtl8192du/core/rtw_ioctl_set.c
@@ -73,7 +73,7 @@ u8 rtw_do_join(struct rtw_adapter *padap
 
 	spin_lock_bh(&(pmlmepriv->scanned_queue.lock));
 	phead = get_list_head(queue);
-	plist = get_next(phead);
+	plist = phead->next;
 
 	RT_TRACE(_module_rtl871x_ioctl_set_c_, _drv_info_, ("\n rtw_do_join: phead = %p; plist = %p\n\n\n", phead, plist));
 
--- a/drivers/staging/rtl8192du/core/rtw_mlme.c
+++ b/drivers/staging/rtl8192du/core/rtw_mlme.c
@@ -192,7 +192,7 @@ struct wlan_network *_rtw_dequeue_networ
 		pnetwork = NULL;
 	} else {
 		pnetwork =
-		    container_of(get_next(&queue->queue), struct wlan_network,
+		    container_of((&queue->queue)->next, struct wlan_network,
 				   list);
 
 		rtw_list_delete(&(pnetwork->list));
@@ -215,7 +215,7 @@ struct wlan_network *_rtw_alloc_network(
 		pnetwork = NULL;
 		goto exit;
 	}
-	plist = get_next(&(free_queue->queue));
+	plist = (&free_queue->queue)->next;
 
 	pnetwork = container_of(plist, struct wlan_network, list);
 
@@ -311,7 +311,7 @@ struct wlan_network *_rtw_find_network(s
 	/* spin_lock_bh(&scanned_queue->lock); */
 
 	phead = get_list_head(scanned_queue);
-	plist = get_next(phead);
+	plist = phead->next;
 
 	while (plist != phead) {
 		pnetwork = container_of(plist, struct wlan_network, list);
@@ -320,7 +320,7 @@ struct wlan_network *_rtw_find_network(s
 		    true)
 			break;
 
-		plist = get_next(plist);
+		plist = plist->next;
 	}
 
 	if (plist == phead)
@@ -343,12 +343,12 @@ void _rtw_free_network_queue(struct rtw_
 	spin_lock_bh(&scanned_queue->lock);
 
 	phead = get_list_head(scanned_queue);
-	plist = get_next(phead);
+	plist = phead->next;
 
 	while (rtw_end_of_queue_search(phead, plist) == false) {
 		pnetwork = container_of(plist, struct wlan_network, list);
 
-		plist = get_next(plist);
+		plist = plist->next;
 
 		_rtw_free_network(pmlmepriv, pnetwork, isfreeall);
 	}
@@ -554,7 +554,7 @@ struct wlan_network *rtw_get_oldest_wlan
 
 	phead = get_list_head(scanned_queue);
 
-	plist = get_next(phead);
+	plist = phead->next;
 
 	while (1) {
 		if (rtw_end_of_queue_search(phead, plist) == true)
@@ -569,7 +569,7 @@ struct wlan_network *rtw_get_oldest_wlan
 				oldest = pwlan;
 		}
 
-		plist = get_next(plist);
+		plist = plist->next;
 	}
 
 	return oldest;
@@ -693,7 +693,7 @@ void rtw_update_scanned_network(struct r
 
 	spin_lock_bh(&queue->lock);
 	phead = get_list_head(queue);
-	plist = get_next(phead);
+	plist = phead->next;
 
 	while (1) {
 		if (rtw_end_of_queue_search(phead, plist) == true)
@@ -710,7 +710,7 @@ void rtw_update_scanned_network(struct r
 		if ((oldest == ((struct wlan_network *)0)) ||
 		    time_after(oldest->last_scanned, pnetwork->last_scanned))
 			oldest = pnetwork;
-		plist = get_next(plist);
+		plist = plist->next;
 	}
 
 	/* If we didn't find a match, then get a new network slot to initialize
@@ -1130,10 +1130,10 @@ static void free_scanqueue(struct mlme_p
 	spin_lock_bh(&free_queue->lock);
 
 	phead = get_list_head(scan_queue);
-	plist = get_next(phead);
+	plist = phead->next;
 
 	while (plist != phead) {
-		ptemp = get_next(plist);
+		ptemp = plist->next;
 		rtw_list_delete(plist);
 		rtw_list_insert_tail(plist, &free_queue->queue);
 		plist = ptemp;
@@ -2345,7 +2345,7 @@ int rtw_select_and_join_from_scanned_que
 	phead = get_list_head(queue);
 	adapter = (struct rtw_adapter *)pmlmepriv->nic_hdl;
 
-	pmlmepriv->pscanned = get_next(phead);
+	pmlmepriv->pscanned = phead->next;
 
 	while (!rtw_end_of_queue_search(phead, pmlmepriv->pscanned)) {
 		pnetwork =
@@ -2359,7 +2359,7 @@ int rtw_select_and_join_from_scanned_que
 			goto exit;
 		}
 
-		pmlmepriv->pscanned = get_next(pmlmepriv->pscanned);
+		pmlmepriv->pscanned = pmlmepriv->pscanned->next;
 
 		rtw_check_join_candidate(pmlmepriv, &candidate, pnetwork);
 	}
--- a/drivers/staging/rtl8192du/core/rtw_mlme_ext.c
+++ b/drivers/staging/rtl8192du/core/rtw_mlme_ext.c
@@ -8451,7 +8451,7 @@ static void issue_action_BSSCoexistPacke
 		spin_lock_bh(&(pmlmepriv->scanned_queue.lock));
 
 		phead = get_list_head(queue);
-		plist = get_next(phead);
+		plist = phead->next;
 
 		while (1) {
 			int len;
@@ -8464,7 +8464,7 @@ static void issue_action_BSSCoexistPacke
 			pnetwork =
 			    container_of(plist, struct wlan_network, list);
 
-			plist = get_next(plist);
+			plist = plist->next;
 
 			pbss_network =
 			    (struct wlan_bssid_ex *)&pnetwork->network;
@@ -11380,7 +11380,7 @@ u8 tx_beacon_hdl(struct rtw_adapter *ada
 			spin_lock_bh(&psta_bmc->sleep_q.lock);
 
 			xmitframe_phead = get_list_head(&psta_bmc->sleep_q);
-			xmitframe_plist = get_next(xmitframe_phead);
+			xmitframe_plist = xmitframe_phead->next;
 
 			while ((rtw_end_of_queue_search
 				(xmitframe_phead, xmitframe_plist)) == false) {
@@ -11388,7 +11388,7 @@ u8 tx_beacon_hdl(struct rtw_adapter *ada
 				    container_of(xmitframe_plist,
 						   struct xmit_frame, list);
 
-				xmitframe_plist = get_next(xmitframe_plist);
+				xmitframe_plist = xmitframe_plist->next;
 
 				rtw_list_delete(&pxmitframe->list);
 
--- a/drivers/staging/rtl8192du/core/rtw_p2p.c
+++ b/drivers/staging/rtl8192du/core/rtw_p2p.c
@@ -43,7 +43,7 @@ static int is_any_client_associated(stru
 
 	spin_lock_bh(&pstapriv->asoc_list_lock);
 	phead = &pstapriv->asoc_list;
-	plist = get_next(phead);
+	plist = phead->next;
 
 	if (rtw_end_of_queue_search(phead, plist) == true)
 		intFound = false;
@@ -79,13 +79,13 @@ static u32 go_add_group_info_attr(struct
 
 	spin_lock_bh(&pstapriv->asoc_list_lock);
 	phead = &pstapriv->asoc_list;
-	plist = get_next(phead);
+	plist = phead->next;
 
 	/* look up sta asoc_queue */
 	while ((rtw_end_of_queue_search(phead, plist)) == false) {
 		psta = container_of(plist, struct sta_info, asoc_list);
 
-		plist = get_next(plist);
+		plist = plist->next;
 
 
 		if (psta->is_p2p_device) {
@@ -2246,13 +2246,13 @@ u32 process_p2p_devdisc_req(struct wifid
 
 					spin_lock_bh(&pstapriv->asoc_list_lock);
 					phead = &pstapriv->asoc_list;
-					plist = get_next(phead);
+					plist = phead->next;
 
 					/* look up sta asoc_queue */
 					while ((rtw_end_of_queue_search(phead, plist)) == false) {
 						psta = container_of(plist, struct sta_info, asoc_list);
 
-						plist = get_next(plist);
+						plist = plist->next;
 
 						if (psta->is_p2p_device && (psta->dev_cap&P2P_DEVCAP_CLIENT_DISCOVERABILITY) &&
 						    _rtw_memcmp(psta->dev_addr, dev_addr, ETH_ALEN)) {
--- a/drivers/staging/rtl8192du/core/rtw_pwrctrl.c
+++ b/drivers/staging/rtl8192du/core/rtw_pwrctrl.c
@@ -421,7 +421,7 @@ void rtw_set_ps_mode(struct rtw_adapter
 
 			for (i = 0; i < NUM_STA; i++) {
 				phead = &(pstapriv->sta_hash[i]);
-				plist = get_next(phead);
+				plist = phead->next;
 
 				while ((rtw_end_of_queue_search(phead, plist))
 				       == false) {
@@ -434,7 +434,7 @@ void rtw_set_ps_mode(struct rtw_adapter
 					    tdls_sta_state & TDLS_LINKED_STATE)
 						issue_nulldata_to_TDLS_peer_STA
 						    (padapter, ptdls_sta, 0);
-					plist = get_next(plist);
+					plist = plist->next;
 				}
 			}
 
@@ -482,7 +482,7 @@ void rtw_set_ps_mode(struct rtw_adapter
 
 			for (i = 0; i < NUM_STA; i++) {
 				phead = &(pstapriv->sta_hash[i]);
-				plist = get_next(phead);
+				plist = phead->next;
 
 				while ((rtw_end_of_queue_search(phead, plist))
 				       == false) {
@@ -495,7 +495,7 @@ void rtw_set_ps_mode(struct rtw_adapter
 					    tdls_sta_state & TDLS_LINKED_STATE)
 						issue_nulldata_to_TDLS_peer_STA
 						    (padapter, ptdls_sta, 1);
-					plist = get_next(plist);
+					plist = plist->next;
 				}
 			}
 
--- a/drivers/staging/rtl8192du/core/rtw_recv.c
+++ b/drivers/staging/rtl8192du/core/rtw_recv.c
@@ -170,7 +170,7 @@ struct recv_frame_hdr *_rtw_alloc_recvfr
 	} else {
 		phead = get_list_head(pfree_recv_queue);
 
-		plist = get_next(phead);
+		plist = phead->next;
 
 		hdr = container_of(plist, struct recv_frame_hdr, list);
 
@@ -305,12 +305,12 @@ void rtw_free_recvframe_queue(struct __q
 	_rtw_spinlock(&pframequeue->lock);
 
 	phead = get_list_head(pframequeue);
-	plist = get_next(phead);
+	plist = phead->next;
 
 	while (rtw_end_of_queue_search(phead, plist) == false) {
 		precvframe = container_of(plist, struct recv_frame_hdr, list);
 
-		plist = get_next(plist);
+		plist = plist->next;
 
 		rtw_free_recvframe(precvframe, pfree_recv_queue);
 	}
@@ -379,7 +379,7 @@ struct recv_buf *rtw_dequeue_recvbuf(str
 	} else {
 		phead = get_list_head(queue);
 
-		plist = get_next(phead);
+		plist = phead->next;
 
 		precvbuf = container_of(plist, struct recv_buf, list);
 
@@ -1505,7 +1505,7 @@ static int validate_recv_ctrl_frame(stru
 			spin_lock_bh(&psta->sleep_q.lock);
 
 			xmitframe_phead = get_list_head(&psta->sleep_q);
-			xmitframe_plist = get_next(xmitframe_phead);
+			xmitframe_plist = xmitframe_phead->next;
 
 			if ((rtw_end_of_queue_search
 			     (xmitframe_phead, xmitframe_plist)) == false) {
@@ -1513,7 +1513,7 @@ static int validate_recv_ctrl_frame(stru
 				    container_of(xmitframe_plist,
 						   struct xmit_frame, list);
 
-				xmitframe_plist = get_next(xmitframe_plist);
+				xmitframe_plist = xmitframe_plist->next;
 
 				rtw_list_delete(&pxmitframe->list);
 
@@ -1969,7 +1969,7 @@ static struct recv_frame_hdr *recvframe_
 	pfree_recv_queue = &adapter->recvpriv.free_recv_queue;
 
 	phead = get_list_head(defrag_q);
-	plist = get_next(phead);
+	plist = phead->next;
 	prframe = container_of(plist, struct recv_frame_hdr, list);
 	pfhdr = prframe;
 	rtw_list_delete(&(prframe->list));
@@ -1987,7 +1987,7 @@ static struct recv_frame_hdr *recvframe_
 
 	plist = get_list_head(defrag_q);
 
-	plist = get_next(plist);
+	plist = plist->next;
 
 	while (rtw_end_of_queue_search(phead, plist) == false) {
 		pnextrframe = container_of(plist, struct recv_frame_hdr, list);
@@ -2021,7 +2021,7 @@ static struct recv_frame_hdr *recvframe_
 		recvframe_put(prframe, pnfhdr->len);
 
 		pfhdr->attrib.icv_len = pnfhdr->attrib.icv_len;
-		plist = get_next(plist);
+		plist = plist->next;
 
 	};
 
@@ -2389,14 +2389,14 @@ static int enqueue_reorder_recvframe(str
 	struct rx_pkt_attrib *pnextattrib;
 
 	phead = get_list_head(ppending_recvframe_queue);
-	plist = get_next(phead);
+	plist = phead->next;
 
 	while (rtw_end_of_queue_search(phead, plist) == false) {
 		pnextrframe = container_of(plist, struct recv_frame_hdr, list);
 		pnextattrib = &pnextrframe->attrib;
 
 		if (SN_LESS(pnextattrib->seq_num, pattrib->seq_num))
-			plist = get_next(plist);
+			plist = plist->next;
 		else if (SN_EQUAL(pnextattrib->seq_num, pattrib->seq_num))
 			return false;
 		else
@@ -2420,7 +2420,7 @@ static int recv_indicatepkts_in_order(st
 	    &preorder_ctrl->pending_recvframe_queue;
 
 	phead = get_list_head(ppending_recvframe_queue);
-	plist = get_next(phead);
+	plist = phead->next;
 
 	/*  Handling some condition for forced indicate case. */
 	if (bforced == true) {
@@ -2452,7 +2452,7 @@ static int recv_indicatepkts_in_order(st
 				  preorder_ctrl->indicate_seq, pattrib->seq_num,
 				  pattrib->amsdu));
 
-			plist = get_next(plist);
+			plist = plist->next;
 			rtw_list_delete(&(prframe->list));
 
 			if (SN_EQUAL
--- a/drivers/staging/rtl8192du/core/rtw_sta_mgt.c
+++ b/drivers/staging/rtl8192du/core/rtw_sta_mgt.c
@@ -190,11 +190,11 @@ static void rtw_mfree_all_stainfo(struct
 	spin_lock_bh(&pstapriv->sta_hash_lock);
 
 	phead = get_list_head(&pstapriv->free_sta_queue);
-	plist = get_next(phead);
+	plist = phead->next;
 
 	while ((rtw_end_of_queue_search(phead, plist)) == false) {
 		psta = container_of(plist, struct sta_info, list);
-		plist = get_next(plist);
+		plist = plist->next;
 
 		rtw_mfree_stainfo(psta);
 	}
@@ -236,12 +236,12 @@ u32	_rtw_free_sta_priv(struct	sta_priv *
 		spin_lock_bh(&pstapriv->sta_hash_lock);
 		for (index = 0; index < NUM_STA; index++) {
 			phead = &(pstapriv->sta_hash[index]);
-			plist = get_next(phead);
+			plist = phead->next;
 
 			while ((rtw_end_of_queue_search(phead, plist)) == false) {
 				int i;
 				psta = container_of(plist, struct sta_info, hash_list);
-				plist = get_next(plist);
+				plist = plist->next;
 
 				for (i = 0; i < 16; i++) {
 					reorder = &psta->recvreorder_ctrl[i];
@@ -279,8 +279,8 @@ struct	sta_info *rtw_alloc_stainfo(struc
 		spin_unlock_bh(&(pfree_sta_queue->lock));
 		psta = NULL;
 	} else {
-		psta = container_of(get_next(&pfree_sta_queue->queue),
-				      struct sta_info, list);
+		psta = container_of((&pfree_sta_queue->queue)->next,
+				    struct sta_info, list);
 
 		rtw_list_delete(&(psta->list));
 
@@ -449,12 +449,12 @@ u32	rtw_free_stainfo(struct rtw_adapter
 		spin_lock_bh(&ppending_recvframe_queue->lock);
 
 		phead =		get_list_head(ppending_recvframe_queue);
-		plist = get_next(phead);
+		plist = phead->next;
 
 		while (!rtw_is_list_empty(phead)) {
 			prframe = container_of(plist, struct recv_frame_hdr, list);
 
-			plist = get_next(plist);
+			plist = plist->next;
 
 			rtw_list_delete(&(prframe->list));
 
@@ -526,13 +526,13 @@ void rtw_free_all_stainfo(struct rtw_ada
 
 	for (index = 0; index < NUM_STA; index++) {
 		phead = &(pstapriv->sta_hash[index]);
-		plist = get_next(phead);
+		plist = phead->next;
 
 		while ((rtw_end_of_queue_search(phead, plist)) == false) {
 			psta = container_of(plist, struct sta_info,
 					      hash_list);
 
-			plist = get_next(plist);
+			plist = plist->next;
 
 			if (pbcmc_stainfo != psta)
 				rtw_free_stainfo(padapter, psta);
@@ -564,7 +564,7 @@ struct sta_info *rtw_get_stainfo(struct
 	spin_lock_bh(&pstapriv->sta_hash_lock);
 
 	phead = &(pstapriv->sta_hash[index]);
-	plist = get_next(phead);
+	plist = phead->next;
 
 	while ((rtw_end_of_queue_search(phead, plist)) == false) {
 		psta = container_of(plist, struct sta_info, hash_list);
@@ -574,7 +574,7 @@ struct sta_info *rtw_get_stainfo(struct
 			break;
 		}
 		psta = NULL;
-		plist = get_next(plist);
+		plist = plist->next;
 	}
 
 	spin_unlock_bh(&pstapriv->sta_hash_lock);
@@ -631,11 +631,11 @@ u8 rtw_access_ctrl(struct rtw_adapter *p
 
 	spin_lock_bh(&(pacl_node_q->lock));
 	phead = get_list_head(pacl_node_q);
-	plist = get_next(phead);
+	plist = phead->next;
 	while ((rtw_end_of_queue_search(phead, plist)) == false) {
 		paclnode = container_of(plist, struct rtw_wlan_acl_node,
 					  list);
-		plist = get_next(plist);
+		plist = plist->next;
 
 		if (_rtw_memcmp(paclnode->addr, mac_addr, ETH_ALEN)) {
 			if (paclnode->valid == true) {
--- a/drivers/staging/rtl8192du/core/rtw_tdls.c
+++ b/drivers/staging/rtl8192du/core/rtw_tdls.c
@@ -1551,12 +1551,12 @@ int On_TDLS_Peer_Traffic_Rsp(_adapter *a
 			spin_lock_bh(&ptdls_sta->sleep_q.lock);
 
 			xmitframe_phead = get_list_head(&ptdls_sta->sleep_q);
-			xmitframe_plist = get_next(xmitframe_phead);
+			xmitframe_plist = xmitframe_phead->next;
 
 			/* transmit buffered frames */
 			while ((rtw_end_of_queue_search(xmitframe_phead, xmitframe_plist)) == false) {
 				pxmitframe = container_of(xmitframe_plist, struct xmit_frame, list);
-				xmitframe_plist = get_next(xmitframe_plist);
+				xmitframe_plist = xmitframe_plist->next;
 				rtw_list_delete(&pxmitframe->list);
 
 				ptdls_sta->sleepq_len--;
--- a/drivers/staging/rtl8192du/core/rtw_xmit.c
+++ b/drivers/staging/rtl8192du/core/rtw_xmit.c
@@ -1562,7 +1562,7 @@ struct xmit_buf *rtw_alloc_xmitbuf_ext(s
 	} else {
 		phead = get_list_head(pfree_queue);
 
-		plist = get_next(phead);
+		plist = phead->next;
 
 		pxmitbuf = container_of(plist, struct xmit_buf, list);
 
@@ -1623,7 +1623,7 @@ struct xmit_buf *rtw_alloc_xmitbuf(struc
 	} else {
 		phead = get_list_head(pfree_xmitbuf_queue);
 
-		plist = get_next(phead);
+		plist = phead->next;
 
 		pxmitbuf = container_of(plist, struct xmit_buf, list);
 
@@ -1720,7 +1720,7 @@ struct xmit_frame *rtw_alloc_xmitframe(s
 	} else {
 		phead = get_list_head(pfree_xmit_queue);
 
-		plist = get_next(phead);
+		plist = phead->next;
 
 		pxframe = container_of(plist, struct xmit_frame, list);
 
@@ -1806,11 +1806,11 @@ void rtw_free_xmitframe_queue(struct xmi
 	spin_lock_bh(&(pframequeue->lock));
 
 	phead = get_list_head(pframequeue);
-	plist = get_next(phead);
+	plist = phead->next;
 
 	while (rtw_end_of_queue_search(phead, plist) == false) {
 		pxmitframe = container_of(plist, struct xmit_frame, list);
-		plist = get_next(plist);
+		plist = plist->next;
 		rtw_free_xmitframe(pxmitpriv, pxmitframe);
 	}
 	spin_unlock_bh(&(pframequeue->lock));
@@ -1837,12 +1837,12 @@ static struct xmit_frame *dequeue_one_xm
 	struct	xmit_frame	*pxmitframe = NULL;
 
 	xmitframe_phead = get_list_head(pframe_queue);
-	xmitframe_plist = get_next(xmitframe_phead);
+	xmitframe_plist = xmitframe_phead->next;
 
 	if ((rtw_end_of_queue_search(xmitframe_phead, xmitframe_plist)) == false) {
 		pxmitframe = container_of(xmitframe_plist, struct xmit_frame, list);
 
-		xmitframe_plist = get_next(xmitframe_plist);
+		xmitframe_plist = xmitframe_plist->next;
 
 		rtw_list_delete(&pxmitframe->list);
 
@@ -1893,7 +1893,7 @@ struct xmit_frame *rtw_dequeue_xframe(st
 		phwxmit = phwxmit_i + inx[i];
 
 		sta_phead = get_list_head(phwxmit->sta_queue);
-		sta_plist = get_next(sta_phead);
+		sta_plist = sta_phead->next;
 
 		while ((rtw_end_of_queue_search(sta_phead, sta_plist)) == false) {
 			ptxservq = container_of(sta_plist, struct tx_servq, tx_pending);
@@ -1906,11 +1906,11 @@ struct xmit_frame *rtw_dequeue_xframe(st
 				phwxmit->accnt--;
 
 				/* Remove sta node when there is no pending packets. */
-				if (_rtw_queue_empty(pframe_queue)) /* must be done after get_next and before break */
-					rtw_list_delete(&ptxservq->tx_pending);
+				if (_rtw_queue_empty(pframe_queue)) /* must be done after and before break */
+					rtw_list_delete((&ptxservq->tx_pending)->next);
 				goto exit;
 			}
-			sta_plist = get_next(sta_plist);
+			sta_plist = sta_plist->next;
 		}
 	}
 
@@ -2433,12 +2433,12 @@ static void dequeue_xmitframes_to_sleepi
 	struct hw_xmit *phwxmits =  padapter->xmitpriv.hwxmits;
 
 	phead = get_list_head(pframequeue);
-	plist = get_next(phead);
+	plist = phead->next;
 
 	while (rtw_end_of_queue_search(phead, plist) == false) {
 		pxmitframe = container_of(plist, struct xmit_frame, list);
 
-		plist = get_next(plist);
+		plist = plist->next;
 
 		xmitframe_enqueue_for_sleeping_sta(padapter, pxmitframe);
 
@@ -2506,12 +2506,12 @@ void wakeup_sta_to_xmit(struct rtw_adapt
 	spin_lock_bh(&psta->sleep_q.lock);
 
 	xmitframe_phead = get_list_head(&psta->sleep_q);
-	xmitframe_plist = get_next(xmitframe_phead);
+	xmitframe_plist = xmitframe_phead->next;
 
 	while ((rtw_end_of_queue_search(xmitframe_phead, xmitframe_plist)) == false) {
 		pxmitframe = container_of(xmitframe_plist, struct xmit_frame, list);
 
-		xmitframe_plist = get_next(xmitframe_plist);
+		xmitframe_plist = xmitframe_plist->next;
 
 		rtw_list_delete(&pxmitframe->list);
 
@@ -2595,12 +2595,12 @@ void wakeup_sta_to_xmit(struct rtw_adapt
 		spin_lock_bh(&psta_bmc->sleep_q.lock);
 
 		xmitframe_phead = get_list_head(&psta_bmc->sleep_q);
-		xmitframe_plist = get_next(xmitframe_phead);
+		xmitframe_plist = xmitframe_phead->next;
 
 		while ((rtw_end_of_queue_search(xmitframe_phead, xmitframe_plist)) == false) {
 			pxmitframe = container_of(xmitframe_plist, struct xmit_frame, list);
 
-			xmitframe_plist = get_next(xmitframe_plist);
+			xmitframe_plist = xmitframe_plist->next;
 
 			rtw_list_delete(&pxmitframe->list);
 
@@ -2635,12 +2635,12 @@ void xmit_delivery_enabled_frames(struct
 
 	spin_lock_bh(&psta->sleep_q.lock);
 	xmitframe_phead = get_list_head(&psta->sleep_q);
-	xmitframe_plist = get_next(xmitframe_phead);
+	xmitframe_plist = xmitframe_phead->next;
 
 	while ((rtw_end_of_queue_search(xmitframe_phead, xmitframe_plist)) == false) {
 		pxmitframe = container_of(xmitframe_plist, struct xmit_frame, list);
 
-		xmitframe_plist = get_next(xmitframe_plist);
+		xmitframe_plist = xmitframe_plist->next;
 
 		switch (pxmitframe->attrib.priority) {
 		case 1:
--- a/drivers/staging/rtl8192du/hal/rtl8192d_dm.c
+++ b/drivers/staging/rtl8192du/hal/rtl8192d_dm.c
@@ -1236,13 +1236,13 @@ static void PWDB_Monitor(
 		for (i=0; i< NUM_STA; i++)
 		{
 			phead = &(pstapriv->sta_hash[i]);
-			plist = get_next(phead);
+			plist = phead->next;
 
 			while ((rtw_end_of_queue_search(phead, plist)) == false)
 			{
 				psta = container_of(plist, struct sta_info, hash_list);
 
-				plist = get_next(plist);
+				plist = plist->next;
 
 				if (_rtw_memcmp(psta	->hwaddr, bcast_addr, ETH_ALEN) ||
 					_rtw_memcmp(psta->hwaddr, myid(&adapter->eeprompriv), ETH_ALEN))
--- a/drivers/staging/rtl8192du/hal/rtl8192du_xmit.c
+++ b/drivers/staging/rtl8192du/hal/rtl8192du_xmit.c
@@ -586,11 +586,11 @@ static void UpdateEarlyModeInfo8192D(str
 	spin_lock_bh(&pxmitpriv->lock);
 
 	xmitframe_phead = get_list_head(&ptxservq->sta_pending);
-	xmitframe_plist = get_next(xmitframe_phead);
+	xmitframe_plist = xmitframe_phead->next;
 	while ((rtw_end_of_queue_search(xmitframe_phead, xmitframe_plist) == false)&&(pxmitframe->EMPktNum < 5))
 	{
 		pxmitframe = container_of(xmitframe_plist, struct xmit_frame, list);
-		xmitframe_plist = get_next(xmitframe_plist);
+		xmitframe_plist = xmitframe_plist->next;
 
 		len = xmitframe_need_length(pxmitframe);
 		pxmitframe->EMPktLen[pxmitframe->EMPktNum] = len;
@@ -674,7 +674,7 @@ s32 rtl8192du_xmitframe_complete(struct
 			if (_rtw_queue_empty(&ptxservq->sta_pending) == false)
 			{
 				xmitframe_phead = get_list_head(&ptxservq->sta_pending);
-				xmitframe_plist = get_next(xmitframe_phead);
+				xmitframe_plist = xmitframe_phead->next;
 
 				pxmitframe = container_of(xmitframe_plist, struct xmit_frame, list);
 
--- a/drivers/staging/rtl8192du/include/osdep_service.h
+++ b/drivers/staging/rtl8192du/include/osdep_service.h
@@ -120,11 +120,6 @@ static inline unsigned char *skb_end_poi
 }
 #endif
 
-static inline struct list_head *get_next(struct list_head *list)
-{
-	return list->next;
-}
-
 static inline struct list_head *get_list_head(struct __queue *queue)
 {
 	return (&(queue->queue));
--- a/drivers/staging/rtl8192du/os_dep/ioctl_cfg80211.c
+++ b/drivers/staging/rtl8192du/os_dep/ioctl_cfg80211.c
@@ -1574,7 +1574,7 @@ void rtw_cfg80211_surveydone_event_callb
 	spin_lock_bh(&(pmlmepriv->scanned_queue.lock));
 
 	phead = get_list_head(queue);
-	plist = get_next(phead);
+	plist = phead->next;
 
 	while (1)
 	{
@@ -1594,7 +1594,7 @@ void rtw_cfg80211_surveydone_event_callb
 			rtw_cfg80211_inform_bss(padapter, pnetwork);
 		}
 
-		plist = get_next(plist);
+		plist = plist->next;
 
 	}
 
@@ -2354,7 +2354,7 @@ static int cfg80211_rtw_connect(struct w
 	spin_lock_bh(&queue->lock);
 
 	phead = get_list_head(queue);
-	pmlmepriv->pscanned = get_next(phead);
+	pmlmepriv->pscanned = phead->next;
 
 	while (1)
 	{
@@ -2364,7 +2364,7 @@ static int cfg80211_rtw_connect(struct w
 		}
 
 		pnetwork = container_of(pmlmepriv->pscanned, struct wlan_network, list);
-		pmlmepriv->pscanned = get_next(pmlmepriv->pscanned);
+		pmlmepriv->pscanned = pmlmepriv->pscanned->next;
 
 		dst_ssid = pnetwork->network.Ssid.Ssid;
 		dst_bssid = pnetwork->network.MacAddress;
@@ -3432,14 +3432,14 @@ static int	cfg80211_rtw_del_station(stru
 	spin_lock_bh(&pstapriv->asoc_list_lock);
 
 	phead = &pstapriv->asoc_list;
-	plist = get_next(phead);
+	plist = phead->next;
 
 	/* check asoc_queue */
 	while ((rtw_end_of_queue_search(phead, plist)) == false)
 	{
 		psta = container_of(plist, struct sta_info, asoc_list);
 
-		plist = get_next(plist);
+		plist = plist->next;
 
 		if (_rtw_memcmp(mac, psta->hwaddr, ETH_ALEN))
 		{
--- a/drivers/staging/rtl8192du/os_dep/ioctl_linux.c
+++ b/drivers/staging/rtl8192du/os_dep/ioctl_linux.c
@@ -1342,7 +1342,7 @@ static int rtw_wx_set_wap(struct net_dev
 	spin_lock_bh(&pmlmepriv->lock);
 	spin_lock_bh(&queue->lock);
 	phead = get_list_head(queue);
-	pmlmepriv->pscanned = get_next(phead);
+	pmlmepriv->pscanned = phead->next;
 
 	while (1) {
 		if ((rtw_end_of_queue_search(phead, pmlmepriv->pscanned)) == true)
@@ -1350,7 +1350,7 @@ static int rtw_wx_set_wap(struct net_dev
 
 		pnetwork = container_of(pmlmepriv->pscanned, struct wlan_network, list);
 
-		pmlmepriv->pscanned = get_next(pmlmepriv->pscanned);
+		pmlmepriv->pscanned = pmlmepriv->pscanned->next;
 
 		dst_bssid = pnetwork->network.MacAddress;
 
@@ -1726,7 +1726,7 @@ static int rtw_wx_get_scan(struct net_de
 	spin_lock_bh(&(pmlmepriv->scanned_queue.lock));
 
 	phead = get_list_head(queue);
-	plist = get_next(phead);
+	plist = phead->next;
 
 	while (1)
 	{
@@ -1750,7 +1750,7 @@ static int rtw_wx_get_scan(struct net_de
 			ev = translate_scan(padapter, a, pnetwork, ev, stop);
 		}
 
-		plist = get_next(plist);
+		plist = plist->next;
 
 	}
 
@@ -1885,7 +1885,7 @@ static int rtw_wx_set_essid(struct net_d
 		spin_lock_bh(&pmlmepriv->lock);
 		spin_lock_bh(&queue->lock);
 		phead = get_list_head(queue);
-		pmlmepriv->pscanned = get_next(phead);
+		pmlmepriv->pscanned = phead->next;
 
 		while (1) {
 			if (rtw_end_of_queue_search(phead, pmlmepriv->pscanned) == true) {
@@ -1897,7 +1897,7 @@ static int rtw_wx_set_essid(struct net_d
 
 			pnetwork = container_of(pmlmepriv->pscanned, struct wlan_network, list);
 
-			pmlmepriv->pscanned = get_next(pmlmepriv->pscanned);
+			pmlmepriv->pscanned = pmlmepriv->pscanned->next;
 
 			dst_ssid = pnetwork->network.Ssid.Ssid;
 
@@ -3099,7 +3099,7 @@ static int rtw_get_ap_info(struct net_de
 	spin_lock_bh(&(pmlmepriv->scanned_queue.lock));
 
 	phead = get_list_head(queue);
-	plist = get_next(phead);
+	plist = phead->next;
 
 	while (1) {
 		if (rtw_end_of_queue_search(phead, plist) == true)
@@ -3131,7 +3131,7 @@ static int rtw_get_ap_info(struct net_de
 
 		}
 
-		plist = get_next(plist);
+		plist = plist->next;
 
 	}
 
@@ -3708,7 +3708,7 @@ static int rtw_p2p_get_wps_configmethod(
 	spin_lock_bh(&(pmlmepriv->scanned_queue.lock));
 
 	phead = get_list_head(queue);
-	plist = get_next(phead);
+	plist = phead->next;
 
 	while (1)
 	{
@@ -3734,7 +3734,7 @@ static int rtw_p2p_get_wps_configmethod(
 			break;
 		}
 
-		plist = get_next(plist);
+		plist = plist->next;
 
 	}
 
@@ -3838,7 +3838,7 @@ static int rtw_p2p_get_go_device_address
 	spin_lock_bh(&(pmlmepriv->scanned_queue.lock));
 
 	phead = get_list_head(queue);
-	plist = get_next(phead);
+	plist = phead->next;
 
 	while (1)
 	{
@@ -3878,7 +3878,7 @@ static int rtw_p2p_get_go_device_address
 			}
 		}
 
-		plist = get_next(plist);
+		plist = plist->next;
 
 	}
 
@@ -3928,7 +3928,7 @@ static int rtw_p2p_get_device_type(struc
 	spin_lock_bh(&(pmlmepriv->scanned_queue.lock));
 
 	phead = get_list_head(queue);
-	plist = get_next(phead);
+	plist = phead->next;
 
 	while (1)
 	{
@@ -3957,7 +3957,7 @@ static int rtw_p2p_get_device_type(struc
 			break;
 		}
 
-		plist = get_next(plist);
+		plist = plist->next;
 
 	}
 
@@ -4003,7 +4003,7 @@ static int rtw_p2p_get_device_name(struc
 	spin_lock_bh(&(pmlmepriv->scanned_queue.lock));
 
 	phead = get_list_head(queue);
-	plist = get_next(phead);
+	plist = phead->next;
 
 	while (1)
 	{
@@ -4029,7 +4029,7 @@ static int rtw_p2p_get_device_name(struc
 			break;
 		}
 
-		plist = get_next(plist);
+		plist = plist->next;
 
 	}
 
@@ -4075,7 +4075,7 @@ static int rtw_p2p_get_invitation_proced
 	spin_lock_bh(&(pmlmepriv->scanned_queue.lock));
 
 	phead = get_list_head(queue);
-	plist = get_next(phead);
+	plist = phead->next;
 
 	while (1)
 	{
@@ -4106,7 +4106,7 @@ static int rtw_p2p_get_invitation_proced
 			}
 		}
 
-		plist = get_next(plist);
+		plist = plist->next;
 
 	}
 
@@ -4180,7 +4180,7 @@ static int rtw_p2p_connect(struct net_de
 	spin_lock_bh(&(pmlmepriv->scanned_queue.lock));
 
 	phead = get_list_head(queue);
-	plist = get_next(phead);
+	plist = phead->next;
 
 	while (1)
 	{
@@ -4193,7 +4193,7 @@ static int rtw_p2p_connect(struct net_de
 			break;
 		}
 
-		plist = get_next(plist);
+		plist = plist->next;
 
 	}
 
@@ -4330,7 +4330,7 @@ static int rtw_p2p_invite_req(struct net
 	spin_lock_bh(&(pmlmepriv->scanned_queue.lock));
 
 	phead = get_list_head(queue);
-	plist = get_next(phead);
+	plist = phead->next;
 
 	while (1)
 	{
@@ -4369,7 +4369,7 @@ static int rtw_p2p_invite_req(struct net
 
 		}
 
-		plist = get_next(plist);
+		plist = plist->next;
 
 	}
 
@@ -4589,7 +4589,7 @@ static int rtw_p2p_set_pc(struct net_dev
 	spin_lock_bh(&(pmlmepriv->scanned_queue.lock));
 
 	phead = get_list_head(queue);
-	plist = get_next(phead);
+	plist = phead->next;
 
 	while (1)
 	{
@@ -4630,7 +4630,7 @@ static int rtw_p2p_set_pc(struct net_dev
 
 		}
 
-		plist = get_next(plist);
+		plist = plist->next;
 
 	}
 
@@ -4863,7 +4863,7 @@ static int rtw_p2p_prov_disc(struct net_
 	spin_lock_bh(&(pmlmepriv->scanned_queue.lock));
 
 	phead = get_list_head(queue);
-	plist = get_next(phead);
+	plist = phead->next;
 
 	while (1)
 	{
@@ -4910,7 +4910,7 @@ static int rtw_p2p_prov_disc(struct net_
 			}
 		}
 
-		plist = get_next(plist);
+		plist = plist->next;
 
 	}
 
@@ -5602,13 +5602,13 @@ static int rtw_dbg_port(struct net_devic
 						for (i = 0; i< NUM_STA; i++)
 						{
 							phead = &(pstapriv->sta_hash[i]);
-							plist = get_next(phead);
+							plist = phead->next;
 
 							while ((rtw_end_of_queue_search(phead, plist)) == false)
 							{
 								psta = container_of(plist, struct sta_info, hash_list);
 
-								plist = get_next(plist);
+								plist = plist->next;
 
 								if (extra_arg == psta->aid)
 								{
@@ -7605,12 +7605,12 @@ static int rtw_tdls_enable(struct net_de
 		spin_lock_bh(&pstapriv->sta_hash_lock);
 		for (index = 0; index< NUM_STA; index++) {
 			phead = &(pstapriv->sta_hash[index]);
-			plist = get_next(phead);
+			plist = phead->next;
 
 			while ((rtw_end_of_queue_search(phead, plist)) == false) {
 				psta = container_of(plist, struct sta_info , hash_list);
 
-				plist = get_next(plist);
+				plist = plist->next;
 
 				if (psta->tdls_sta_state != TDLS_STATE_NONE)
 					memcpy(tdls_sta[index], psta->hwaddr, ETH_ALEN);
--- a/drivers/staging/rtl8192du/os_dep/xmit_linux.c
+++ b/drivers/staging/rtl8192du/os_dep/xmit_linux.c
@@ -234,14 +234,14 @@ static int rtw_mlcst2unicst(struct rtw_a
 
 	spin_lock_bh(&pstapriv->asoc_list_lock);
 	phead = &pstapriv->asoc_list;
-	plist = get_next(phead);
+	plist = phead->next;
 
 	/* free sta asoc_queue */
 	while ((rtw_end_of_queue_search(phead, plist)) == false)
 	{
 		psta = container_of(plist, struct sta_info, asoc_list);
 
-		plist = get_next(plist);
+		plist = plist->next;
 
 		/* avoid   come from STA1 and send back STA1 */
 		if (!memcmp(psta->hwaddr, &skb->data[6], 6))
