From cff449186250897943dddace9024768bea6e26a6 Mon Sep 17 00:00:00 2001
From: Stefan Lippers-Hollmann <s.l-h@gmx.de>
Date: Sat, 22 Mar 2014 03:03:11 +0100
Subject: [PATCH 413/456] rtl8192du: replace custom rtw_udelay_os() with
 udelay()

Signed-off-by: Stefan Lippers-Hollmann <s.l-h@gmx.de>
---
 core/rtw_efuse.c        |  2 +-
 hal/rtl8192d_cmd.c      |  2 +-
 hal/rtl8192d_hal_init.c | 10 +++----
 hal/rtl8192d_phycfg.c   | 80 ++++++++++++++++++++++++-------------------------
 hal/rtl8192d_rf6052.c   |  8 ++---
 hal/usb_halinit.c       | 12 ++++----
 include/osdep_service.h |  1 -
 os_dep/osdep_service.c  |  5 ----
 8 files changed, 57 insertions(+), 63 deletions(-)

--- a/drivers/staging/rtl8192du/core/rtw_efuse.c
+++ b/drivers/staging/rtl8192du/core/rtw_efuse.c
@@ -172,7 +172,7 @@ void ReadEFuseByte(struct rtw_adapter *a
 	/*  This fix the problem that Efuse read error in high temperature condition. */
 	/*  Designer says that there shall be some delay after ready bit is set, or the */
 	/*  result will always stay on last data we read. */
-	rtw_udelay_os(50);
+	udelay(50);
 	value32 = rtw_read32(adapter, EFUSE_CTRL);
 
 	*pbuf = (u8)(value32 & 0xff);
--- a/drivers/staging/rtl8192du/hal/rtl8192d_cmd.c
+++ b/drivers/staging/rtl8192du/hal/rtl8192d_cmd.c
@@ -138,7 +138,7 @@ static void _FillH2CCmd92D(struct rtw_ad
 				DBG_8192D("FillH2CCmd92C(): Wating too long for FW read clear HMEBox(%d)!!!\n", BoxNum);
 				break;
 			}
-			rtw_udelay_os(10); /* us */
+			udelay(10); /* us */
 			IsFwRead = CheckFwReadLastH2C(padapter, BoxNum);
 		}
 
--- a/drivers/staging/rtl8192du/hal/rtl8192d_hal_init.c
+++ b/drivers/staging/rtl8192du/hal/rtl8192d_hal_init.c
@@ -211,7 +211,7 @@ void rtl8192d_FirmwareSelfReset(struct r
 		Delay--;
 		if (Delay == 0)
 			break;
-		rtw_udelay_os(50);
+		udelay(50);
 		u1bTmp = rtw_read8(adapter, REG_SYS_FUNC_EN+1);
 	}
 
@@ -243,14 +243,14 @@ static int _FWInit(struct rtw_adapter *a
 					  rtw_read8(adapter, FW_MAC0_ready));
 				return _SUCCESS;
 			}
-			rtw_udelay_os(5);
+			udelay(5);
 		} else {
 			if (rtw_read8(adapter, FW_MAC1_ready) &mac1_ready) {
 				DBG_8192D("Polling FW ready success!! FW_MAC1_ready:0x%x\n",
 					  rtw_read8(adapter, FW_MAC1_ready));
 				return _SUCCESS;
 			}
-			rtw_udelay_os(5);
+			udelay(5);
 		}
 
 	} while (counter++ < POLLING_READY_TIMEOUT_COUNT);
@@ -377,7 +377,7 @@ int FirmwareDownload92D(struct rtw_adapt
 		} else if (bFwDownloadInProcess) {
 			RELEASE_GLOBAL_MUTEX(GlobalMutexForFwDownload);
 			for (count = 0; count < 5000; count++) {
-				rtw_udelay_os(500);
+				udelay(500);
 				ACQUIRE_GLOBAL_MUTEX(GlobalMutexForFwDownload);
 				bFwDownloaded = _IsFWDownloaded(adapter);
 				if ((rtw_read8(adapter, 0x1f)&BIT5) == BIT5)
@@ -989,7 +989,7 @@ PHY_SetPowerOnFor8192D(
 			}
 			else
 			{
-				rtw_udelay_os(500);
+				udelay(500);
 				ACQUIRE_GLOBAL_MUTEX(GlobalMutexForPowerOnAndPowerOff);
 				value8 = rtw_read8(adapter, REG_POWER_OFF_IN_PROCESS);
 				RELEASE_GLOBAL_MUTEX(GlobalMutexForPowerOnAndPowerOff);
--- a/drivers/staging/rtl8192du/hal/rtl8192d_phycfg.c
+++ b/drivers/staging/rtl8192du/hal/rtl8192d_phycfg.c
@@ -328,13 +328,13 @@ phy_RFSerialRead(
 	tmplong2 = (tmplong2 & (~bLSSIReadAddress)) | (NewOffset<<23) | bLSSIReadEdge;	/* T65 RF */
 
 	PHY_SetBBReg(adapter, rFPGA0_XA_HSSIParameter2|MaskforPhySet, bMaskDWord, tmplong&(~bLSSIReadEdge));
-	rtw_udelay_os(10);
+	udelay(10);
 
 	PHY_SetBBReg(adapter, pPhyReg->rfHSSIPara2|MaskforPhySet, bMaskDWord, tmplong2);
 	for (i = 0; i < 2; i++)
-		rtw_udelay_os(MAX_STALL_TIME);
+		udelay(MAX_STALL_TIME);
 	PHY_SetBBReg(adapter, rFPGA0_XA_HSSIParameter2|MaskforPhySet, bMaskDWord, tmplong|bLSSIReadEdge);
-	rtw_udelay_os(10);
+	udelay(10);
 
 	if (eRFPath == RF_PATH_A)
 		RfPiEnable = (u8)PHY_QueryBBReg(adapter, rFPGA0_XA_HSSIParameter1|MaskforPhySet, BIT8);
@@ -801,17 +801,17 @@ phy_ConfigBBWithHeaderFile(
 			else if (Rtl819XPHY_REGArray_Table[i] == 0xfc)
 				rtw_mdelay_os(1);
 			else if (Rtl819XPHY_REGArray_Table[i] == 0xfb)
-				rtw_udelay_os(50);
+				udelay(50);
 			else if (Rtl819XPHY_REGArray_Table[i] == 0xfa)
-				rtw_udelay_os(5);
+				udelay(5);
 			else if (Rtl819XPHY_REGArray_Table[i] == 0xf9)
-				rtw_udelay_os(1);
+				udelay(1);
 			else if (Rtl819XPHY_REGArray_Table[i] == 0xa24)
 				pdmpriv->RegA24 = Rtl819XPHY_REGArray_Table[i+1];
 			PHY_SetBBReg(adapter, Rtl819XPHY_REGArray_Table[i], bMaskDWord, Rtl819XPHY_REGArray_Table[i+1]);
 
 			/*  Add 1us delay between BB/RF register setting. */
-			rtw_udelay_os(1);
+			udelay(1);
 		}
 	} else if (ConfigType == BaseBand_Config_AGC_TAB) {
 		/* especial for 5G, vivi, 20100528 */
@@ -820,7 +820,7 @@ phy_ConfigBBWithHeaderFile(
 				PHY_SetBBReg(adapter, Rtl819XAGCTAB_Array_Table[i], bMaskDWord, Rtl819XAGCTAB_Array_Table[i+1]);
 
 				/*  Add 1us delay between BB/RF register setting. */
-				rtw_udelay_os(1);
+				udelay(1);
 
 			}
 		} else {
@@ -831,7 +831,7 @@ phy_ConfigBBWithHeaderFile(
 					PHY_SetBBReg(adapter, Rtl819XAGCTAB_Array_Table[i], bMaskDWord, Rtl819XAGCTAB_Array_Table[i+1]);
 
 					/*  Add 1us delay between BB/RF register setting. */
-					rtw_udelay_os(1);
+					udelay(1);
 				}
 			} else {
 				for (i = 0;i<AGCTAB_5GArrayLen;i = i+2)
@@ -839,7 +839,7 @@ phy_ConfigBBWithHeaderFile(
 					PHY_SetBBReg(adapter, Rtl819XAGCTAB_5GArray_Table[i], bMaskDWord, Rtl819XAGCTAB_5GArray_Table[i+1]);
 
 					/*  Add 1us delay between BB/RF register setting. */
-					rtw_udelay_os(1);
+					udelay(1);
 				}
 			}
 		}
@@ -1154,20 +1154,20 @@ rtl8192d_PHY_ConfigRFWithHeaderFile(
 					rtw_mdelay_os(50);
 				} else if (Rtl819XRadioA_Array_Table[i] == 0xfd) {
 					for (j = 0;j<100;j++)
-						rtw_udelay_os(MAX_STALL_TIME);
+						udelay(MAX_STALL_TIME);
 				} else if (Rtl819XRadioA_Array_Table[i] == 0xfc) {
 					for (j = 0;j<20;j++)
-						rtw_udelay_os(MAX_STALL_TIME);
+						udelay(MAX_STALL_TIME);
 				} else if (Rtl819XRadioA_Array_Table[i] == 0xfb) {
-					rtw_udelay_os(50);
+					udelay(50);
 				} else if (Rtl819XRadioA_Array_Table[i] == 0xfa) {
-					rtw_udelay_os(5);
+					udelay(5);
 				} else if (Rtl819XRadioA_Array_Table[i] == 0xf9) {
-					rtw_udelay_os(1);
+					udelay(1);
 				} else {
 					PHY_SetRFReg(adapter, eRFPath, Rtl819XRadioA_Array_Table[i]|MaskforPhySet, bRFRegOffsetMask, Rtl819XRadioA_Array_Table[i+1]);
 					/*  Add 1us delay between BB/RF register setting. */
-					rtw_udelay_os(1);
+					udelay(1);
 				}
 			}
 			break;
@@ -1180,21 +1180,21 @@ rtl8192d_PHY_ConfigRFWithHeaderFile(
 				} else if (Rtl819XRadioB_Array_Table[i] == 0xfd) {
 					/* rtw_mdelay_os(5); */
 					for (j = 0;j<100;j++)
-						rtw_udelay_os(MAX_STALL_TIME);
+						udelay(MAX_STALL_TIME);
 				} else if (Rtl819XRadioB_Array_Table[i] == 0xfc) {
 					/* rtw_mdelay_os(1); */
 					for (j = 0;j<20;j++)
-						rtw_udelay_os(MAX_STALL_TIME);
+						udelay(MAX_STALL_TIME);
 				} else if (Rtl819XRadioB_Array_Table[i] == 0xfb) {
-					rtw_udelay_os(50);
+					udelay(50);
 				} else if (Rtl819XRadioB_Array_Table[i] == 0xfa) {
-					rtw_udelay_os(5);
+					udelay(5);
 				} else if (Rtl819XRadioB_Array_Table[i] == 0xf9) {
-					rtw_udelay_os(1);
+					udelay(1);
 				} else {
 					PHY_SetRFReg(adapter, eRFPath, Rtl819XRadioB_Array_Table[i]|MaskforPhySet, bRFRegOffsetMask, Rtl819XRadioB_Array_Table[i+1]);
 					/*  Add 1us delay between BB/RF register setting. */
-					rtw_udelay_os(1);
+					udelay(1);
 				}
 			}
 			break;
@@ -1912,7 +1912,7 @@ static void PHY_SwitchWirelessBand(struc
 	}
 
 	for (i = 0;i<20;i++)
-			rtw_udelay_os(MAX_STALL_TIME);
+		udelay(MAX_STALL_TIME);
 
 }
 
@@ -1942,18 +1942,18 @@ PHY_EnableRFENV(
 
 	/*----Set RF_ENV enable----*/
 	PHY_SetBBReg(adapter, pPhyReg->rfintfe|MaskforPhySet, bRFSI_RFENV<<16, 0x1);
-	rtw_udelay_os(1);
+	udelay(1);
 
 	/*----Set RF_ENV output high----*/
 	PHY_SetBBReg(adapter, pPhyReg->rfintfo|MaskforPhySet, bRFSI_RFENV, 0x1);
-	rtw_udelay_os(1);
+	udelay(1);
 
 	/* Set bit number of Address and Data for RF register */
 	PHY_SetBBReg(adapter, pPhyReg->rfHSSIPara2|MaskforPhySet, b3WireAddressLength, 0x0);	/*  Set 1 to 4 bits for 8255 */
-	rtw_udelay_os(1);
+	udelay(1);
 
 	PHY_SetBBReg(adapter, pPhyReg->rfHSSIPara2|MaskforPhySet, b3WireDataLength, 0x0); /*  Set 0 to 12	bits for 8255 */
-	rtw_udelay_os(1);
+	udelay(1);
 }
 
 static void
@@ -2726,7 +2726,7 @@ phy_PathA_IQK(
 	PHY_SetBBReg(adapter, rIQK_AGC_Pts, bMaskDWord, 0xf8000000);
 
 	/*  delay x ms */
-	rtw_udelay_os(IQK_DELAY_TIME*1000);
+	udelay(IQK_DELAY_TIME*1000);
 
 	/*  Check failed */
 	regEAC = PHY_QueryBBReg(adapter, rRx_Power_After_IQK_A_2, bMaskDWord);
@@ -2809,14 +2809,14 @@ phy_PathA_IQK_5G_Normal(
 
 		while (timecount < timeout && PHY_QueryBBReg(adapter, rRx_Power_After_IQK_A_2, BIT26) == 0x00)
 		{
-			rtw_udelay_os(IQK_DELAY_TIME*1000*2);
+			udelay(IQK_DELAY_TIME*1000*2);
 			timecount++;
 		}
 
 		timecount = 0;
 		while (timecount < timeout && PHY_QueryBBReg(adapter, rRx_Power_Before_IQK_A_2, 0x3FF0000) == 0x00)
 		{
-			rtw_udelay_os(IQK_DELAY_TIME*1000*2);
+			udelay(IQK_DELAY_TIME*1000*2);
 			timecount++;
 		}
 
@@ -2879,7 +2879,7 @@ phy_PathB_IQK(
 	PHY_SetBBReg(adapter, rIQK_AGC_Cont, bMaskDWord, 0x00000000);
 
 	/*  delay x ms */
-	rtw_udelay_os(IQK_DELAY_TIME*1000);/* PlatformStallExecution(IQK_DELAY_TIME*1000); */
+	udelay(IQK_DELAY_TIME*1000);/* PlatformStallExecution(IQK_DELAY_TIME*1000); */
 
 	/*  Check failed */
 	regEAC = PHY_QueryBBReg(adapter, rRx_Power_After_IQK_A_2, bMaskDWord);
@@ -2948,13 +2948,13 @@ phy_PathB_IQK_5G_Normal(
 		rtw_mdelay_os(IQK_DELAY_TIME*10);
 
 		while (timecount < timeout && PHY_QueryBBReg(adapter, rRx_Power_After_IQK_A_2, BIT29) == 0x00) {
-			rtw_udelay_os(IQK_DELAY_TIME*1000*2);
+			udelay(IQK_DELAY_TIME*1000*2);
 			timecount++;
 		}
 
 		timecount = 0;
 		while (timecount < timeout && PHY_QueryBBReg(adapter, rRx_Power_Before_IQK_B_2, 0x3FF0000) == 0x00) {
-			rtw_udelay_os(IQK_DELAY_TIME*1000*2);
+			udelay(IQK_DELAY_TIME*1000*2);
 			timecount++;
 		}
 
@@ -3776,7 +3776,7 @@ phy_IQCalibrate_5G(
 	PHY_SetBBReg(adapter, rIQK_AGC_Pts, bMaskDWord, 0xf8000000);
 
 	/* Delay 1 ms */
-	rtw_udelay_os(IQK_DELAY_TIME*1000);
+	udelay(IQK_DELAY_TIME*1000);
 
 	/* Exit IQK mode */
 	PHY_SetBBReg(adapter, rFPGA0_IQK, bMaskDWord, 0x00000000);
@@ -3847,7 +3847,7 @@ phy_IQCalibrate_5G(
 		/* load TX0 IMR setting */
 		PHY_SetBBReg(adapter, rTx_IQK, bMaskDWord, RX0REG0xe40);
 		/* Sleep(5) -> delay 1ms */
-		rtw_udelay_os(IQK_DELAY_TIME*1000);
+		udelay(IQK_DELAY_TIME*1000);
 
 		/* LO calibration setting */
 		PHY_SetBBReg(adapter, rIQK_AGC_Rsp, bMaskDWord, 0x0046a911);
@@ -3857,7 +3857,7 @@ phy_IQCalibrate_5G(
 		PHY_SetBBReg(adapter, rIQK_AGC_Pts, bMaskDWord, 0xf8000000);
 
 		/* Delay 3 ms */
-		rtw_udelay_os(3*IQK_DELAY_TIME*1000);
+		udelay(3*IQK_DELAY_TIME*1000);
 
 		/* Exit IQK mode */
 		PHY_SetBBReg(adapter, rFPGA0_IQK, bMaskDWord, 0x00000000);
@@ -3925,7 +3925,7 @@ phy_IQCalibrate_5G(
 	PHY_SetBBReg(adapter, rIQK_AGC_Cont, bMaskDWord, 0x00000000);
 
 	/* Delay 1 ms */
-	rtw_udelay_os(IQK_DELAY_TIME*1000);
+	udelay(IQK_DELAY_TIME*1000);
 
 	/* Exit IQK mode */
 	PHY_SetBBReg(adapter, rFPGA0_IQK, bMaskDWord, 0x00000000);
@@ -3990,7 +3990,7 @@ phy_IQCalibrate_5G(
 		PHY_SetBBReg(adapter, rTx_IQK, bMaskDWord, RX1REG0xe40);
 
 		/* Sleep(5) -> delay 1ms */
-		rtw_udelay_os(IQK_DELAY_TIME*1000);
+		udelay(IQK_DELAY_TIME*1000);
 
 		/* LO calibration setting */
 		PHY_SetBBReg(adapter, rIQK_AGC_Rsp, bMaskDWord, 0x0046a911);
@@ -4000,7 +4000,7 @@ phy_IQCalibrate_5G(
 		PHY_SetBBReg(adapter, rIQK_AGC_Cont, bMaskDWord, 0x00000000);
 
 		/* Delay 1 ms */
-		rtw_udelay_os(3*IQK_DELAY_TIME*1000);
+		udelay(3*IQK_DELAY_TIME*1000);
 
 		/* Check_RX_IQK_B_result() */
 		REG0xeac = PHY_QueryBBReg(adapter, rRx_Power_After_IQK_A_2, bMaskDWord);
@@ -5364,7 +5364,7 @@ HalChangeCCKStatus8192D(
 			{
 				DBG_8192D("packet in tx packet buffer aaaaaaaaa 0x204 %x\n", rtw_read32(adapter, 0x204));
 				DBG_8192D("packet in tx packet buffer aaaaaaa 0x200 %x\n", rtw_read32(adapter, 0x200));
-				rtw_udelay_os(1000);
+				udelay(1000);
 			}
 			else
 			{
--- a/drivers/staging/rtl8192du/hal/rtl8192d_rf6052.c
+++ b/drivers/staging/rtl8192du/hal/rtl8192d_rf6052.c
@@ -627,18 +627,18 @@ phy_RF6052_Config_ParaFile(
 
 		/*----Set RF_ENV enable----*/
 		PHY_SetBBReg(adapter, pPhyReg->rfintfe|MaskforPhySet, bRFSI_RFENV<<16, 0x1);
-		rtw_udelay_os(1);/* PlatformStallExecution(1); */
+		udelay(1);/* PlatformStallExecution(1); */
 
 		/*----Set RF_ENV output high----*/
 		PHY_SetBBReg(adapter, pPhyReg->rfintfo|MaskforPhySet, bRFSI_RFENV, 0x1);
-		rtw_udelay_os(1);/* PlatformStallExecution(1); */
+		udelay(1);/* PlatformStallExecution(1); */
 
 		/* Set bit number of Address and Data for RF register */
 		PHY_SetBBReg(adapter, pPhyReg->rfHSSIPara2|MaskforPhySet, b3WireAddressLength, 0x0);	/*  Set 1 to 4 bits for 8255 */
-		rtw_udelay_os(1);/* PlatformStallExecution(1); */
+		udelay(1);/* PlatformStallExecution(1); */
 
 		PHY_SetBBReg(adapter, pPhyReg->rfHSSIPara2|MaskforPhySet, b3WireDataLength, 0x0);	/*  Set 0 to 12  bits for 8255 */
-		rtw_udelay_os(1);/* PlatformStallExecution(1); */
+		udelay(1);/* PlatformStallExecution(1); */
 
 		/*----Initialize RF fom connfiguration file----*/
 		switch (eRFPath) {
--- a/drivers/staging/rtl8192du/hal/usb_halinit.c
+++ b/drivers/staging/rtl8192du/hal/usb_halinit.c
@@ -1816,7 +1816,7 @@ static u32 rtl8192du_hal_init(struct rtw
 		rtw_write32(padapter, 0x100, ulRegRead);
 
 		/*  2006.11.29. After reset cpu, we sholud wait for a second, otherwise, it may fail to write registers. Emily */
-		rtw_udelay_os(500);
+		udelay(500);
 	}
 
 	RT_CLEAR_PS_LEVEL(pwrctrlpriv, RT_RF_OFF_LEVL_HALT_NIC);
@@ -2081,7 +2081,7 @@ _ResetDigitalProcedure1(
 			rtw_write8(adapter, REG_HMETFR+3, 0x20);/* 8051 reset by self */
 
 			while ((retry_cnts++ <100) && (FEN_CPUEN &rtw_read16(adapter, REG_SYS_FUNC_EN)))
-				rtw_udelay_os(50);/* us */
+				udelay(50);/* us */
 
 			if (retry_cnts>= 100) {
 				rtw_write8(adapter, REG_FWIMR, 0x00);
@@ -2210,7 +2210,7 @@ CanGotoPowerOff92D(
 	u1bTmp|= BIT7;
 	rtw_write8(adapter, 0x17, u1bTmp);
 
-	rtw_udelay_os(500);
+	udelay(500);
 	/*  query another mac status; */
 	if (pHalData->interfaceIndex == 0)
 	{	/*  query another mac status; */
@@ -2248,7 +2248,7 @@ CardDisableHWSM(/*  HW Auto state machin
 	}
 
 	rtw_write8(adapter, REG_TXPAUSE, 0xFF);
-	rtw_udelay_os(500);
+	udelay(500);
 	rtw_write8(adapter,	REG_CR, 0x0);
 
 	/*  RF Off Sequence ==== */
@@ -2299,7 +2299,7 @@ CardDisableWithoutHWSM(/*  without HW Au
 	}
 
 	rtw_write8(adapter, REG_TXPAUSE, 0xFF);
-	rtw_udelay_os(500);
+	udelay(500);
 	rtw_write8(adapter,	REG_CR, 0x0);
 
 	/*  RF Off Sequence ==== */
@@ -2310,7 +2310,7 @@ CardDisableWithoutHWSM(/*  without HW Au
 
 	/*  stop tx/rx */
 	rtw_write8(adapter, REG_TXPAUSE, 0xFF);
-	rtw_udelay_os(500);
+	udelay(500);
 	rtw_write8(adapter,	REG_CR, 0x0);
 
 	if (!PHY_CheckPowerOffFor8192D(adapter))
--- a/drivers/staging/rtl8192du/include/osdep_service.h
+++ b/drivers/staging/rtl8192du/include/osdep_service.h
@@ -210,7 +210,6 @@ void	rtw_usleep_os(int us);
 u32	rtw_atoi(u8* s);
 
 void	rtw_mdelay_os(int ms);
-void	rtw_udelay_os(int us);
 
 static inline unsigned char _cancel_timer_ex(struct timer_list *timer)
 {
--- a/drivers/staging/rtl8192du/os_dep/osdep_service.c
+++ b/drivers/staging/rtl8192du/os_dep/osdep_service.c
@@ -211,11 +211,6 @@ void rtw_mdelay_os(int ms)
 	mdelay((unsigned long)ms);
 }
 
-void rtw_udelay_os(int us)
-{
-      udelay((unsigned long)us);
-}
-
 #define RTW_SUSPEND_LOCK_NAME "rtw_wifi"
 
 struct net_device *rtw_alloc_etherdev_with_old_priv(int sizeof_priv, void *old_priv)
