From 4c4e9abf861fa68499b5c9249260eab2df66c3d6 Mon Sep 17 00:00:00 2001
From: Stefan Lippers-Hollmann <s.l-h@gmx.de>
Date: Sat, 22 Mar 2014 03:03:20 +0100
Subject: [PATCH 422/456] rtl8192du: replace custom _rtw_memcmp() with memcmp()

Signed-off-by: Stefan Lippers-Hollmann <s.l-h@gmx.de>
---
 core/rtw_ap.c           | 16 +++++------
 core/rtw_ieee80211.c    | 38 +++++++++++++-------------
 core/rtw_ioctl_set.c    |  4 +--
 core/rtw_mlme.c         | 31 +++++++++------------
 core/rtw_mlme_ext.c     | 72 ++++++++++++++++++++++++-------------------------
 core/rtw_p2p.c          | 12 ++++-----
 core/rtw_recv.c         | 47 ++++++++++++++++----------------
 core/rtw_sta_mgt.c      |  4 +--
 core/rtw_wlan_util.c    | 24 ++++++++---------
 core/rtw_xmit.c         |  4 +--
 hal/rtl8192d_dm.c       |  8 +++---
 hal/rtl8192d_rxdesc.c   |  4 +--
 hal/usb_ops_linux.c     |  2 +-
 include/osdep_service.h |  2 --
 os_dep/ioctl_cfg80211.c | 22 +++++++--------
 os_dep/osdep_service.c  |  9 -------
 os_dep/recv_linux.c     |  2 +-
 17 files changed, 141 insertions(+), 160 deletions(-)

--- a/drivers/staging/rtl8192du/core/rtw_ap.c
+++ b/drivers/staging/rtl8192du/core/rtw_ap.c
@@ -1189,7 +1189,7 @@ int rtw_check_beacon_data(struct rtw_ada
 	for (p = ie + _BEACON_IE_OFFSET_;; p += (ie_len + 2)) {
 		p = rtw_get_ie(p, _SSN_IE_1_, &ie_len, (pbss_network->IELength -
 			       _BEACON_IE_OFFSET_ - (ie_len + 2)));
-		if ((p) && (_rtw_memcmp(p+2, OUI1, 4))) {
+		if ((p) && (!memcmp(p+2, OUI1, 4))) {
 			if (rtw_parse_wpa_ie(p, ie_len+2, &group_cipher,
 					     &pairwise_cipher) == _SUCCESS) {
 				psecuritypriv->dot11AuthAlgrthm = dot11AuthAlgrthm_8021X;
@@ -1216,7 +1216,7 @@ int rtw_check_beacon_data(struct rtw_ada
 			p = rtw_get_ie(p, _VENDOR_SPECIFIC_IE_, &ie_len,
 				       (pbss_network->IELength -
 				       _BEACON_IE_OFFSET_ - (ie_len + 2)));
-			if ((p) && _rtw_memcmp(p+2, WMM_PARA_IE, 6)) {
+			if ((p) && !memcmp(p+2, WMM_PARA_IE, 6)) {
 				pmlmepriv->qospriv.qos_option = 1;
 
 				*(p+8) |= BIT(7);/* QoS Info, support U-APSD */
@@ -1365,7 +1365,7 @@ int rtw_acl_add_sta(struct rtw_adapter *
 		paclnode = container_of(plist, struct rtw_wlan_acl_node, list);
 		plist = plist->next;
 
-		if (_rtw_memcmp(paclnode->addr, addr, ETH_ALEN)) {
+		if (!memcmp(paclnode->addr, addr, ETH_ALEN)) {
 			if (paclnode->valid) {
 				added = true;
 				DBG_8192D("%s, sta has been added\n", __func__);
@@ -1427,7 +1427,7 @@ int rtw_acl_remove_sta(struct rtw_adapte
 		paclnode = container_of(plist, struct rtw_wlan_acl_node, list);
 		plist = plist->next;
 
-		if (_rtw_memcmp(paclnode->addr, addr, ETH_ALEN)) {
+		if (!memcmp(paclnode->addr, addr, ETH_ALEN)) {
 			if (paclnode->valid) {
 				paclnode->valid = false;
 
@@ -1543,11 +1543,11 @@ static void update_bcn_vendor_spec_ie(st
 {
 	DBG_8192D("%s\n", __func__);
 
-	if (_rtw_memcmp(WPS_OUI, oui, 4))
+	if (!memcmp(WPS_OUI, oui, 4))
 		update_bcn_wps_ie(padapter);
-	else if ((_rtw_memcmp(RTW_WPA_OUI, oui, 4)) ||
-		 (_rtw_memcmp(WMM_OUI, oui, 4)) ||
-		 (_rtw_memcmp(P2P_OUI, oui, 4)))
+	else if ((!memcmp(RTW_WPA_OUI, oui, 4)) ||
+		 (!memcmp(WMM_OUI, oui, 4)) ||
+		 (!memcmp(P2P_OUI, oui, 4)))
 		return;
 	else
 		DBG_8192D("unknown OUI type!\n");
--- a/drivers/staging/rtl8192du/core/rtw_ieee80211.c
+++ b/drivers/staging/rtl8192du/core/rtw_ieee80211.c
@@ -258,7 +258,7 @@ u8 *rtw_get_ie_ex(u8 *in_ie, uint in_len
 	cnt = 0;
 	while (cnt < in_len) {
 		if (eid == in_ie[cnt] &&
-		    (!oui || _rtw_memcmp(&in_ie[cnt+2], oui, oui_len) == true)) {
+		    (!oui || !memcmp(&in_ie[cnt+2], oui, oui_len))) {
 			target_ie = &in_ie[cnt];
 			if (ie)
 				memcpy(ie, &in_ie[cnt], in_ie[cnt+1]+2);
@@ -441,7 +441,7 @@ unsigned char *rtw_get_wpa_ie(unsigned c
 
 		if (pbuf) {
 			/* check if oui matches... */
-			if (_rtw_memcmp((pbuf + 2), wpa_oui_type, sizeof(wpa_oui_type)) == false)
+			if (memcmp((pbuf + 2), wpa_oui_type, sizeof(wpa_oui_type)))
 				goto check_next_ie;
 
 			/* check version... */
@@ -481,15 +481,15 @@ unsigned char *rtw_get_wpa2_ie(unsigned
 
 int rtw_get_wpa_cipher_suite(u8 *s)
 {
-	if (_rtw_memcmp(s, WPA_CIPHER_SUITE_NONE, WPA_SELECTOR_LEN) == true)
+	if (!memcmp(s, WPA_CIPHER_SUITE_NONE, WPA_SELECTOR_LEN))
 		return WPA_CIPHER_NONE;
-	if (_rtw_memcmp(s, WPA_CIPHER_SUITE_WEP40, WPA_SELECTOR_LEN) == true)
+	if (!memcmp(s, WPA_CIPHER_SUITE_WEP40, WPA_SELECTOR_LEN))
 		return WPA_CIPHER_WEP40;
-	if (_rtw_memcmp(s, WPA_CIPHER_SUITE_TKIP, WPA_SELECTOR_LEN) == true)
+	if (!memcmp(s, WPA_CIPHER_SUITE_TKIP, WPA_SELECTOR_LEN))
 		return WPA_CIPHER_TKIP;
-	if (_rtw_memcmp(s, WPA_CIPHER_SUITE_CCMP, WPA_SELECTOR_LEN) == true)
+	if (!memcmp(s, WPA_CIPHER_SUITE_CCMP, WPA_SELECTOR_LEN))
 		return WPA_CIPHER_CCMP;
-	if (_rtw_memcmp(s, WPA_CIPHER_SUITE_WEP104, WPA_SELECTOR_LEN) == true)
+	if (!memcmp(s, WPA_CIPHER_SUITE_WEP104, WPA_SELECTOR_LEN))
 		return WPA_CIPHER_WEP104;
 
 	return 0;
@@ -497,15 +497,15 @@ int rtw_get_wpa_cipher_suite(u8 *s)
 
 int rtw_get_wpa2_cipher_suite(u8 *s)
 {
-	if (_rtw_memcmp(s, RSN_CIPHER_SUITE_NONE, RSN_SELECTOR_LEN) == true)
+	if (!memcmp(s, RSN_CIPHER_SUITE_NONE, RSN_SELECTOR_LEN))
 		return WPA_CIPHER_NONE;
-	if (_rtw_memcmp(s, RSN_CIPHER_SUITE_WEP40, RSN_SELECTOR_LEN) == true)
+	if (!memcmp(s, RSN_CIPHER_SUITE_WEP40, RSN_SELECTOR_LEN))
 		return WPA_CIPHER_WEP40;
-	if (_rtw_memcmp(s, RSN_CIPHER_SUITE_TKIP, RSN_SELECTOR_LEN) == true)
+	if (!memcmp(s, RSN_CIPHER_SUITE_TKIP, RSN_SELECTOR_LEN))
 		return WPA_CIPHER_TKIP;
-	if (_rtw_memcmp(s, RSN_CIPHER_SUITE_CCMP, RSN_SELECTOR_LEN) == true)
+	if (!memcmp(s, RSN_CIPHER_SUITE_CCMP, RSN_SELECTOR_LEN))
 		return WPA_CIPHER_CCMP;
-	if (_rtw_memcmp(s, RSN_CIPHER_SUITE_WEP104, RSN_SELECTOR_LEN) == true)
+	if (!memcmp(s, RSN_CIPHER_SUITE_WEP104, RSN_SELECTOR_LEN))
 		return WPA_CIPHER_WEP104;
 
 	return 0;
@@ -523,7 +523,7 @@ int rtw_parse_wpa_ie(u8 *wpa_ie, int wpa
 	}
 
 	if ((*wpa_ie != _WPA_IE_ID_) || (*(wpa_ie+1) != (u8)(wpa_ie_len - 2)) ||
-	    (_rtw_memcmp(wpa_ie+2, RTW_WPA_OUI_TYPE, WPA_SELECTOR_LEN) != true))
+	    (memcmp(wpa_ie+2, RTW_WPA_OUI_TYPE, WPA_SELECTOR_LEN)))
 		return _FAIL;
 
 	pos = wpa_ie;
@@ -646,7 +646,7 @@ int rtw_get_sec_ie(u8 *in_ie, uint in_le
 		authmode = in_ie[cnt];
 
 		if ((authmode == _WPA_IE_ID_) &&
-		    (_rtw_memcmp(&in_ie[cnt+2], &wpa_oui[0], 4) == true)) {
+		    (!memcmp(&in_ie[cnt+2], &wpa_oui[0], 4))) {
 				RT_TRACE(_module_rtl871x_mlme_c_, _drv_info_,
 					 ("\n rtw_get_wpa_ie: in_ie[cnt+1]+2 =%d\n",
 					 in_ie[cnt+1]+2));
@@ -702,7 +702,7 @@ u8 rtw_is_wps_ie(u8 *ie_ptr, uint *wps_i
 
 	eid = ie_ptr[0];
 
-	if ((eid == _WPA_IE_ID_) && (_rtw_memcmp(&ie_ptr[2], wps_oui, 4) == true)) {
+	if ((eid == _WPA_IE_ID_) && (!memcmp(&ie_ptr[2], wps_oui, 4))) {
 		*wps_ielen = ie_ptr[1]+2;
 		match = true;
 	}
@@ -736,7 +736,7 @@ u8 *rtw_get_wps_ie(u8 *in_ie, uint in_le
 		eid = in_ie[cnt];
 
 		if ((eid == _WPA_IE_ID_) &&
-		    (_rtw_memcmp(&in_ie[cnt+2], wps_oui, 4) == true)) {
+		    (!memcmp(&in_ie[cnt+2], wps_oui, 4))) {
 			wpsie_ptr = &in_ie[cnt];
 			if (wps_ie)
 				memcpy(wps_ie, &in_ie[cnt], in_ie[cnt+1]+2);
@@ -771,7 +771,7 @@ u8 *rtw_get_wps_attr(u8 *wps_ie, uint wp
 		*len_attr = 0;
 
 	if ((wps_ie[0] != _VENDOR_SPECIFIC_IE_) ||
-	    (_rtw_memcmp(wps_ie + 2, wps_oui, 4) != true))
+	    (memcmp(wps_ie + 2, wps_oui, 4)))
 		return attr_ptr;
 
 	/*  6 = 1(Element ID) + 1(Length) + 4(WPS OUI) */
@@ -1201,7 +1201,7 @@ u8 *rtw_get_p2p_ie(u8 *in_ie, int in_len
 			return NULL;
 		}
 		if ((eid == _VENDOR_SPECIFIC_IE_) &&
-		    (_rtw_memcmp(&in_ie[cnt+2], p2p_oui, 4) == true)) {
+		    (!memcmp(&in_ie[cnt+2], p2p_oui, 4))) {
 			p2p_ie_ptr = in_ie + cnt;
 
 			if (p2p_ie != NULL)
@@ -1240,7 +1240,7 @@ u8 *rtw_get_p2p_attr(u8 *p2p_ie, uint p2
 		*len_attr = 0;
 
 	if (!p2p_ie || (p2p_ie[0] != _VENDOR_SPECIFIC_IE_) ||
-	    (_rtw_memcmp(p2p_ie + 2, p2p_oui, 4) != true))
+	    (memcmp(p2p_ie + 2, p2p_oui, 4)))
 		return attr_ptr;
 
 	/*  6 = 1(Element ID) + 1(Length) + 3 (OUI) + 1(OUI Type) */
--- a/drivers/staging/rtl8192du/core/rtw_ioctl_set.c
+++ b/drivers/staging/rtl8192du/core/rtw_ioctl_set.c
@@ -186,7 +186,7 @@ u8 rtw_set_802_11_bssid(struct rtw_adapt
 	if (check_fwstate(pmlmepriv, _FW_LINKED|WIFI_ADHOC_MASTER_STATE) == true) {
 		RT_TRACE(_module_rtl871x_ioctl_set_c_, _drv_info_, ("set_bssid: _FW_LINKED||WIFI_ADHOC_MASTER_STATE\n"));
 
-		if (_rtw_memcmp(&pmlmepriv->cur_network.network.MacAddress, bssid, ETH_ALEN) == true) {
+		if (!memcmp(&pmlmepriv->cur_network.network.MacAddress, bssid, ETH_ALEN)) {
 			if (check_fwstate(pmlmepriv, WIFI_STATION_STATE) == false)
 				goto release_mlme_lock;/* it means driver is in WIFI_ADHOC_MASTER_STATE, we needn't create bss again. */
 		} else {
@@ -273,7 +273,7 @@ u8 rtw_set_802_11_ssid(struct rtw_adapte
 			 ("set_ssid: _FW_LINKED||WIFI_ADHOC_MASTER_STATE\n"));
 
 		if ((pmlmepriv->assoc_ssid.SsidLength == ssid->SsidLength) &&
-		    (_rtw_memcmp(&pmlmepriv->assoc_ssid.Ssid, ssid->Ssid, ssid->SsidLength) == true)) {
+		    (!memcmp(&pmlmepriv->assoc_ssid.Ssid, ssid->Ssid, ssid->SsidLength))) {
 			if ((check_fwstate(pmlmepriv, WIFI_STATION_STATE) == false)) {
 				RT_TRACE(_module_rtl871x_ioctl_set_c_, _drv_err_,
 					 ("Set SSID is the same ssid, fw_state= 0x%08x\n",
--- a/drivers/staging/rtl8192du/core/rtw_mlme.c
+++ b/drivers/staging/rtl8192du/core/rtw_mlme.c
@@ -279,7 +279,7 @@ struct wlan_network *_rtw_find_network(s
 	struct wlan_network *pnetwork = NULL;
 	u8 zero_addr[ETH_ALEN] = { 0, 0, 0, 0, 0, 0 };
 
-	if (_rtw_memcmp(zero_addr, addr, ETH_ALEN)) {
+	if (!memcmp(zero_addr, addr, ETH_ALEN)) {
 		pnetwork = NULL;
 		goto exit;
 	}
@@ -292,8 +292,7 @@ struct wlan_network *_rtw_find_network(s
 	while (plist != phead) {
 		pnetwork = container_of(plist, struct wlan_network, list);
 
-		if (_rtw_memcmp(addr, pnetwork->network.MacAddress, ETH_ALEN) ==
-		    true)
+		if (!memcmp(addr, pnetwork->network.MacAddress, ETH_ALEN))
 			break;
 
 		plist = plist->next;
@@ -495,8 +494,7 @@ static inline int is_same_ess(struct wla
 	/* RT_TRACE(_module_rtl871x_mlme_c_,_drv_err_,("(%s,%d)(%s,%d)\n", */
 	/*              a->Ssid.Ssid,a->Ssid.SsidLength,b->Ssid.Ssid,b->Ssid.SsidLength)); */
 	return (a->Ssid.SsidLength == b->Ssid.SsidLength) &&
-		_rtw_memcmp(a->Ssid.Ssid, b->Ssid.Ssid,
-			    a->Ssid.SsidLength) == true;
+		!memcmp(a->Ssid.Ssid, b->Ssid.Ssid, a->Ssid.SsidLength);
 }
 
 int is_same_network(struct wlan_bssid_ex *src, struct wlan_bssid_ex *dst)
@@ -512,10 +510,8 @@ int is_same_network(struct wlan_bssid_ex
 
 	return ((src->Ssid.SsidLength == dst->Ssid.SsidLength) &&
 		/*      (src->Configuration.DSConfig == dst->Configuration.DSConfig) && */
-		((_rtw_memcmp(src->MacAddress, dst->MacAddress, ETH_ALEN)) == true) &&
-		((_rtw_memcmp
-		  (src->Ssid.Ssid, dst->Ssid.Ssid,
-		   src->Ssid.SsidLength)) == true) &&
+		((!memcmp(src->MacAddress, dst->MacAddress, ETH_ALEN))) &&
+		((!memcmp (src->Ssid.Ssid, dst->Ssid.Ssid, src->Ssid.SsidLength))) &&
 		   ((s_cap & WLAN_CAPABILITY_IBSS) ==
 		    (d_cap & WLAN_CAPABILITY_IBSS)) &&
 		   ((s_cap & WLAN_CAPABILITY_BSS) ==
@@ -836,7 +832,7 @@ void rtw_survey_event_callback(struct rt
 
 	/*  update IBSS_network 's timestamp */
 	if ((check_fwstate(pmlmepriv, WIFI_ADHOC_MASTER_STATE)) == true) {
-		if (_rtw_memcmp
+		if (!memcmp
 		    (&(pmlmepriv->cur_network.network.MacAddress),
 		     pnetwork->MacAddress, ETH_ALEN)) {
 			struct wlan_network *ibss_wlan = NULL;
@@ -1377,7 +1373,7 @@ void rtw_joinbss_event_prehandle(struct
 	}
 
 	the_same_macaddr =
-	    _rtw_memcmp(pnetwork->network.MacAddress,
+	    !memcmp(pnetwork->network.MacAddress,
 			cur_network->network.MacAddress, ETH_ALEN);
 
 	pnetwork->network.Length = get_wlan_bssid_ex_sz(&pnetwork->network);
@@ -1956,9 +1952,9 @@ static int rtw_check_join_candidate(stru
 
 	/* check bssid, if needed */
 	if (pmlmepriv->assoc_by_bssid == true) {
-		if (_rtw_memcmp
+		if (memcmp
 		    (competitor->network.MacAddress, pmlmepriv->assoc_bssid,
-		     ETH_ALEN) == false)
+		     ETH_ALEN))
 			goto exit;
 	}
 
@@ -1966,9 +1962,9 @@ static int rtw_check_join_candidate(stru
 	if (pmlmepriv->assoc_ssid.Ssid && pmlmepriv->assoc_ssid.SsidLength) {
 		if (competitor->network.Ssid.SsidLength !=
 		    pmlmepriv->assoc_ssid.SsidLength ||
-		    _rtw_memcmp(competitor->network.Ssid.Ssid,
+		    memcmp(competitor->network.Ssid.Ssid,
 				   pmlmepriv->assoc_ssid.Ssid,
-				   pmlmepriv->assoc_ssid.SsidLength) == false)
+				   pmlmepriv->assoc_ssid.SsidLength))
 			goto exit;
 	}
 
@@ -2259,9 +2255,8 @@ static int SecIsInPMKIDList(struct rtw_a
 
 	do {
 		if ((psecuritypriv->PMKIDList[i].bUsed) &&
-		    (_rtw_memcmp
-		     (psecuritypriv->PMKIDList[i].Bssid, bssid,
-		      ETH_ALEN) == true)) {
+		    (!memcmp(psecuritypriv->PMKIDList[i].Bssid, bssid,
+			     ETH_ALEN))) {
 			break;
 		} else {
 			i++;
--- a/drivers/staging/rtl8192du/core/rtw_mlme_ext.c
+++ b/drivers/staging/rtl8192du/core/rtw_mlme_ext.c
@@ -543,8 +543,8 @@ static void _mgt_dispatcher(struct rtw_a
 
 	if (ptable->func) {
 		/* receive the frames that ra(a1) is my address or ra(a1) is bc address. */
-		if (!_rtw_memcmp(GetAddr1Ptr(pframe), myid(&adapt->eeprompriv), ETH_ALEN) &&
-		    !_rtw_memcmp(GetAddr1Ptr(pframe), bc_addr, ETH_ALEN))
+		if (!!memcmp(GetAddr1Ptr(pframe), myid(&adapt->eeprompriv), ETH_ALEN) &&
+		    !!memcmp(GetAddr1Ptr(pframe), bc_addr, ETH_ALEN))
 			return;
 		ptable->func(adapt, precv_frame);
 	}
@@ -574,8 +574,8 @@ void mgt_dispatcher(struct rtw_adapter *
 	}
 
 	/* receive the frames that ra(a1) is my address or ra(a1) is bc address. */
-	if (!_rtw_memcmp(GetAddr1Ptr(pframe), myid(&adapt->eeprompriv), ETH_ALEN) &&
-	    !_rtw_memcmp(GetAddr1Ptr(pframe), bc_addr, ETH_ALEN)) {
+	if (!!memcmp(GetAddr1Ptr(pframe), myid(&adapt->eeprompriv), ETH_ALEN) &&
+	    !!memcmp(GetAddr1Ptr(pframe), bc_addr, ETH_ALEN)) {
 		return;
 	}
 
@@ -750,7 +750,7 @@ _continue:
 		}
 
 		if ((ielen != 0 &&
-		    false == _rtw_memcmp((void *)(p + 2),
+		    memcmp((void *)(p + 2),
 					 (void *)cur->Ssid.Ssid,
 					 cur->Ssid.SsidLength)) ||
 		    (ielen == 0 && pmlmeinfo->hidden_ssid_mode)
@@ -783,8 +783,8 @@ unsigned int OnProbeRsp(struct rtw_adapt
 
 #ifdef CONFIG_P2P
 	if (rtw_p2p_chk_state(pwdinfo, P2P_STATE_TX_PROVISION_DIS_REQ)) {
-		if (true == pwdinfo->tx_prov_disc_info.benable) {
-			if (_rtw_memcmp
+		if (pwdinfo->tx_prov_disc_info.benable) {
+			if (!memcmp
 			    (pwdinfo->tx_prov_disc_info.peerIFAddr,
 			     GetAddr2Ptr(pframe), ETH_ALEN)) {
 				if (rtw_p2p_chk_role(pwdinfo, P2P_ROLE_CLIENT)) {
@@ -817,7 +817,7 @@ unsigned int OnProbeRsp(struct rtw_adapt
 	} else if (rtw_p2p_chk_state(pwdinfo, P2P_STATE_GONEGO_ING)) {
 		if (true == pwdinfo->nego_req_info.benable) {
 			DBG_8192D("[%s] P2P State is GONEGO ING!\n", __func__);
-			if (_rtw_memcmp
+			if (!memcmp
 			    (pwdinfo->nego_req_info.peerDevAddr,
 			     GetAddr2Ptr(pframe), ETH_ALEN)) {
 				pwdinfo->nego_req_info.benable = false;
@@ -829,7 +829,7 @@ unsigned int OnProbeRsp(struct rtw_adapt
 	} else if (rtw_p2p_chk_state(pwdinfo, P2P_STATE_TX_INVITE_REQ)) {
 		if (true == pwdinfo->invitereq_info.benable) {
 			DBG_8192D("[%s] P2P_STATE_TX_INVITE_REQ!\n", __func__);
-			if (_rtw_memcmp
+			if (!memcmp
 			    (pwdinfo->invitereq_info.peer_macaddr,
 			     GetAddr2Ptr(pframe), ETH_ALEN)) {
 				pwdinfo->invitereq_info.benable = false;
@@ -880,7 +880,7 @@ unsigned int OnBeacon(struct rtw_adapter
 		return _SUCCESS;
 	}
 
-	if (_rtw_memcmp
+	if (!memcmp
 	    (GetAddr3Ptr(pframe), get_my_bssid(&pmlmeinfo->network),
 	     ETH_ALEN)) {
 		if (pmlmeinfo->state & WIFI_FW_AUTH_NULL) {
@@ -1097,7 +1097,7 @@ unsigned int OnAuth(struct rtw_adapter *
 				goto auth_fail;
 			}
 
-			if (_rtw_memcmp((void *)(p + 2), pstat->chg_txt, 128)) {
+			if (!memcmp((void *)(p + 2), pstat->chg_txt, 128)) {
 				pstat->state &= (~WIFI_FW_AUTH_STATE);
 				pstat->state |= WIFI_FW_AUTH_SUCCESS;
 				/*  challenging txt is correct... */
@@ -1157,7 +1157,7 @@ unsigned int OnAuthClient(struct rtw_ada
 	DBG_8192D("%s\n", __func__);
 
 	/* check A1 matches or not */
-	if (!_rtw_memcmp
+	if (!!memcmp
 	    (myid(&(adapt->eeprompriv)), get_da(pframe), ETH_ALEN))
 		return _SUCCESS;
 
@@ -1335,7 +1335,7 @@ unsigned int OnAssocReq(struct rtw_adapt
 		status = _STATS_FAILURE_;
 	else {
 		/*  check if ssid match */
-		if (!_rtw_memcmp
+		if (!!memcmp
 		    ((void *)(p + 2), cur->Ssid.Ssid, cur->Ssid.SsidLength))
 			status = _STATS_FAILURE_;
 
@@ -1538,7 +1538,7 @@ unsigned int OnAssocReq(struct rtw_adapt
 			p = rtw_get_ie(p, _VENDOR_SPECIFIC_IE_, &ie_len,
 				       pkt_len - WLAN_HDR_A3_LEN - ie_offset);
 			if (p != NULL) {
-				if (_rtw_memcmp(p + 2, WMM_IE, 6)) {
+				if (!memcmp(p + 2, WMM_IE, 6)) {
 					pstat->flags |= WLAN_STA_WME;
 
 					pstat->qos_option = 1;
@@ -1753,7 +1753,7 @@ unsigned int OnAssocRsp(struct rtw_adapt
 	DBG_8192D("%s\n", __func__);
 
 	/* check A1 matches or not */
-	if (!_rtw_memcmp
+	if (!!memcmp
 	    (myid(&(adapt->eeprompriv)), get_da(pframe), ETH_ALEN))
 		return _SUCCESS;
 
@@ -1795,7 +1795,7 @@ unsigned int OnAssocRsp(struct rtw_adapt
 
 		switch (pIE->ElementID) {
 		case _VENDOR_SPECIFIC_IE_:
-			if (_rtw_memcmp(pIE->data, WMM_PARA_OUI, 6)) {	/* WMM */
+			if (!memcmp(pIE->data, WMM_PARA_OUI, 6)) {	/* WMM */
 				WMM_param_handler(adapt, pIE);
 			}
 			break;
@@ -1850,7 +1850,7 @@ unsigned int OnDeAuth(struct rtw_adapter
 
 	/* check A3 */
 	if (!
-	    (_rtw_memcmp
+	    (!memcmp
 	     (GetAddr3Ptr(pframe), get_my_bssid(&pmlmeinfo->network),
 	      ETH_ALEN)))
 		return _SUCCESS;
@@ -1915,7 +1915,7 @@ unsigned int OnDisassoc(struct rtw_adapt
 
 	/* check A3 */
 	if (!
-	    (_rtw_memcmp
+	    (!memcmp
 	     (GetAddr3Ptr(pframe), get_my_bssid(&pmlmeinfo->network),
 	      ETH_ALEN)))
 		return _SUCCESS;
@@ -2070,7 +2070,7 @@ unsigned int OnAction_back(struct rtw_ad
 	struct sta_priv *pstapriv = &adapt->stapriv;
 
 	/* check RA matches or not */
-	if (!_rtw_memcmp(myid(&(adapt->eeprompriv)), GetAddr1Ptr(pframe), ETH_ALEN))	/* for if1, sta/ap mode */
+	if (!!memcmp(myid(&(adapt->eeprompriv)), GetAddr1Ptr(pframe), ETH_ALEN))	/* for if1, sta/ap mode */
 		return _SUCCESS;
 
 	DBG_8192D("%s\n", __func__);
@@ -2730,7 +2730,7 @@ static void issue_p2p_GO_response(struct
 	/*      Commented by Kurt 20120113 */
 	/*      If some device wants to do p2p handshake without sending prov_disc_req */
 	/*      We have to get peer_req_cm from here. */
-	if (_rtw_memcmp
+	if (!memcmp
 	    (pwdinfo->rx_prov_disc_info.strconfig_method_desc_of_prov_disc_req,
 	     "000", 3)) {
 		if (wps_devicepassword_id == WPS_DPID_USER_SPEC) {
@@ -3412,7 +3412,7 @@ void issue_p2p_invitation_request(struct
 	/*      Channel Number */
 	p2pie[p2pielen++] = pwdinfo->invitereq_info.operating_ch;	/*      operating channel number */
 
-	if (_rtw_memcmp
+	if (!memcmp
 	    (myid(&adapt->eeprompriv), pwdinfo->invitereq_info.go_bssid,
 	     ETH_ALEN)) {
 		/*      P2P Group BSSID */
@@ -4015,7 +4015,7 @@ static u8 is_matched_in_profilelist(u8 *
 		     __func__, profileinfo->peermac[0], profileinfo->peermac[1],
 		     profileinfo->peermac[2], profileinfo->peermac[3],
 		     profileinfo->peermac[4], profileinfo->peermac[5]);
-		if (_rtw_memcmp(peermacaddr, profileinfo->peermac, ETH_ALEN)) {
+		if (!memcmp(peermacaddr, profileinfo->peermac, ETH_ALEN)) {
 			match_result = 1;
 			DBG_8192D("[%s] Match!\n", __func__);
 			break;
@@ -4824,7 +4824,7 @@ static unsigned int on_action_public_p2p
 			/*      Commented by Kurt 20120113 */
 			/*      Get peer_dev_addr here if peer doesn't issue prov_disc frame. */
 /* XXXXXXXX */
-			if (_rtw_memcmp(pwdinfo->rx_prov_disc_info.peerDevAddr, empty_addr, ETH_ALEN))
+			if (!memcmp(pwdinfo->rx_prov_disc_info.peerDevAddr, empty_addr, ETH_ALEN))
 				memcpy(pwdinfo->rx_prov_disc_info.peerDevAddr,
 			GetAddr2Ptr(pframe), ETH_ALEN);
 
@@ -4985,7 +4985,7 @@ static unsigned int on_action_public_p2p
 						     (u8 *)&group_id,
 						     &attr_contentlen);
 						if (attr_contentlen) {
-							if (_rtw_memcmp(group_id.go_device_addr, myid
+							if (!memcmp(group_id.go_device_addr, myid
 							     (&adapt->eeprompriv), ETH_ALEN)) {
 								/* The p2p device sending this p2p invitation
 								 * request wants this Wi-Fi device to be the
@@ -5089,7 +5089,7 @@ static unsigned int on_action_public_p2p
 						     (u8 *)&group_id,
 						     &attr_contentlen);
 						if (attr_contentlen) {
-							if (_rtw_memcmp(group_id.go_device_addr,
+							if (!memcmp(group_id.go_device_addr,
 							    myid (&adapt->eeprompriv), ETH_ALEN)) {
 								/*      In this case, the GO can't be myself. */
 								rtw_p2p_set_state
@@ -5178,7 +5178,7 @@ static unsigned int on_action_public_p2p
 
 						if (attr_content ==
 						    P2P_STATUS_SUCCESS) {
-							if (_rtw_memcmp
+							if (!memcmp
 							    (pwdinfo->
 							     invitereq_info.
 							     go_bssid,
@@ -5283,7 +5283,7 @@ static unsigned int on_action_public_ven
 	uint frame_len = precv_frame->len;
 	u8 *frame_body = pframe + sizeof(struct ieee80211_hdr_3addr);
 
-	if (_rtw_memcmp(frame_body + 2, P2P_OUI, 4) == true) {
+	if (!memcmp(frame_body + 2, P2P_OUI, 4)) {
 		ret = on_action_public_p2p(precv_frame);
 	}
 
@@ -5326,7 +5326,7 @@ unsigned int on_action_public(struct rtw
 	u8 category, action;
 
 	/* check RA matches or not */
-	if (!_rtw_memcmp
+	if (!!memcmp
 	    (myid(&(adapt->eeprompriv)), GetAddr1Ptr(pframe), ETH_ALEN))
 		goto exit;
 
@@ -5373,7 +5373,7 @@ unsigned int OnAction_p2p(struct rtw_ada
 	DBG_8192D("%s\n", __func__);
 
 	/* check RA matches or not */
-	if (!_rtw_memcmp(myid(&(adapt->eeprompriv)), GetAddr1Ptr(pframe), ETH_ALEN))	/* for if1, sta/ap mode */
+	if (!!memcmp(myid(&(adapt->eeprompriv)), GetAddr1Ptr(pframe), ETH_ALEN))	/* for if1, sta/ap mode */
 		return _SUCCESS;
 
 	frame_body =
@@ -6622,7 +6622,7 @@ void issue_asocrsp(struct rtw_adapter *a
 			    rtw_get_ie(pbuf, _VENDOR_SPECIFIC_IE_, &ie_len,
 				       (pnetwork->IELength -
 					_BEACON_IE_OFFSET_ - (ie_len + 2)));
-			if (pbuf && _rtw_memcmp(pbuf + 2, WMM_PARA_IE, 6)) {
+			if (pbuf && !memcmp(pbuf + 2, WMM_PARA_IE, 6)) {
 				memcpy(pframe, pbuf, ie_len + 2);
 				pframe += (ie_len + 2);
 				pattrib->pktlen += (ie_len + 2);
@@ -6923,14 +6923,14 @@ void issue_assocreq(struct rtw_adapter *
 
 		switch (pIE->ElementID) {
 		case _VENDOR_SPECIFIC_IE_:
-			if ((_rtw_memcmp(pIE->data, RTW_WPA_OUI, 4)) ||
-			    (_rtw_memcmp(pIE->data, WMM_OUI, 4)) ||
-			    (_rtw_memcmp(pIE->data, WPS_OUI, 4))) {
+			if ((!memcmp(pIE->data, RTW_WPA_OUI, 4)) ||
+			    (!memcmp(pIE->data, WMM_OUI, 4)) ||
+			    (!memcmp(pIE->data, WPS_OUI, 4))) {
 				if (!adapt->registrypriv.wifi_spec) {
 					/* Commented by Kurt 20110629 */
 					/* In some older APs, WPS handshake */
 					/* would be fail if we append vendor extensions informations to AP */
-					if (_rtw_memcmp(pIE->data, WPS_OUI, 4)) {
+					if (!memcmp(pIE->data, WPS_OUI, 4)) {
 						pIE->Length = 14;
 					}
 				}
@@ -8659,7 +8659,7 @@ unsigned int receive_disconnect(struct r
 
 	/* check A3 */
 	if (!
-	    (_rtw_memcmp(MacAddr, get_my_bssid(&pmlmeinfo->network), ETH_ALEN)))
+	    (!memcmp(MacAddr, get_my_bssid(&pmlmeinfo->network), ETH_ALEN)))
 		return _SUCCESS;
 
 	DBG_8192D("%s\n", __func__);
@@ -9949,7 +9949,7 @@ u8 join_cmd_hdl(struct rtw_adapter *adap
 
 		switch (pIE->ElementID) {
 		case _VENDOR_SPECIFIC_IE_:	/* Get WMM IE. */
-			if (_rtw_memcmp(pIE->data, WMM_OUI, 4)) {
+			if (!memcmp(pIE->data, WMM_OUI, 4)) {
 				pmlmeinfo->WMM_enable = 1;
 			}
 			break;
--- a/drivers/staging/rtl8192du/core/rtw_p2p.c
+++ b/drivers/staging/rtl8192du/core/rtw_p2p.c
@@ -806,7 +806,7 @@ u32 process_probe_req_p2p_ie(struct wifi
 	if (rtw_p2p_chk_role(pwdinfo, P2P_ROLE_DEVICE) || rtw_p2p_chk_role(pwdinfo, P2P_ROLE_GO)) {
 		p2pie = rtw_get_p2p_ie(pframe + WLAN_HDR_A3_LEN + _PROBEREQ_IE_OFFSET_, len - WLAN_HDR_A3_LEN - _PROBEREQ_IE_OFFSET_, NULL, &p2pielen);
 		if (p2pie) {
-			if ((p != NULL) && _rtw_memcmp((void *)(p+2), (void *)pwdinfo->p2p_wildcard_ssid, 7)) {
+			if ((p != NULL) && !memcmp((void *)(p+2), (void *)pwdinfo->p2p_wildcard_ssid, 7)) {
 				/* todo: */
 				/* Check Requested Device Type attributes in WSC IE. */
 				/* Check Device ID attribute in P2P IE */
@@ -943,8 +943,8 @@ u32 process_p2p_devdisc_req(struct wifid
 		u32	attr_contentlen = 0;
 
 		if (rtw_get_p2p_attr_content(p2p_ie, p2p_ielen, P2P_ATTR_GROUP_ID, groupid, &attr_contentlen)) {
-			if (_rtw_memcmp(pwdinfo->device_addr, groupid, ETH_ALEN) &&
-			    _rtw_memcmp(pwdinfo->p2p_group_ssid, groupid+ETH_ALEN, pwdinfo->p2p_group_ssid_len)) {
+			if (!memcmp(pwdinfo->device_addr, groupid, ETH_ALEN) &&
+			    !memcmp(pwdinfo->p2p_group_ssid, groupid+ETH_ALEN, pwdinfo->p2p_group_ssid_len)) {
 				attr_contentlen = 0;
 				if (rtw_get_p2p_attr_content(p2p_ie, p2p_ielen, P2P_ATTR_DEVICE_ID, dev_addr, &attr_contentlen)) {
 					struct list_head *phead, *plist;
@@ -960,7 +960,7 @@ u32 process_p2p_devdisc_req(struct wifid
 						plist = plist->next;
 
 						if (psta->is_p2p_device && (psta->dev_cap&P2P_DEVCAP_CLIENT_DISCOVERABILITY) &&
-						    _rtw_memcmp(psta->dev_addr, dev_addr, ETH_ALEN)) {
+						    !memcmp(psta->dev_addr, dev_addr, ETH_ALEN)) {
 							issue_group_disc_req(pwdinfo, psta->hwaddr);
 							status = P2P_STATUS_SUCCESS;
 							break;
@@ -1094,7 +1094,7 @@ u8 process_p2p_group_negotation_req(stru
 		/*	Commented by Kurt 20120113 */
 		/*	If some device wants to do p2p handshake without sending prov_disc_req */
 		/*	We have to get peer_req_cm from here. */
-		if (_rtw_memcmp(pwdinfo->rx_prov_disc_info.strconfig_method_desc_of_prov_disc_req, "000", 3)) {
+		if (!memcmp(pwdinfo->rx_prov_disc_info.strconfig_method_desc_of_prov_disc_req, "000", 3)) {
 			rtw_get_wps_attr_content(wpsie, wps_ielen, WPS_ATTR_DEVICE_PWID, (u8 *)&be_tmp, &wps_devicepassword_id_len);
 			wps_devicepassword_id = be16_to_cpu(be_tmp);
 
@@ -1744,7 +1744,7 @@ int rtw_p2p_check_frames(struct rtw_adap
 	if (category == RTW_WLAN_CATEGORY_PUBLIC) {
 		action = frame_body[1];
 		if (action == ACT_PUBLIC_VENDOR &&
-		    _rtw_memcmp(frame_body+2, P2P_OUI, 4) == true) {
+		    !memcmp(frame_body+2, P2P_OUI, 4)) {
 			OUI_Subtype = frame_body[6];
 			dialogToken = frame_body[7];
 			is_p2p_frame = OUI_Subtype;
--- a/drivers/staging/rtl8192du/core/rtw_recv.c
+++ b/drivers/staging/rtl8192du/core/rtw_recv.c
@@ -853,21 +853,21 @@ static int sta2sta_data_frame(struct rtw
 	if ((check_fwstate(pmlmepriv, WIFI_ADHOC_STATE) == true) ||
 	    (check_fwstate(pmlmepriv, WIFI_ADHOC_MASTER_STATE) == true)) {
 		/*  filter packets that SA is myself or multicast or broadcast */
-		if (_rtw_memcmp(myhwaddr, pattrib->src, ETH_ALEN)) {
+		if (!memcmp(myhwaddr, pattrib->src, ETH_ALEN)) {
 			RT_TRACE(_module_rtl871x_recv_c_, _drv_err_,
 				 (" SA==myself\n"));
 			ret = _FAIL;
 			goto exit;
 		}
 
-		if ((!_rtw_memcmp(myhwaddr, pattrib->dst, ETH_ALEN)) && (!bmcast)) {
+		if ((!!memcmp(myhwaddr, pattrib->dst, ETH_ALEN)) && (!bmcast)) {
 			ret = _FAIL;
 			goto exit;
 		}
 
-		if (_rtw_memcmp(pattrib->bssid, "\x0\x0\x0\x0\x0\x0", ETH_ALEN) ||
-		    _rtw_memcmp(mybssid, "\x0\x0\x0\x0\x0\x0", ETH_ALEN) ||
-		    (!_rtw_memcmp(pattrib->bssid, mybssid, ETH_ALEN))) {
+		if (!memcmp(pattrib->bssid, "\x0\x0\x0\x0\x0\x0", ETH_ALEN) ||
+		    !memcmp(mybssid, "\x0\x0\x0\x0\x0\x0", ETH_ALEN) ||
+		    (!!memcmp(pattrib->bssid, mybssid, ETH_ALEN))) {
 			ret = _FAIL;
 			goto exit;
 		}
@@ -876,7 +876,7 @@ static int sta2sta_data_frame(struct rtw
 
 	} else if (check_fwstate(pmlmepriv, WIFI_STATION_STATE) == true) {
 		/*  For Station mode, sa and bssid should always be BSSID, and DA is my mac-address */
-		if (!_rtw_memcmp
+		if (!!memcmp
 		    (pattrib->bssid, pattrib->src, ETH_ALEN)) {
 			RT_TRACE(_module_rtl871x_recv_c_, _drv_err_,
 				 ("bssid != TA under STATION_MODE; drop pkt\n"));
@@ -895,7 +895,7 @@ static int sta2sta_data_frame(struct rtw
 		} else {	/*  not mc-frame */
 
 			/*  For AP mode, if DA is non-MCAST, then it must be BSSID, and bssid == BSSID */
-			if (!_rtw_memcmp
+			if (!!memcmp
 			    (pattrib->bssid, pattrib->dst, ETH_ALEN)) {
 				ret = _FAIL;
 				goto exit;
@@ -949,7 +949,7 @@ static int ap2sta_data_frame(struct rtw_
 	    (check_fwstate(pmlmepriv, _FW_LINKED) == true ||
 	    check_fwstate(pmlmepriv, _FW_UNDER_LINKING) == true)) {
 		/*  filter packets that SA is myself or multicast or broadcast */
-		if (_rtw_memcmp(myhwaddr, pattrib->src, ETH_ALEN)) {
+		if (!memcmp(myhwaddr, pattrib->src, ETH_ALEN)) {
 			RT_TRACE(_module_rtl871x_recv_c_, _drv_err_,
 				 (" SA==myself\n"));
 			ret = _FAIL;
@@ -957,7 +957,7 @@ static int ap2sta_data_frame(struct rtw_
 		}
 
 		/*  da should be for me */
-		if ((!_rtw_memcmp(myhwaddr, pattrib->dst, ETH_ALEN)) && (!bmcast)) {
+		if ((!!memcmp(myhwaddr, pattrib->dst, ETH_ALEN)) && (!bmcast)) {
 			RT_TRACE(_module_rtl871x_recv_c_, _drv_info_,
 				 (" ap2sta_data_frame:  compare DA fail; DA=%pM\n",
 				  pattrib->dst));
@@ -966,9 +966,9 @@ static int ap2sta_data_frame(struct rtw_
 		}
 
 		/*  check BSSID */
-		if (_rtw_memcmp(pattrib->bssid, "\x0\x0\x0\x0\x0\x0", ETH_ALEN) ||
-		    _rtw_memcmp(mybssid, "\x0\x0\x0\x0\x0\x0", ETH_ALEN) ||
-		    (!_rtw_memcmp(pattrib->bssid, mybssid, ETH_ALEN))) {
+		if (!memcmp(pattrib->bssid, "\x0\x0\x0\x0\x0\x0", ETH_ALEN) ||
+		    !memcmp(mybssid, "\x0\x0\x0\x0\x0\x0", ETH_ALEN) ||
+		    (!!memcmp(pattrib->bssid, mybssid, ETH_ALEN))) {
 			RT_TRACE(_module_rtl871x_recv_c_, _drv_info_,
 				 (" ap2sta_data_frame:  compare BSSID fail ; BSSID=%pM\n",
 				  pattrib->bssid));
@@ -1029,7 +1029,7 @@ static int ap2sta_data_frame(struct rtw_
 		ret = RTW_RX_HANDLED;
 		goto exit;
 	} else {
-		if (_rtw_memcmp(myhwaddr, pattrib->dst, ETH_ALEN) && (!bmcast)) {
+		if (!memcmp(myhwaddr, pattrib->dst, ETH_ALEN) && (!bmcast)) {
 			*psta = rtw_get_stainfo(pstapriv, pattrib->bssid);	/*  get sta_info */
 			if (*psta == NULL) {
 				DBG_8192D
@@ -1061,7 +1061,7 @@ static int sta2ap_data_frame(struct rtw_
 
 	if (check_fwstate(pmlmepriv, WIFI_AP_STATE) == true) {
 		/* For AP mode, RA=BSSID, TX=STA(SRC_ADDR), A3=DST_ADDR */
-		if (!_rtw_memcmp(pattrib->bssid, mybssid, ETH_ALEN)) {
+		if (!!memcmp(pattrib->bssid, mybssid, ETH_ALEN)) {
 			ret = _FAIL;
 			goto exit;
 		}
@@ -1095,7 +1095,7 @@ static int sta2ap_data_frame(struct rtw_
 		}
 	} else {
 		u8 *myhwaddr = myid(&adapter->eeprompriv);
-		if (!_rtw_memcmp(pattrib->ra, myhwaddr, ETH_ALEN)) {
+		if (!!memcmp(pattrib->ra, myhwaddr, ETH_ALEN)) {
 			ret = RTW_RX_HANDLED;
 			goto exit;
 		}
@@ -1128,7 +1128,7 @@ static int validate_recv_ctrl_frame(stru
 	}
 
 	/* receive the frames that ra(a1) is my address */
-	if (!_rtw_memcmp
+	if (!!memcmp
 	    (GetAddr1Ptr(pframe), myid(&padapter->eeprompriv), ETH_ALEN))
 		return _FAIL;
 
@@ -1276,7 +1276,7 @@ static int validate_recv_mgnt_frame(stru
 			} else if (GetFrameSubType(precv_frame->rx_data) == WIFI_PROBEREQ) {
 				psta->sta_stats.rx_probereq_pkts++;
 			} else if (GetFrameSubType(precv_frame->rx_data) == WIFI_PROBERSP) {
-				if (_rtw_memcmp(padapter->eeprompriv.mac_addr, GetAddr1Ptr(precv_frame->rx_data), ETH_ALEN) == true)
+				if (!memcmp(padapter->eeprompriv.mac_addr, GetAddr1Ptr(precv_frame->rx_data), ETH_ALEN))
 					psta->sta_stats.rx_probersp_pkts++;
 				else if (is_broadcast_mac_addr(GetAddr1Ptr(precv_frame->rx_data)) ||
 					 is_multicast_mac_addr(GetAddr1Ptr(precv_frame->rx_data)))
@@ -1524,12 +1524,11 @@ static int wlanhdr_to_ethhdr(struct recv
 	psnap_type = ptr + pattrib->hdrlen + pattrib->iv_len + SNAP_SIZE;
 	/* convert hdr + possible LLC headers into Ethernet header */
 	/* eth_type = (psnap_type[0] << 8) | psnap_type[1]; */
-	if ((_rtw_memcmp(psnap, rtw_rfc1042_header, SNAP_SIZE) &&
-	     (_rtw_memcmp(psnap_type, SNAP_ETH_TYPE_IPX, 2) == false) &&
-	     (_rtw_memcmp(psnap_type, SNAP_ETH_TYPE_APPLETALK_AARP, 2) ==
-	      false)) ||
+	if ((!memcmp(psnap, rtw_rfc1042_header, SNAP_SIZE) &&
+	     memcmp(psnap_type, SNAP_ETH_TYPE_IPX, 2) &&
+	     memcmp(psnap_type, SNAP_ETH_TYPE_APPLETALK_AARP, 2)) ||
 	    /* eth_type != ETH_P_AARP && eth_type != ETH_P_IPX) || */
-	    _rtw_memcmp(psnap, rtw_bridge_tunnel_header, SNAP_SIZE)) {
+	    !memcmp(psnap, rtw_bridge_tunnel_header, SNAP_SIZE)) {
 		/* remove RFC1042 or Bridge-Tunnel encapsulation and replace EtherType */
 		bsnaphdr = true;
 	} else {
@@ -1863,9 +1862,9 @@ static int amsdu_to_msdu(struct rtw_adap
 		/* convert hdr + possible LLC headers into Ethernet header */
 		eth_type = RTW_GET_BE16(&sub_skb->data[6]);
 		if (sub_skb->len >= 8 &&
-		    ((_rtw_memcmp(sub_skb->data, rtw_rfc1042_header, SNAP_SIZE) &&
+		    ((!memcmp(sub_skb->data, rtw_rfc1042_header, SNAP_SIZE) &&
 		     eth_type != ETH_P_AARP && eth_type != ETH_P_IPX) ||
-		     _rtw_memcmp(sub_skb->data, rtw_bridge_tunnel_header, SNAP_SIZE))) {
+		     !memcmp(sub_skb->data, rtw_bridge_tunnel_header, SNAP_SIZE))) {
 			/* remove RFC1042 or Bridge-Tunnel encapsulation and replace EtherType */
 			skb_pull(sub_skb, SNAP_SIZE);
 			memcpy(skb_push(sub_skb, ETH_ALEN), pattrib->src,
--- a/drivers/staging/rtl8192du/core/rtw_sta_mgt.c
+++ b/drivers/staging/rtl8192du/core/rtw_sta_mgt.c
@@ -507,7 +507,7 @@ struct sta_info *rtw_get_stainfo(struct
 	while ((rtw_end_of_queue_search(phead, plist)) == false) {
 		psta = container_of(plist, struct sta_info, hash_list);
 
-		if (_rtw_memcmp(psta->hwaddr, addr, ETH_ALEN) == true) {
+		if (!memcmp(psta->hwaddr, addr, ETH_ALEN)) {
 			/*  if found the matched address */
 			break;
 		}
@@ -575,7 +575,7 @@ u8 rtw_access_ctrl(struct rtw_adapter *p
 					  list);
 		plist = plist->next;
 
-		if (_rtw_memcmp(paclnode->addr, mac_addr, ETH_ALEN)) {
+		if (!memcmp(paclnode->addr, mac_addr, ETH_ALEN)) {
 			if (paclnode->valid == true) {
 				match = true;
 				break;
--- a/drivers/staging/rtl8192du/core/rtw_wlan_util.c
+++ b/drivers/staging/rtl8192du/core/rtw_wlan_util.c
@@ -1051,11 +1051,11 @@ unsigned int is_ap_in_tkip(struct rtw_ad
 
 			switch (pIE->ElementID) {
 			case _VENDOR_SPECIFIC_IE_:
-				if ((_rtw_memcmp(pIE->data, RTW_WPA_OUI, 4)) && (_rtw_memcmp((pIE->data + 12), WPA_TKIP_CIPHER, 4)))
+				if ((!memcmp(pIE->data, RTW_WPA_OUI, 4)) && (!memcmp((pIE->data + 12), WPA_TKIP_CIPHER, 4)))
 					return true;
 				break;
 			case _RSN_IE_2_:
-				if (_rtw_memcmp((pIE->data + 8), RSN_TKIP_CIPHER, 4))
+				if (!memcmp((pIE->data + 8), RSN_TKIP_CIPHER, 4))
 					return true;
 			default:
 				break;
@@ -1261,28 +1261,28 @@ unsigned char check_assoc_AP(u8 *pframe,
 
 		switch (pIE->ElementID) {
 		case _VENDOR_SPECIFIC_IE_:
-			if ((_rtw_memcmp(pIE->data, ARTHEROS_OUI1, 3)) ||
-			    (_rtw_memcmp(pIE->data, ARTHEROS_OUI2, 3))) {
+			if ((!memcmp(pIE->data, ARTHEROS_OUI1, 3)) ||
+			    (!memcmp(pIE->data, ARTHEROS_OUI2, 3))) {
 				DBG_8192D("link to Artheros AP\n");
 				return atherosAP;
-			} else if ((_rtw_memcmp(pIE->data, BROADCOM_OUI1, 3)) ||
-				   (_rtw_memcmp(pIE->data, BROADCOM_OUI2, 3)) ||
-				   (_rtw_memcmp(pIE->data, BROADCOM_OUI2, 3))) {
+			} else if ((!memcmp(pIE->data, BROADCOM_OUI1, 3)) ||
+				   (!memcmp(pIE->data, BROADCOM_OUI2, 3)) ||
+				   (!memcmp(pIE->data, BROADCOM_OUI2, 3))) {
 				DBG_8192D("link to Broadcom AP\n");
 				return broadcomAP;
-			} else if (_rtw_memcmp(pIE->data, MARVELL_OUI, 3)) {
+			} else if (!memcmp(pIE->data, MARVELL_OUI, 3)) {
 				DBG_8192D("link to Marvell AP\n");
 				return marvellAP;
-			} else if (_rtw_memcmp(pIE->data, RALINK_OUI, 3)) {
+			} else if (!memcmp(pIE->data, RALINK_OUI, 3)) {
 				DBG_8192D("link to Ralink AP\n");
 				return ralinkAP;
-			} else if (_rtw_memcmp(pIE->data, CISCO_OUI, 3)) {
+			} else if (!memcmp(pIE->data, CISCO_OUI, 3)) {
 				DBG_8192D("link to Cisco AP\n");
 				return ciscoAP;
-			} else if (_rtw_memcmp(pIE->data, REALTEK_OUI, 3)) {
+			} else if (!memcmp(pIE->data, REALTEK_OUI, 3)) {
 				DBG_8192D("link to Realtek 96B\n");
 				return realtekAP;
-			} else if (_rtw_memcmp(pIE->data, AIRGOCAP_OUI, 3)) {
+			} else if (!memcmp(pIE->data, AIRGOCAP_OUI, 3)) {
 				DBG_8192D("link to Airgo Cap\n");
 				return airgocapAP;
 			} else {
--- a/drivers/staging/rtl8192du/core/rtw_xmit.c
+++ b/drivers/staging/rtl8192du/core/rtw_xmit.c
@@ -637,13 +637,13 @@ static s32 xmitframe_addmic(struct rtw_a
 				 (pxmitframe->pkt_offset * PACKET_OFFSET_SZ);
 
 			if (bmcst) {
-				if (_rtw_memcmp(psecuritypriv->dot118021XGrptxmickey[psecuritypriv->dot118021XGrpKeyid].skey, null_key, 16) == true) {
+				if (!memcmp(psecuritypriv->dot118021XGrptxmickey[psecuritypriv->dot118021XGrpKeyid].skey, null_key, 16)) {
 					return _FAIL;
 				}
 				/* start to calculate the mic code */
 				rtw_secmicsetkey(&micdata, psecuritypriv->dot118021XGrptxmickey[psecuritypriv->dot118021XGrpKeyid].skey);
 			} else {
-				if (_rtw_memcmp(&stainfo->dot11tkiptxmickey.skey[0], null_key, 16) == true) {
+				if (!memcmp(&stainfo->dot11tkiptxmickey.skey[0], null_key, 16)) {
 					/* DbgPrint("\nxmitframe_addmic:stainfo->dot11tkiptxmickey == 0\n"); */
 					/* msleep(10); */
 					return _FAIL;
--- a/drivers/staging/rtl8192du/hal/rtl8192d_dm.c
+++ b/drivers/staging/rtl8192du/hal/rtl8192d_dm.c
@@ -1235,8 +1235,8 @@ static void PWDB_Monitor(
 
 				plist = plist->next;
 
-				if (_rtw_memcmp(psta	->hwaddr, bcast_addr, ETH_ALEN) ||
-					_rtw_memcmp(psta->hwaddr, myid(&adapter->eeprompriv), ETH_ALEN))
+				if (!memcmp(psta->hwaddr, bcast_addr, ETH_ALEN) ||
+					!memcmp(psta->hwaddr, myid(&adapter->eeprompriv), ETH_ALEN))
 					continue;
 
 				if (psta->state & WIFI_ASOC_STATE)
@@ -1603,7 +1603,7 @@ dm_TXPowerTrackingCallback_ThermalMeter_
 				{
 					if (pdmpriv->bCCKinCH14)
 					{
-						if (_rtw_memcmp((void*)&TempCCk, (void*)&CCKSwingTable_Ch14[i][2], 4)==true)
+						if (!memcmp((void*)&TempCCk, (void*)&CCKSwingTable_Ch14[i][2], 4))
 						{
 							CCK_index_old =(u8)i;
 							break;
@@ -1611,7 +1611,7 @@ dm_TXPowerTrackingCallback_ThermalMeter_
 					}
 					else
 					{
-						if (_rtw_memcmp((void*)&TempCCk, (void*)&CCKSwingTable_Ch1_Ch13[i][2], 4)==true)
+						if (!memcmp((void*)&TempCCk, (void*)&CCKSwingTable_Ch1_Ch13[i][2], 4))
 						{
 							CCK_index_old =(u8)i;
 							break;
--- a/drivers/staging/rtl8192du/hal/rtl8192d_rxdesc.c
+++ b/drivers/staging/rtl8192du/hal/rtl8192d_rxdesc.c
@@ -485,9 +485,9 @@ void rtl8192d_translate_rx_signal_stuff(
 	if ((pattrib->physt) && (pphy_info != NULL))
 	{
 		bPacketMatchBSSID = ((!IsFrameTypeCtrl(precvframe->rx_data)) && !(pattrib->icv_err) && !(pattrib->crc_err) &&
-			_rtw_memcmp(get_hdr_bssid(precvframe->rx_data), get_my_bssid(&padapter->mlmeextpriv.mlmext_info.network), ETH_ALEN));
+			!memcmp(get_hdr_bssid(precvframe->rx_data), get_my_bssid(&padapter->mlmeextpriv.mlmext_info.network), ETH_ALEN));
 
-		bPacketToSelf = bPacketMatchBSSID &&  (_rtw_memcmp(get_da(precvframe->rx_data), myid(&padapter->eeprompriv), ETH_ALEN));
+		bPacketToSelf = bPacketMatchBSSID &&  (!memcmp(get_da(precvframe->rx_data), myid(&padapter->eeprompriv), ETH_ALEN));
 
 		bPacketBeacon =bPacketMatchBSSID && (GetFrameSubType(precvframe->rx_data) ==  WIFI_BEACON);
 
--- a/drivers/staging/rtl8192du/hal/usb_ops_linux.c
+++ b/drivers/staging/rtl8192du/hal/usb_ops_linux.c
@@ -340,7 +340,7 @@ static s32 pre_recv_entry(struct recv_fr
 	{
 		secondary_myid = myid(&secondary_padapter->eeprompriv);
 
-		if (_rtw_memcmp(paddr1, secondary_myid, ETH_ALEN))
+		if (!memcmp(paddr1, secondary_myid, ETH_ALEN))
 		{
 			/* change to secondary interface */
 			precvframe->adapter = secondary_padapter;
--- a/drivers/staging/rtl8192du/include/osdep_service.h
+++ b/drivers/staging/rtl8192du/include/osdep_service.h
@@ -178,8 +178,6 @@ enum {
 
 #define rtw_update_mem_stat(flag, sz) do {} while (0)
 
-int	_rtw_memcmp(void *dst, void *src, u32 sz);
-
 u32	rtw_is_list_empty(struct list_head *phead);
 void	rtw_list_insert_head(struct list_head *plist, struct list_head *phead);
 void	rtw_list_insert_tail(struct list_head *plist, struct list_head *phead);
--- a/drivers/staging/rtl8192du/os_dep/ioctl_cfg80211.c
+++ b/drivers/staging/rtl8192du/os_dep/ioctl_cfg80211.c
@@ -1235,7 +1235,7 @@ static int cfg80211_rtw_get_station(stru
 	    check_fwstate(pmlmepriv, _FW_LINKED)) {
 		struct wlan_network  *cur_network = &(pmlmepriv->cur_network);
 
-		if (_rtw_memcmp(mac, cur_network->network.MacAddress, ETH_ALEN) == false) {
+		if (memcmp(mac, cur_network->network.MacAddress, ETH_ALEN)) {
 			DBG_8192D("%s, mismatch bssid=%pM\n", __func__, cur_network->network.MacAddress);
 			ret = -ENOENT;
 			goto exit;
@@ -1526,7 +1526,7 @@ static int cfg80211_rtw_scan(struct wiph
 	}
 
 	#ifdef CONFIG_P2P
-	if (ssids->ssid != NULL && _rtw_memcmp(ssids->ssid, "DIRECT-", 7) &&
+	if (ssids->ssid != NULL && !memcmp(ssids->ssid, "DIRECT-", 7) &&
 	    rtw_get_p2p_ie((u8 *)request->ie, request->ie_len, NULL, NULL)) {
 		if (rtw_p2p_chk_state(pwdinfo, P2P_STATE_NONE)) {
 			rtw_p2p_enable(padapter, P2P_ROLE_DEVICE);
@@ -2053,20 +2053,20 @@ static int cfg80211_rtw_connect(struct w
 		dst_bssid = pnetwork->network.MacAddress;
 
 		if (sme->bssid)  {
-			if (_rtw_memcmp(pnetwork->network.MacAddress, (void *)sme->bssid, ETH_ALEN) == false)
+			if (memcmp(pnetwork->network.MacAddress, (void *)sme->bssid, ETH_ALEN))
 				continue;
 		}
 
 		if (sme->ssid && sme->ssid_len) {
 			if (pnetwork->network.Ssid.SsidLength != sme->ssid_len ||
-			    !_rtw_memcmp(pnetwork->network.Ssid.Ssid, (void *)sme->ssid, sme->ssid_len))
+			    !!memcmp(pnetwork->network.Ssid.Ssid, (void *)sme->ssid, sme->ssid_len))
 				continue;
 		}
 
 		if (sme->bssid) {
 			src_bssid = sme->bssid;
 
-			if (_rtw_memcmp(dst_bssid, (void *)src_bssid, ETH_ALEN)) {
+			if (!memcmp(dst_bssid, (void *)src_bssid, ETH_ALEN)) {
 				DBG_8192D("matched by bssid\n");
 
 				ndis_ssid.SsidLength = pnetwork->network.Ssid.SsidLength;
@@ -2079,7 +2079,7 @@ static int cfg80211_rtw_connect(struct w
 		} else if (sme->ssid && sme->ssid_len) {
 			src_ssid = ndis_ssid.Ssid;
 
-			if ((_rtw_memcmp(dst_ssid, src_ssid, ndis_ssid.SsidLength) == true) &&
+			if ((!memcmp(dst_ssid, src_ssid, ndis_ssid.SsidLength)) &&
 			    (pnetwork->network.Ssid.SsidLength == ndis_ssid.SsidLength)) {
 				DBG_8192D("matched by ssid\n");
 				matched = true;
@@ -2282,17 +2282,15 @@ static int cfg80211_rtw_set_pmksa(struct
 
 	DBG_8192D(FUNC_NDEV_FMT"\n", FUNC_NDEV_ARG(netdev));
 
-	if (_rtw_memcmp(pmksa->bssid, strZeroMacAddress, ETH_ALEN) == true)
-	{
+	if (!memcmp(pmksa->bssid, strZeroMacAddress, ETH_ALEN))
 		return -EINVAL;
-	}
 
 	blInserted = false;
 
 	/* overwrite PMKID */
 	for (index=0 ; index<NUM_PMKID_CACHE; index++)
 	{
-		if (_rtw_memcmp(psecuritypriv->PMKIDList[index].Bssid, pmksa->bssid, ETH_ALEN) ==true)
+		if (!memcmp(psecuritypriv->PMKIDList[index].Bssid, pmksa->bssid, ETH_ALEN))
 		{ /*  BSSID is matched, the same AP => rewrite with new PMKID. */
 			DBG_8192D(FUNC_NDEV_FMT" BSSID exists in the PMKList.\n", FUNC_NDEV_ARG(netdev));
 
@@ -2336,7 +2334,7 @@ static int cfg80211_rtw_del_pmksa(struct
 
 	for (index=0 ; index<NUM_PMKID_CACHE; index++)
 	{
-		if (_rtw_memcmp(psecuritypriv->PMKIDList[index].Bssid, pmksa->bssid, ETH_ALEN) ==true)
+		if (!memcmp(psecuritypriv->PMKIDList[index].Bssid, pmksa->bssid, ETH_ALEN))
 		{ /*  BSSID is matched, the same AP => Remove this PMKID information and reset it. */
 			memset(psecuritypriv->PMKIDList[index].Bssid, 0x00, ETH_ALEN);
 			memset(psecuritypriv->PMKIDList[index].PMKID, 0x00, WLAN_PMKID_LEN);
@@ -2952,7 +2950,7 @@ static int	cfg80211_rtw_del_station(stru
 
 		plist = plist->next;
 
-		if (_rtw_memcmp(mac, psta->hwaddr, ETH_ALEN)) {
+		if (!memcmp(mac, psta->hwaddr, ETH_ALEN)) {
 			if (psta->dot8021xalg == 1 && psta->bpairwise_key_installed == false) {
 				DBG_8192D("%s, sta's dot8021xalg = 1 and key_installed = false\n", __func__);
 			} else {
--- a/drivers/staging/rtl8192du/os_dep/osdep_service.c
+++ b/drivers/staging/rtl8192du/os_dep/osdep_service.c
@@ -36,15 +36,6 @@ inline int RTW_STATUS_CODE(int error_cod
 	}
 }
 
-int	_rtw_memcmp(void *dst, void *src, u32 sz)
-{
-/* under Linux/GNU/GLibc, the return value of memcmp for two same mem. chunk is 0 */
-	if (!(memcmp(dst, src, sz)))
-		return true;
-	else
-		return false;
-}
-
 /*
 For the following list_xxx operations,
 caller must guarantee the atomic context.
--- a/drivers/staging/rtl8192du/os_dep/recv_linux.c
+++ b/drivers/staging/rtl8192du/os_dep/recv_linux.c
@@ -176,7 +176,7 @@ int rtw_recv_indicatepkt(struct rtw_adap
 		struct rx_pkt_attrib *pattrib = &precv_frame->attrib;
 		int bmcast = IS_MCAST(pattrib->dst);
 
-		if (_rtw_memcmp(pattrib->dst, myid(&padapter->eeprompriv), ETH_ALEN)==false) {
+		if (memcmp(pattrib->dst, myid(&padapter->eeprompriv), ETH_ALEN)) {
 			if (bmcast) {
 				psta = rtw_get_bcmc_stainfo(padapter);
 				pskb2 = skb_clone(skb, GFP_ATOMIC);
