From 4aa7518f4fb799675f72cd2d959421b455b83aee Mon Sep 17 00:00:00 2001
From: Larry Finger <Larry.Finger@lwfinger.net>
Date: Thu, 2 May 2013 16:13:48 -0500
Subject: [PATCH 104/210] Clean up ERROR and CHECK for core/rtw_debug.c

Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
---
 core/rtw_debug.c | 476 +++++++++++++++++++++++--------------------------------
 1 file changed, 200 insertions(+), 276 deletions(-)

--- a/drivers/staging/rtl8192du/core/rtw_debug.c
+++ b/drivers/staging/rtl8192du/core/rtw_debug.c
@@ -22,11 +22,11 @@
 
 #include <rtw_debug.h>
 
-//#ifdef CONFIG_DEBUG_RTL871X
+/* ifdef CONFIG_DEBUG_RTL871X */
 
 	u32 GlobalDebugLevel = _drv_err_;
 
-	u64 GlobalDebugComponents = \
+	u64 GlobalDebugComponents = 
 			_module_rtl871x_xmit_c_ |
 			_module_xmit_osdep_c_ |
 			_module_rtl871x_recv_c_ |
@@ -57,7 +57,7 @@
 			_module_mp_ |
 			_module_efuse_;
 
-//#endif
+/* endif */
 
 #ifdef CONFIG_PROC_DEBUG
 
@@ -106,18 +106,14 @@ int proc_set_log_level(struct file *file
 		return -EFAULT;
 
 	if (buffer && !copy_from_user(tmp, buffer, sizeof(tmp))) {
-
 		int num = sscanf(tmp, "%d ", &is_signal_dbg);
 
-		if( is_signal_dbg >= 0 && is_signal_dbg < 10 )
-		{
-			GlobalDebugLevel= is_signal_dbg;
-			printk("%d\n", GlobalDebugLevel);
+		if (is_signal_dbg >= 0 && is_signal_dbg < 10) {
+			GlobalDebugLevel = is_signal_dbg;
+			pr_info("%d\n", GlobalDebugLevel);
 		}
 	}
-
 	return count;
-
 }
 
 int proc_get_write_reg(char *page, char **start,
@@ -136,80 +132,69 @@ int proc_set_write_reg(struct file *file
 	char tmp[32];
 	u32 addr, val, len;
 
-	if (count < 3)
-	{
+	if (count < 3) {
 		DBG_8192D("argument size is less than 3\n");
 		return -EFAULT;
 	}
 
 	if (buffer && !copy_from_user(tmp, buffer, sizeof(tmp))) {
-
 		int num = sscanf(tmp, "%x %x %x", &addr, &val, &len);
 
 		if (num !=  3) {
 			DBG_8192D("invalid write_reg parameter!\n");
 			return count;
 		}
-
-		switch(len)
-		{
-			case 1:
-				rtw_write8(padapter, addr, (u8)val);
-				break;
-			case 2:
-				rtw_write16(padapter, addr, (u16)val);
-				break;
-			case 4:
-				rtw_write32(padapter, addr, val);
-				break;
-			default:
-				DBG_8192D("error write length=%d", len);
-				break;
+		switch (len) {
+		case 1:
+			rtw_write8(padapter, addr, (u8)val);
+			break;
+		case 2:
+			rtw_write16(padapter, addr, (u16)val);
+			break;
+		case 4:
+			rtw_write32(padapter, addr, val);
+			break;
+		default:
+			DBG_8192D("error write length=%d", len);
+			break;
 		}
-
 	}
-
 	return count;
-
 }
 
-static u32 proc_get_read_addr=0xeeeeeeee;
-static u32 proc_get_read_len=0x4;
+static u32 proc_get_read_addr = 0xeeeeeeee;
+static u32 proc_get_read_len = 0x4;
 
 int proc_get_read_reg(char *page, char **start,
-			  off_t offset, int count,
-			  int *eof, void *data)
+		      off_t offset, int count,
+		      int *eof, void *data)
 {
 	struct net_device *dev = data;
 	struct rtw_adapter *padapter = (struct rtw_adapter *)rtw_netdev_priv(dev);
 
 	int len = 0;
 
-	if(proc_get_read_addr==0xeeeeeeee)
-	{
+	if (proc_get_read_addr == 0xeeeeeeee) {
 		*eof = 1;
 		return len;
 	}
 
-	switch(proc_get_read_len)
-	{
-		case 1:
-			len += snprintf(page + len, count - len, "rtw_read8(0x%x)=0x%x\n", proc_get_read_addr, rtw_read8(padapter, proc_get_read_addr));
-			break;
-		case 2:
-			len += snprintf(page + len, count - len, "rtw_read16(0x%x)=0x%x\n", proc_get_read_addr, rtw_read16(padapter, proc_get_read_addr));
-			break;
-		case 4:
-			len += snprintf(page + len, count - len, "rtw_read32(0x%x)=0x%x\n", proc_get_read_addr, rtw_read32(padapter, proc_get_read_addr));
-			break;
-		default:
-			len += snprintf(page + len, count - len, "error read length=%d\n", proc_get_read_len);
-			break;
+	switch (proc_get_read_len) {
+	case 1:
+		len += snprintf(page + len, count - len, "rtw_read8(0x%x)=0x%x\n", proc_get_read_addr, rtw_read8(padapter, proc_get_read_addr));
+		break;
+	case 2:
+		len += snprintf(page + len, count - len, "rtw_read16(0x%x)=0x%x\n", proc_get_read_addr, rtw_read16(padapter, proc_get_read_addr));
+		break;
+	case 4:
+		len += snprintf(page + len, count - len, "rtw_read32(0x%x)=0x%x\n", proc_get_read_addr, rtw_read32(padapter, proc_get_read_addr));
+		break;
+	default:
+		len += snprintf(page + len, count - len, "error read length=%d\n", proc_get_read_len);
+		break;
 	}
-
 	*eof = 1;
 	return len;
-
 }
 
 int proc_set_read_reg(struct file *file, const char __user *buffer,
@@ -218,28 +203,22 @@ int proc_set_read_reg(struct file *file,
 	char tmp[16];
 	u32 addr, len;
 
-	if (count < 2)
-	{
+	if (count < 2) {
 		DBG_8192D("argument size is less than 2\n");
 		return -EFAULT;
 	}
 
 	if (buffer && !copy_from_user(tmp, buffer, sizeof(tmp))) {
-
 		int num = sscanf(tmp, "%x %x", &addr, &len);
 
 		if (num !=  2) {
 			DBG_8192D("invalid read_reg parameter!\n");
 			return count;
 		}
-
 		proc_get_read_addr = addr;
-
 		proc_get_read_len = len;
 	}
-
 	return count;
-
 }
 
 int proc_get_fwstate(char *page, char **start,
@@ -300,14 +279,11 @@ int proc_get_qos_option(char *page, char
 	struct net_device *dev = data;
 	struct rtw_adapter *padapter = (struct rtw_adapter *)rtw_netdev_priv(dev);
 	struct mlme_priv *pmlmepriv = &(padapter->mlmepriv);
-
 	int len = 0;
 
 	len += snprintf(page + len, count - len, "qos_option=%d\n", pmlmepriv->qospriv.qos_option);
-
 	*eof = 1;
 	return len;
-
 }
 
 int proc_get_ht_option(char *page, char **start,
@@ -336,7 +312,7 @@ int proc_get_rf_info(char *page, char **
 	int len = 0;
 
 	len += snprintf(page + len, count - len, "cur_ch=%d, cur_bw=%d, cur_ch_offet=%d\n"
-		"oper_ch=%d, oper_bw=%d, oper_ch_offet=%d\n",
+		"oper_ch =%d, oper_bw=%d, oper_ch_offet=%d\n",
 		pmlmeext->cur_channel, pmlmeext->cur_bwmode, pmlmeext->cur_ch_offset,
 		rtw_get_oper_ch(padapter), rtw_get_oper_bw(padapter), rtw_get_oper_choffset(padapter));
 	*eof = 1;
@@ -358,8 +334,7 @@ int proc_get_ap_info(char *page, char **
 	int len = 0;
 
 	psta = rtw_get_stainfo(pstapriv, cur_network->network.MacAddress);
-	if(psta)
-	{
+	if (psta) {
 		int i;
 		struct recv_reorder_ctrl *preorder_ctrl;
 
@@ -373,24 +348,17 @@ int proc_get_ap_info(char *page, char **
 		len += snprintf(page + len, count - len, "ampdu_enable = %d\n", psta->htpriv.ampdu_enable);
 		len += snprintf(page + len, count - len, "agg_enable_bitmap=%x, candidate_tid_bitmap=%x\n", psta->htpriv.agg_enable_bitmap, psta->htpriv.candidate_tid_bitmap);
 
-		for(i=0;i<16;i++)
-		{
+		for (i = 0; i < 16; i++) {
 			preorder_ctrl = &psta->recvreorder_ctrl[i];
-			if(preorder_ctrl->enable)
-			{
+			if (preorder_ctrl->enable)
 				len += snprintf(page + len, count - len, "tid=%d, indicate_seq=%d\n", i, preorder_ctrl->indicate_seq);
-			}
 		}
 
-	}
-	else
-	{
+	} else {
 		len += snprintf(page + len, count - len, "can't get sta's macaddr, cur_network's macaddr:%pM\n", cur_network->network.MacAddress);
 	}
-
 	*eof = 1;
 	return len;
-
 }
 
 int proc_get_adapter_state(char *page, char **start,
@@ -403,10 +371,8 @@ int proc_get_adapter_state(char *page, c
 
 	len += snprintf(page + len, count - len, "bSurpriseRemoved=%d, bDriverStopped=%d\n",
 						padapter->bSurpriseRemoved, padapter->bDriverStopped);
-
 	*eof = 1;
 	return len;
-
 }
 
 int proc_get_trx_info(char *page, char **start,
@@ -421,7 +387,7 @@ int proc_get_trx_info(char *page, char *
 	int len = 0;
 
 	len += snprintf(page + len, count - len, "free_xmitbuf_cnt=%d, free_xmitframe_cnt=%d, free_ext_xmitbuf_cnt=%d, free_recvframe_cnt=%d\n",
-				pxmitpriv->free_xmitbuf_cnt, pxmitpriv->free_xmitframe_cnt,pxmitpriv->free_xmit_extbuf_cnt, precvpriv->free_recvframe_cnt);
+				pxmitpriv->free_xmitbuf_cnt, pxmitpriv->free_xmitframe_cnt, pxmitpriv->free_xmit_extbuf_cnt, precvpriv->free_recvframe_cnt);
 	len += snprintf(page + len, count - len, "rx_urb_pending_cnt=%d\n", precvpriv->rx_pending_cnt);
 
 	len += snprintf(page + len, count - len, "recvbuf_skb_alloc_fail_cnt=%d\n", precvpriv->recvbuf_skb_alloc_fail_cnt);
@@ -433,7 +399,6 @@ int proc_get_trx_info(char *page, char *
 
 	*eof = 1;
 	return len;
-
 }
 
 
@@ -445,15 +410,16 @@ int proc_get_mac_reg_dump1(char *page, c
 	struct net_device *dev = data;
 	struct rtw_adapter *padapter = (struct rtw_adapter *)rtw_netdev_priv(dev);
 	int len = 0;
-	int i,j=1;
+	int i, j = 1;
 
 	len += snprintf(page + len, count - len, "\n======= MAC REG =======\n");
 
-	for(i=0x0;i<0x300;i+=4)
-	{
-		if(j%4==1)	len += snprintf(page + len, count - len,"0x%02x",i);
-		len += snprintf(page + len, count - len," 0x%08x ",rtw_read32(padapter,i));
-		if((j++)%4 == 0)	len += snprintf(page + len, count - len,"\n");
+	for (i = 0x0; i < 0x300; i += 4) {
+		if (j%4 == 1)
+			len += snprintf(page + len, count - len, "0x%02x", i);
+		len += snprintf(page + len, count - len, " 0x%08x ", rtw_read32(padapter, i));
+		if ((j++)%4 == 0)
+			len += snprintf(page + len, count - len, "\n");
 	}
 
 	*eof = 1;
@@ -468,15 +434,16 @@ int proc_get_mac_reg_dump2(char *page, c
 	struct net_device *dev = data;
 	struct rtw_adapter *padapter = (struct rtw_adapter *)rtw_netdev_priv(dev);
 	int len = 0;
-	int i,j=1;
+	int i, j = 1;
 
 	len += snprintf(page + len, count - len, "\n======= MAC REG =======\n");
 	memset(page, 0, count);
-	for(i=0x300;i<0x600;i+=4)
-	{
-		if(j%4==1)	len += snprintf(page + len, count - len,"0x%02x",i);
-		len += snprintf(page + len, count - len," 0x%08x ",rtw_read32(padapter,i));
-		if((j++)%4 == 0)	len += snprintf(page + len, count - len,"\n");
+	for (i = 0x300; i < 0x600; i += 4) {
+		if (j%4 == 1)
+			len += snprintf(page + len, count - len, "0x%02x", i);
+		len += snprintf(page + len, count - len, " 0x%08x ", rtw_read32(padapter, i));
+		if ((j++)%4 == 0)
+			len += snprintf(page + len, count - len, "\n");
 	}
 
 	*eof = 1;
@@ -491,20 +458,20 @@ int proc_get_mac_reg_dump3(char *page, c
 	struct net_device *dev = data;
 	struct rtw_adapter *padapter = (struct rtw_adapter *)rtw_netdev_priv(dev);
 	int len = 0;
-	int i,j=1;
+	int i, j = 1;
 
 	len += snprintf(page + len, count - len, "\n======= MAC REG =======\n");
 
-	for(i=0x600;i<0x800;i+=4)
-	{
-		if(j%4==1)	len += snprintf(page + len, count - len,"0x%02x",i);
-		len += snprintf(page + len, count - len," 0x%08x ",rtw_read32(padapter,i));
-		if((j++)%4 == 0)	len += snprintf(page + len, count - len,"\n");
+	for (i = 0x600; i < 0x800; i += 4) {
+		if (j%4 == 1)
+			len += snprintf(page + len, count - len, "0x%02x", i);
+		len += snprintf(page + len, count - len, " 0x%08x ", rtw_read32(padapter, i));
+		if ((j++)%4 == 0)
+			len += snprintf(page + len, count - len, "\n");
 	}
 
 	*eof = 1;
 	return len;
-
 }
 
 int proc_get_bb_reg_dump1(char *page, char **start,
@@ -514,14 +481,15 @@ int proc_get_bb_reg_dump1(char *page, ch
 	struct net_device *dev = data;
 	struct rtw_adapter *padapter = (struct rtw_adapter *)rtw_netdev_priv(dev);
 	int len = 0;
-	int i,j=1;
+	int i, j = 1;
 
 	len += snprintf(page + len, count - len, "\n======= BB REG =======\n");
-	for(i=0x800;i<0xB00;i+=4)
-	{
-		if(j%4==1)	len += snprintf(page + len, count - len,"0x%02x",i);
-		len += snprintf(page + len, count - len," 0x%08x ",rtw_read32(padapter,i));
-		if((j++)%4 == 0)	len += snprintf(page + len, count - len,"\n");
+	for (i = 0x800; i < 0xB00; i += 4) {
+		if (j%4 == 1)
+			len += snprintf(page + len, count - len, "0x%02x", i);
+		len += snprintf(page + len, count - len, " 0x%08x ", rtw_read32(padapter, i));
+		if ((j++)%4 == 0)
+			len += snprintf(page + len, count - len, "\n");
 	}
 	*eof = 1;
 	return len;
@@ -534,14 +502,15 @@ int proc_get_bb_reg_dump2(char *page, ch
 	struct net_device *dev = data;
 	struct rtw_adapter *padapter = (struct rtw_adapter *)rtw_netdev_priv(dev);
 	int len = 0;
-	int i,j=1;
+	int i, j = 1;
 
 	len += snprintf(page + len, count - len, "\n======= BB REG =======\n");
-	for(i=0xB00;i<0xE00;i+=4)
-	{
-		if(j%4==1)	len += snprintf(page + len, count - len,"0x%02x",i);
-		len += snprintf(page + len, count - len," 0x%08x ",rtw_read32(padapter,i));
-		if((j++)%4 == 0)	len += snprintf(page + len, count - len,"\n");
+	for (i = 0xB00; i < 0xE00; i += 4) {
+		if (j%4 == 1)
+			len += snprintf(page + len, count - len, "0x%02x", i);
+		len += snprintf(page + len, count - len, " 0x%08x ", rtw_read32(padapter, i));
+		if ((j++)%4 == 0)
+			len += snprintf(page + len, count - len, "\n");
 	}
 	*eof = 1;
 	return len;
@@ -554,14 +523,15 @@ int proc_get_bb_reg_dump3(char *page, ch
 	struct net_device *dev = data;
 	struct rtw_adapter *padapter = (struct rtw_adapter *)rtw_netdev_priv(dev);
 	int len = 0;
-	int i,j=1;
+	int i, j = 1;
 
 	len += snprintf(page + len, count - len, "\n======= BB REG =======\n");
-	for(i=0xE00;i<0x1000;i+=4)
-	{
-		if(j%4==1)	len += snprintf(page + len, count - len,"0x%02x",i);
-		len += snprintf(page + len, count - len," 0x%08x ",rtw_read32(padapter,i));
-		if((j++)%4 == 0)	len += snprintf(page + len, count - len,"\n");
+	for (i = 0xE00; i < 0x1000; i += 4) {
+		if (j%4 == 1)
+			len += snprintf(page + len, count - len, "0x%02x", i);
+		len += snprintf(page + len, count - len, " 0x%08x ", rtw_read32(padapter, i));
+		if ((j++)%4 == 0)
+			len += snprintf(page + len, count - len, "\n");
 	}
 	*eof = 1;
 	return len;
@@ -574,19 +544,19 @@ int proc_get_rf_reg_dump1(char *page, ch
 	struct net_device *dev = data;
 	struct rtw_adapter *padapter = (struct rtw_adapter *)rtw_netdev_priv(dev);
 	int len = 0;
-	int i,j=1,path;
+	int i, j = 1, path;
 	u32 value;
 
 	len += snprintf(page + len, count - len, "\n======= RF REG =======\n");
 	path = 1;
-	len += snprintf(page + len, count - len, "\nRF_Path(%x)\n",path);
-	for(i=0;i<0xC0;i++)
-	{
-		//value = PHY_QueryRFReg(padapter, (RF90_RADIO_PATH_E)path,i, bMaskDWord);
-		value =rtw_hal_read_rfreg(padapter, path, i, 0xffffffff);
-		if(j%4==1)	len += snprintf(page + len, count - len, "0x%02x ",i);
-		len += snprintf(page + len, count - len, " 0x%08x ",value);
-		if((j++)%4==0)	len += snprintf(page + len, count - len, "\n");
+	len += snprintf(page + len, count - len, "\nRF_Path(%x)\n", path);
+	for (i = 0; i < 0xC0; i++) {
+		value = rtw_hal_read_rfreg(padapter, path, i, 0xffffffff);
+		if (j%4 == 1)
+			len += snprintf(page + len, count - len, "0x%02x ", i);
+		len += snprintf(page + len, count - len, " 0x%08x ", value);
+		if ((j++)%4 == 0)
+			len += snprintf(page + len, count - len, "\n");
 	}
 
 	*eof = 1;
@@ -601,19 +571,19 @@ int proc_get_rf_reg_dump2(char *page, ch
 	struct net_device *dev = data;
 	struct rtw_adapter *padapter = (struct rtw_adapter *)rtw_netdev_priv(dev);
 	int len = 0;
-	int i,j=1,path;
+	int i, j = 1, path;
 	u32 value;
 
 	len += snprintf(page + len, count - len, "\n======= RF REG =======\n");
 	path = 1;
-	len += snprintf(page + len, count - len, "\nRF_Path(%x)\n",path);
-	for(i=0xC0;i<0x100;i++)
-	{
-		//value = PHY_QueryRFReg(padapter, (RF90_RADIO_PATH_E)path,i, bMaskDWord);
-		value =rtw_hal_read_rfreg(padapter, path, i, 0xffffffff);
-		if(j%4==1)	len += snprintf(page + len, count - len, "0x%02x ",i);
-		len += snprintf(page + len, count - len, " 0x%08x ",value);
-		if((j++)%4==0)	len += snprintf(page + len, count - len, "\n");
+	len += snprintf(page + len, count - len, "\nRF_Path(%x)\n", path);
+	for (i = 0xC0; i < 0x100; i++) {
+		value = rtw_hal_read_rfreg(padapter, path, i, 0xffffffff);
+		if (j%4 == 1)
+			len += snprintf(page + len, count - len, "0x%02x ", i);
+		len += snprintf(page + len, count - len, " 0x%08x ", value);
+		if ((j++)%4 == 0)
+			len += snprintf(page + len, count - len, "\n");
 	}
 	*eof = 1;
 	return len;
@@ -627,19 +597,19 @@ int proc_get_rf_reg_dump3(char *page, ch
 	struct net_device *dev = data;
 	struct rtw_adapter *padapter = (struct rtw_adapter *)rtw_netdev_priv(dev);
 	int len = 0;
-	int i,j=1,path;
+	int i, j = 1, path;
 	u32 value;
 
 	len += snprintf(page + len, count - len, "\n======= RF REG =======\n");
 	path = 2;
-	len += snprintf(page + len, count - len, "\nRF_Path(%x)\n",path);
-	for(i=0;i<0xC0;i++)
-	{
-		//value = PHY_QueryRFReg(padapter, (RF90_RADIO_PATH_E)path,i, bMaskDWord);
-		value =rtw_hal_read_rfreg(padapter, path, i, 0xffffffff);
-		if(j%4==1)	len += snprintf(page + len, count - len, "0x%02x ",i);
-		len += snprintf(page + len, count - len, " 0x%08x ",value);
-		if((j++)%4==0)	len += snprintf(page + len, count - len, "\n");
+	len += snprintf(page + len, count - len, "\nRF_Path(%x)\n", path);
+	for (i = 0; i < 0xC0; i++) {
+		value = rtw_hal_read_rfreg(padapter, path, i, 0xffffffff);
+		if (j%4 == 1)
+			len += snprintf(page + len, count - len, "0x%02x ", i);
+		len += snprintf(page + len, count - len, " 0x%08x ", value);
+		if ((j++)%4 == 0)
+			len += snprintf(page + len, count - len, "\n");
 	}
 
 	*eof = 1;
@@ -654,19 +624,19 @@ int proc_get_rf_reg_dump4(char *page, ch
 	struct net_device *dev = data;
 	struct rtw_adapter *padapter = (struct rtw_adapter *)rtw_netdev_priv(dev);
 	int len = 0;
-	int i,j=1,path;
+	int i, j = 1, path;
 	u32 value;
 
 	len += snprintf(page + len, count - len, "\n======= RF REG =======\n");
 	path = 2;
-	len += snprintf(page + len, count - len, "\nRF_Path(%x)\n",path);
-	for(i=0xC0;i<0x100;i++)
-	{
-		//value = PHY_QueryRFReg(padapter, (RF90_RADIO_PATH_E)path,i, bMaskDWord);
-		value =rtw_hal_read_rfreg(padapter, path, i, 0xffffffff);
-		if(j%4==1)	len += snprintf(page + len, count - len, "0x%02x ",i);
-		len += snprintf(page + len, count - len, " 0x%08x ",value);
-		if((j++)%4==0)	len += snprintf(page + len, count - len, "\n");
+	len += snprintf(page + len, count - len, "\nRF_Path(%x)\n", path);
+	for (i = 0xC0; i < 0x100; i++) {
+		value = rtw_hal_read_rfreg(padapter, path, i, 0xffffffff);
+		if (j%4 == 1)
+			len += snprintf(page + len, count - len, "0x%02x ", i);
+		len += snprintf(page + len, count - len, " 0x%08x ", value);
+		if ((j++)%4 == 0)
+			len += snprintf(page + len, count - len, "\n");
 	}
 	*eof = 1;
 	return len;
@@ -713,29 +683,25 @@ int proc_set_rx_signal(struct file *file
 		return -EFAULT;
 
 	if (buffer && !copy_from_user(tmp, buffer, sizeof(tmp))) {
-
 		int num = sscanf(tmp, "%u %u", &is_signal_dbg, &signal_strength);
 
-		is_signal_dbg = is_signal_dbg==0?0:1;
+		is_signal_dbg = is_signal_dbg == 0 ? 0 : 1;
 
-		if(is_signal_dbg && num!=2)
+		if (is_signal_dbg && num != 2)
 			return count;
 
-		signal_strength = signal_strength>100?100:signal_strength;
-		signal_strength = signal_strength<0?0:signal_strength;
+		signal_strength = signal_strength > 100 ? 100 : signal_strength;
+		signal_strength = signal_strength < 0 ? 0 : signal_strength;
 
 		padapter->recvpriv.is_signal_dbg = is_signal_dbg;
-		padapter->recvpriv.signal_strength_dbg=signal_strength;
+		padapter->recvpriv.signal_strength_dbg = signal_strength;
 
-		if(is_signal_dbg)
+		if (is_signal_dbg)
 			DBG_8192D("set %s %u\n", "DBG_SIGNAL_STRENGTH", signal_strength);
 		else
 			DBG_8192D("set %s\n", "HW_SIGNAL_STRENGTH");
-
 	}
-
 	return count;
-
 }
 
 int proc_get_ht_enable(char *page, char **start,
@@ -748,7 +714,7 @@ int proc_get_ht_enable(char *page, char
 
 	int len = 0;
 
-	if(pregpriv)
+	if (pregpriv)
 		len += snprintf(page + len, count - len,
 			"%d\n",
 			pregpriv->ht_enable
@@ -771,18 +737,14 @@ int proc_set_ht_enable(struct file *file
 		return -EFAULT;
 
 	if (buffer && !copy_from_user(tmp, buffer, sizeof(tmp))) {
-
 		int num = sscanf(tmp, "%d ", &mode);
 
-		if( pregpriv && mode >= 0 && mode < 2 )
-		{
-			pregpriv->ht_enable= mode;
-			printk("ht_enable=%d\n", pregpriv->ht_enable);
+		if (pregpriv && mode >= 0 && mode < 2) {
+			pregpriv->ht_enable = mode;
+			pr_info("ht_enable=%d\n", pregpriv->ht_enable);
 		}
 	}
-
 	return count;
-
 }
 
 
@@ -796,7 +758,7 @@ int proc_get_cbw40_enable(char *page, ch
 
 	int len = 0;
 
-	if(pregpriv)
+	if (pregpriv)
 		len += snprintf(page + len, count - len,
 			"%d\n",
 			pregpriv->cbw40_enable
@@ -819,18 +781,14 @@ int proc_set_cbw40_enable(struct file *f
 		return -EFAULT;
 
 	if (buffer && !copy_from_user(tmp, buffer, sizeof(tmp))) {
-
 		int num = sscanf(tmp, "%d ", &mode);
 
-		if( pregpriv && mode >= 0 && mode < 2 )
-		{
-			pregpriv->cbw40_enable= mode;
-			printk("cbw40_enable=%d\n", mode);
+		if (pregpriv && mode >= 0 && mode < 2) {
+			pregpriv->cbw40_enable = mode;
+			pr_info("cbw40_enable=%d\n", mode);
 		}
 	}
-
 	return count;
-
 }
 
 int proc_get_ampdu_enable(char *page, char **start,
@@ -843,7 +801,7 @@ int proc_get_ampdu_enable(char *page, ch
 
 	int len = 0;
 
-	if(pregpriv)
+	if (pregpriv)
 		len += snprintf(page + len, count - len,
 			"%d\n",
 			pregpriv->ampdu_enable
@@ -866,21 +824,16 @@ int proc_set_ampdu_enable(struct file *f
 		return -EFAULT;
 
 	if (buffer && !copy_from_user(tmp, buffer, sizeof(tmp))) {
-
 		int num = sscanf(tmp, "%d ", &mode);
 
-		if( pregpriv && mode >= 0 && mode < 3 )
-		{
-			pregpriv->ampdu_enable= mode;
-			printk("ampdu_enable=%d\n", mode);
+		if (pregpriv && mode >= 0 && mode < 3) {
+			pregpriv->ampdu_enable = mode;
+			pr_info("ampdu_enable=%d\n", mode);
 		}
 	}
-
 	return count;
-
 }
 
-
 int proc_get_two_path_rssi(char *page, char **start,
 			  off_t offset, int count,
 			  int *eof, void *data)
@@ -890,7 +843,7 @@ int proc_get_two_path_rssi(char *page, c
 
 	int len = 0;
 
-	if(padapter)
+	if (padapter)
 		len += snprintf(page + len, count - len,
 			"%d %d\n",
 			padapter->recvpriv.RxRssi[0],
@@ -911,7 +864,7 @@ int proc_get_rx_stbc(char *page, char **
 
 	int len = 0;
 
-	if(pregpriv)
+	if (pregpriv)
 		len += snprintf(page + len, count - len,
 			"%d\n",
 			pregpriv->rx_stbc
@@ -934,18 +887,14 @@ int proc_set_rx_stbc(struct file *file,
 		return -EFAULT;
 
 	if (buffer && !copy_from_user(tmp, buffer, sizeof(tmp))) {
-
 		int num = sscanf(tmp, "%d ", &mode);
 
-		if( pregpriv && (mode == 0 || mode == 1|| mode == 2|| mode == 3))
-		{
-			pregpriv->rx_stbc= mode;
-			printk("rx_stbc=%d\n", mode);
+		if (pregpriv && (mode == 0 || mode == 1 || mode == 2 || mode == 3)) {
+			pregpriv->rx_stbc = mode;
+			pr_info("rx_stbc=%d\n", mode);
 		}
 	}
-
 	return count;
-
 }
 
 int proc_get_vid(char *page, char **start,
@@ -954,7 +903,7 @@ int proc_get_vid(char *page, char **star
 {
 	struct net_device *dev = data;
 	struct rtw_adapter *padapter = (struct rtw_adapter *)rtw_netdev_priv(dev);
-	u16 VID=0;
+	u16 VID = 0;
 	int len = 0;
 
 	rtw_hal_get_hwreg(padapter, HW_VAR_VID, (u8 *)&VID);
@@ -973,7 +922,7 @@ int proc_get_pid(char *page, char **star
 {
 	struct net_device *dev = data;
 	struct rtw_adapter *padapter = (struct rtw_adapter *)rtw_netdev_priv(dev);
-	u16 PID=0;
+	u16 PID = 0;
 	int len = 0;
 
 	rtw_hal_get_hwreg(padapter, HW_VAR_PID, (u8 *)&PID);
@@ -1000,16 +949,14 @@ int proc_set_rssi_disp(struct file *file
 	struct net_device *dev = (struct net_device *)data;
 	struct rtw_adapter *padapter = (struct rtw_adapter *)rtw_netdev_priv(dev);
 	char tmp[32];
-	u32 enable=0;
+	u32 enable = 0;
 
-	if (count < 1)
-	{
+	if (count < 1) {
 		DBG_8192D("argument size is less than 1\n");
 		return -EFAULT;
 	}
 
 	if (buffer && !copy_from_user(tmp, buffer, sizeof(tmp))) {
-
 		int num = sscanf(tmp, "%x", &enable);
 
 		if (num !=  1) {
@@ -1017,21 +964,15 @@ int proc_set_rssi_disp(struct file *file
 			return count;
 		}
 
-		if(enable)
-		{
+		if (enable) {
 			DBG_8192D("Turn On Rx RSSI Display Function\n");
-			padapter->bRxRSSIDisplay = enable ;
-		}
-		else
-		{
+			padapter->bRxRSSIDisplay = enable;
+		} else {
 			DBG_8192D("Turn Off Rx RSSI Display Function\n");
-			padapter->bRxRSSIDisplay = 0 ;
+			padapter->bRxRSSIDisplay = 0;
 		}
-
 	}
-
 	return count;
-
 }
 
 
@@ -1055,69 +996,55 @@ int proc_get_all_sta_info(char *page, ch
 
 	spin_lock_bh(&pstapriv->sta_hash_lock);
 
-	for(i=0; i< NUM_STA; i++)
-	{
+	for (i = 0; i < NUM_STA; i++) {
 		phead = &(pstapriv->sta_hash[i]);
 		plist = get_next(phead);
 
-		while ((rtw_end_of_queue_search(phead, plist)) == false)
-		{
+		while ((rtw_end_of_queue_search(phead, plist)) == false) {
 			psta = LIST_CONTAINOR(plist, struct sta_info, hash_list);
 
 			plist = get_next(plist);
 
-			//if(extra_arg == psta->aid)
-			{
-				len += snprintf(page + len, count - len, "sta's macaddr:%pM\n", psta->hwaddr);
-				len += snprintf(page + len, count - len, "rtsen=%d, cts2slef=%d\n", psta->rtsen, psta->cts2self);
-				len += snprintf(page + len, count - len, "qos_en=%d, ht_en=%d, init_rate=%d\n", psta->qos_option, psta->htpriv.ht_option, psta->init_rate);
-				len += snprintf(page + len, count - len, "state=0x%x, aid=%d, macid=%d, raid=%d\n", psta->state, psta->aid, psta->mac_id, psta->raid);
-				len += snprintf(page + len, count - len, "bwmode=%d, ch_offset=%d, sgi=%d\n", psta->htpriv.bwmode, psta->htpriv.ch_offset, psta->htpriv.sgi);
-				len += snprintf(page + len, count - len, "ampdu_enable = %d\n", psta->htpriv.ampdu_enable);
-				len += snprintf(page + len, count - len, "agg_enable_bitmap=%x, candidate_tid_bitmap=%x\n", psta->htpriv.agg_enable_bitmap, psta->htpriv.candidate_tid_bitmap);
-				len += snprintf(page + len, count - len, "sleepq_len=%d\n", psta->sleepq_len);
-				len += snprintf(page + len, count - len, "capability=0x%x\n", psta->capability);
-				len += snprintf(page + len, count - len, "flags=0x%x\n", psta->flags);
-				len += snprintf(page + len, count - len, "wpa_psk=0x%x\n", psta->wpa_psk);
-				len += snprintf(page + len, count - len, "wpa2_group_cipher=0x%x\n", psta->wpa2_group_cipher);
-				len += snprintf(page + len, count - len, "wpa2_pairwise_cipher=0x%x\n", psta->wpa2_pairwise_cipher);
-				len += snprintf(page + len, count - len, "qos_info=0x%x\n", psta->qos_info);
-				len += snprintf(page + len, count - len, "dot118021XPrivacy=0x%x\n", psta->dot118021XPrivacy);
-
-				for(j=0;j<16;j++)
-				{
-					preorder_ctrl = &psta->recvreorder_ctrl[j];
-					if(preorder_ctrl->enable)
-					{
-						len += snprintf(page + len, count - len, "tid=%d, indicate_seq=%d\n", j, preorder_ctrl->indicate_seq);
-					}
-				}
-
+			len += snprintf(page + len, count - len, "sta's macaddr:%pM\n", psta->hwaddr);
+			len += snprintf(page + len, count - len, "rtsen=%d, cts2slef=%d\n", psta->rtsen, psta->cts2self);
+			len += snprintf(page + len, count - len, "qos_en=%d, ht_en=%d, init_rate=%d\n", psta->qos_option, psta->htpriv.ht_option, psta->init_rate);
+			len += snprintf(page + len, count - len, "state=0x%x, aid=%d, macid=%d, raid=%d\n", psta->state, psta->aid, psta->mac_id, psta->raid);
+			len += snprintf(page + len, count - len, "bwmode=%d, ch_offset=%d, sgi=%d\n", psta->htpriv.bwmode, psta->htpriv.ch_offset, psta->htpriv.sgi);
+			len += snprintf(page + len, count - len, "ampdu_enable=%d\n", psta->htpriv.ampdu_enable);
+			len += snprintf(page + len, count - len, "agg_enable_bitmap=%x, candidate_tid_bitmap=%x\n", psta->htpriv.agg_enable_bitmap, psta->htpriv.candidate_tid_bitmap);
+			len += snprintf(page + len, count - len, "sleepq_len=%d\n", psta->sleepq_len);
+			len += snprintf(page + len, count - len, "capability=0x%x\n", psta->capability);
+			len += snprintf(page + len, count - len, "flags=0x%x\n", psta->flags);
+			len += snprintf(page + len, count - len, "wpa_psk=0x%x\n", psta->wpa_psk);
+			len += snprintf(page + len, count - len, "wpa2_group_cipher=0x%x\n", psta->wpa2_group_cipher);
+			len += snprintf(page + len, count - len, "wpa2_pairwise_cipher=0x%x\n", psta->wpa2_pairwise_cipher);
+			len += snprintf(page + len, count - len, "qos_info=0x%x\n", psta->qos_info);
+			len += snprintf(page + len, count - len, "dot118021XPrivacy=0x%x\n", psta->dot118021XPrivacy);
+
+			for (j = 0; j < 16; j++) {
+				preorder_ctrl = &psta->recvreorder_ctrl[j];
+				if (preorder_ctrl->enable)
+					len += snprintf(page + len, count - len, "tid=%d, indicate_seq=%d\n", j, preorder_ctrl->indicate_seq);
 			}
-
 		}
-
 	}
-
 	spin_unlock_bh(&pstapriv->sta_hash_lock);
 
 	*eof = 1;
 	return len;
-
 }
 
 #endif
 
 #ifdef DBG_MEMORY_LEAK
-#include <asm/atomic.h>
-extern atomic_t _malloc_cnt;;
-extern atomic_t _malloc_size;;
+#include <linux/atomic.h>
+extern atomic_t _malloc_cnt;
+extern atomic_t _malloc_size;
 
 int proc_get_malloc_cnt(char *page, char **start,
 			  off_t offset, int count,
 			  int *eof, void *data)
 {
-
 	int len = 0;
 
 	len += snprintf(page + len, count - len, "_malloc_cnt=%d\n", atomic_read(&_malloc_cnt));
@@ -1139,54 +1066,51 @@ int proc_get_best_channel(char *page, ch
 	int len = 0;
 	u32 i, best_channel_24G = 1, best_channel_5G = 36, index_24G = 0, index_5G = 0;
 
-	for (i=0; pmlmeext->channel_set[i].ChannelNum !=0; i++) {
-		if ( pmlmeext->channel_set[i].ChannelNum == 1)
+	for (i = 0; pmlmeext->channel_set[i].ChannelNum != 0; i++) {
+		if (pmlmeext->channel_set[i].ChannelNum == 1)
 			index_24G = i;
-		if ( pmlmeext->channel_set[i].ChannelNum == 36)
+		if (pmlmeext->channel_set[i].ChannelNum == 36)
 			index_5G = i;
 	}
 
-	for (i=0; pmlmeext->channel_set[i].ChannelNum !=0; i++) {
-		// 2.4G
-		if ( pmlmeext->channel_set[i].ChannelNum == 6 ) {
-			if ( pmlmeext->channel_set[i].rx_count < pmlmeext->channel_set[index_24G].rx_count ) {
+	for (i = 0; pmlmeext->channel_set[i].ChannelNum != 0; i++) {
+		/*  2.4G */
+		if (pmlmeext->channel_set[i].ChannelNum == 6) {
+			if (pmlmeext->channel_set[i].rx_count < pmlmeext->channel_set[index_24G].rx_count) {
 				index_24G = i;
 				best_channel_24G = pmlmeext->channel_set[i].ChannelNum;
 			}
 		}
 
-		// 5G
-		if ( pmlmeext->channel_set[i].ChannelNum >= 36
-			&& pmlmeext->channel_set[i].ChannelNum < 140 ) {
-			 // Find primary channel
-			if ( (( pmlmeext->channel_set[i].ChannelNum - 36) % 8 == 0)
-				&& (pmlmeext->channel_set[i].rx_count < pmlmeext->channel_set[index_5G].rx_count) ) {
+		/*  5G */
+		if (pmlmeext->channel_set[i].ChannelNum >= 36 &&
+		    pmlmeext->channel_set[i].ChannelNum < 140) {
+			 /*  Find primary channel */
+			if (((pmlmeext->channel_set[i].ChannelNum - 36) % 8 == 0) &&
+			    (pmlmeext->channel_set[i].rx_count < pmlmeext->channel_set[index_5G].rx_count)) {
 				index_5G = i;
 				best_channel_5G = pmlmeext->channel_set[i].ChannelNum;
 			}
 		}
 
-		if ( pmlmeext->channel_set[i].ChannelNum >= 149
-			&& pmlmeext->channel_set[i].ChannelNum < 165) {
-			 // find primary channel
-			if ( (( pmlmeext->channel_set[i].ChannelNum - 149) % 8 == 0)
-				&& (pmlmeext->channel_set[i].rx_count < pmlmeext->channel_set[index_5G].rx_count) ) {
+		if (pmlmeext->channel_set[i].ChannelNum >= 149 &&
+		    pmlmeext->channel_set[i].ChannelNum < 165) {
+			 /*  find primary channel */
+			if (((pmlmeext->channel_set[i].ChannelNum - 149) % 8 == 0) &&
+			    (pmlmeext->channel_set[i].rx_count < pmlmeext->channel_set[index_5G].rx_count)) {
 				index_5G = i;
 				best_channel_5G = pmlmeext->channel_set[i].ChannelNum;
 			}
 		}
-#if 1 // debug
-		len += snprintf(page + len, count - len, "The rx cnt of channel %3d = %d\n",
+		len += snprintf(page + len, count - len, "The rx cnt of channel %3d=%d\n",
 					pmlmeext->channel_set[i].ChannelNum, pmlmeext->channel_set[i].rx_count);
-#endif
 	}
 
-	len += snprintf(page + len, count - len, "best_channel_5G = %d\n", best_channel_5G);
-	len += snprintf(page + len, count - len, "best_channel_24G = %d\n", best_channel_24G);
+	len += snprintf(page + len, count - len, "best_channel_5G=%d\n", best_channel_5G);
+	len += snprintf(page + len, count - len, "best_channel_24G=%d\n", best_channel_24G);
 
 	*eof = 1;
 	return len;
-
 }
 #endif /* CONFIG_FIND_BEST_CHANNEL */
 
