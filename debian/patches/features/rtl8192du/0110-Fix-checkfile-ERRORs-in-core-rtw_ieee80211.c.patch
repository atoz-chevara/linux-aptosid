From f5cbd439fc389fb79c7b468eb4932942b19bc2c9 Mon Sep 17 00:00:00 2001
From: Larry Finger <Larry.Finger@lwfinger.net>
Date: Fri, 3 May 2013 15:20:48 -0500
Subject: [PATCH 110/390] Fix checkfile ERRORs in core/rtw_ieee80211.c

Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
---
 core/rtw_ieee80211.c | 980 ++++++++++++++++++++++-----------------------------
 1 file changed, 420 insertions(+), 560 deletions(-)

--- a/drivers/staging/rtl8192du/core/rtw_ieee80211.c
+++ b/drivers/staging/rtl8192du/core/rtw_ieee80211.c
@@ -46,33 +46,37 @@ u8 RSN_CIPHER_SUITE_TKIP[] = { 0x00, 0x0
 u8 RSN_CIPHER_SUITE_WRAP[] = { 0x00, 0x0f, 0xac, 3 };
 u8 RSN_CIPHER_SUITE_CCMP[] = { 0x00, 0x0f, 0xac, 4 };
 u8 RSN_CIPHER_SUITE_WEP104[] = { 0x00, 0x0f, 0xac, 5 };
-//-----------------------------------------------------------
-// for adhoc-master to generate ie and provide supported-rate to fw
-//-----------------------------------------------------------
-
-static u8	WIFI_CCKRATES[] =
-{(IEEE80211_CCK_RATE_1MB | IEEE80211_BASIC_RATE_MASK),
- (IEEE80211_CCK_RATE_2MB | IEEE80211_BASIC_RATE_MASK),
- (IEEE80211_CCK_RATE_5MB | IEEE80211_BASIC_RATE_MASK),
- (IEEE80211_CCK_RATE_11MB | IEEE80211_BASIC_RATE_MASK)};
-
-static u8	WIFI_OFDMRATES[] =
-{(IEEE80211_OFDM_RATE_6MB),
- (IEEE80211_OFDM_RATE_9MB),
- (IEEE80211_OFDM_RATE_12MB),
- (IEEE80211_OFDM_RATE_18MB),
- (IEEE80211_OFDM_RATE_24MB),
- IEEE80211_OFDM_RATE_36MB,
- IEEE80211_OFDM_RATE_48MB,
- IEEE80211_OFDM_RATE_54MB};
+/*  */
+/*  for adhoc-master to generate ie and provide supported-rate to fw */
+/*  */
+
+static u8	WIFI_CCKRATES[] = {
+	(IEEE80211_CCK_RATE_1MB | IEEE80211_BASIC_RATE_MASK),
+	(IEEE80211_CCK_RATE_2MB | IEEE80211_BASIC_RATE_MASK),
+	(IEEE80211_CCK_RATE_5MB | IEEE80211_BASIC_RATE_MASK),
+	(IEEE80211_CCK_RATE_11MB | IEEE80211_BASIC_RATE_MASK)
+};
+
+static u8	WIFI_OFDMRATES[] = {
+	(IEEE80211_OFDM_RATE_6MB),
+	(IEEE80211_OFDM_RATE_9MB),
+	(IEEE80211_OFDM_RATE_12MB),
+	(IEEE80211_OFDM_RATE_18MB),
+	(IEEE80211_OFDM_RATE_24MB),
+	IEEE80211_OFDM_RATE_36MB,
+	IEEE80211_OFDM_RATE_48MB,
+	IEEE80211_OFDM_RATE_54MB
+};
 
 
 int rtw_get_bit_value_from_ieee_value(u8 val)
 {
-	unsigned char dot11_rate_table[]={2,4,11,22,12,18,24,36,48,72,96,108,0}; // last element must be zero!!
+	unsigned char dot11_rate_table[] = {
+		2, 4, 11, 22, 12, 18, 24, 36, 48, 72, 96, 108, 0
+	}; /*  last element must be zero!! */
 
-	int i=0;
-	while(dot11_rate_table[i] != 0) {
+	int i = 0;
+	while (dot11_rate_table[i] != 0) {
 		if (dot11_rate_table[i] == val)
 			return BIT(i);
 		i++;
@@ -82,17 +86,16 @@ int rtw_get_bit_value_from_ieee_value(u8
 
 uint	rtw_is_cckrates_included(u8 *rate)
 {
-		u32	i = 0;
+	u32	i = 0;
 
-		while(rate[i]!=0)
-		{
-			if  (  (((rate[i]) & 0x7f) == 2)	|| (((rate[i]) & 0x7f) == 4) ||
-			(((rate[i]) & 0x7f) == 11)  || (((rate[i]) & 0x7f) == 22) )
+	while (rate[i] != 0) {
+		if  ((((rate[i]) & 0x7f) == 2) || (((rate[i]) & 0x7f) == 4) ||
+		     (((rate[i]) & 0x7f) == 11) || (((rate[i]) & 0x7f) == 22))
 			return true;
-			i++;
-		}
+		i++;
+	}
 
-		return false;
+	return false;
 }
 
 uint	rtw_is_cckratesonly_included(u8 *rate)
@@ -100,14 +103,12 @@ uint	rtw_is_cckratesonly_included(u8 *ra
 	u32 i = 0;
 
 
-	while(rate[i]!=0)
-	{
-			if  (  (((rate[i]) & 0x7f) != 2) && (((rate[i]) & 0x7f) != 4) &&
-				(((rate[i]) & 0x7f) != 11)  && (((rate[i]) & 0x7f) != 22) )
-
-			return false;
+	while (rate[i] != 0) {
+		if ((((rate[i]) & 0x7f) != 2) && (((rate[i]) & 0x7f) != 4) &&
+		    (((rate[i]) & 0x7f) != 11)  && (((rate[i]) & 0x7f) != 22))
+		return false;
 
-			i++;
+		i++;
 	}
 
 	return true;
@@ -116,18 +117,15 @@ uint	rtw_is_cckratesonly_included(u8 *ra
 
 int rtw_check_network_type(unsigned char *rate, int ratelen, int channel)
 {
-	if (channel > 14)
-	{
+	if (channel > 14) {
 		if ((rtw_is_cckrates_included(rate)) == true)
 			return WIRELESS_INVALID;
 		else
 			return WIRELESS_11A;
-	}
-	else  // could be pure B, pure G, or B/G
-	{
+	} else {  /*  could be pure B, pure G, or B/G */
 		if ((rtw_is_cckratesonly_included(rate)) == true)
 			return WIRELESS_11B;
-		else if((rtw_is_cckrates_included(rate)) == true)
+		else if ((rtw_is_cckrates_included(rate)) == true)
 			return	WIRELESS_11BG;
 		else
 			return WIRELESS_11G;
@@ -140,17 +138,17 @@ u8 *rtw_set_fixed_ie(unsigned char *pbuf
 {
 	_rtw_memcpy((void *)pbuf, (void *)source, len);
 	*frlen = *frlen + len;
-	return (pbuf + len);
+	return pbuf + len;
 }
 
-// rtw_set_ie will update frame length
+/*  rtw_set_ie will update frame length */
 u8 *rtw_set_ie
 (
 	u8 *pbuf,
 	int index,
 	uint len,
 	u8 *source,
-	uint *frlen //frame length
+	uint *frlen /* frame length */
 )
 {
 _func_enter_;
@@ -163,12 +161,12 @@ _func_enter_;
 
 	*frlen = *frlen + (len + 2);
 
-	return (pbuf + len + 2);
+	return pbuf + len + 2;
 _func_exit_;
 }
 
 inline u8 *rtw_set_ie_ch_switch(u8 *buf, u32 *buf_len, u8 ch_switch_mode,
-	u8 new_ch, u8 ch_switch_cnt)
+				u8 new_ch, u8 ch_switch_cnt)
 {
 	u8 ie_data[3];
 
@@ -182,9 +180,9 @@ inline u8 secondary_ch_offset_to_hal_ch_
 {
 	if (ch_offset == SCN)
 		return HAL_PRIME_CHNL_OFFSET_DONT_CARE;
-	else if(ch_offset == SCA)
+	else if (ch_offset == SCA)
 		return HAL_PRIME_CHNL_OFFSET_UPPER;
-	else if(ch_offset == SCB)
+	else if (ch_offset == SCB)
 		return HAL_PRIME_CHNL_OFFSET_LOWER;
 
 	return HAL_PRIME_CHNL_OFFSET_DONT_CARE;
@@ -194,9 +192,9 @@ inline u8 hal_ch_offset_to_secondary_ch_
 {
 	if (ch_offset == HAL_PRIME_CHNL_OFFSET_DONT_CARE)
 		return SCN;
-	else if(ch_offset == HAL_PRIME_CHNL_OFFSET_LOWER)
+	else if (ch_offset == HAL_PRIME_CHNL_OFFSET_LOWER)
 		return SCB;
-	else if(ch_offset == HAL_PRIME_CHNL_OFFSET_UPPER)
+	else if (ch_offset == HAL_PRIME_CHNL_OFFSET_UPPER)
 		return SCA;
 
 	return SCN;
@@ -214,8 +212,8 @@ inline u8 *rtw_set_ie_mesh_ch_switch_par
 
 	ie_data[0] = ttl;
 	ie_data[1] = flags;
-	RTW_PUT_LE16((u8*)&ie_data[2], reason);
-	RTW_PUT_LE16((u8*)&ie_data[4], precedence);
+	RTW_PUT_LE16((u8 *)&ie_data[2], reason);
+	RTW_PUT_LE16((u8 *)&ie_data[4], precedence);
 
 	return rtw_set_ie(buf, 0x118,  6, ie_data, buf_len);
 }
@@ -225,10 +223,10 @@ index: the information element id index,
 -----------------------------------------------------------------------------*/
 u8 *rtw_get_ie(u8 *pbuf, int index, int *len, int limit)
 {
-	int tmp,i;
+	int tmp, i;
 	u8 *p;
 _func_enter_;
-	if (limit < 1){
+	if (limit < 1) {
 		_func_exit_;
 		return NULL;
 	}
@@ -236,15 +234,11 @@ _func_enter_;
 	p = pbuf;
 	i = 0;
 	*len = 0;
-	while(1)
-	{
-		if (*p == index)
-		{
+	while (1) {
+		if (*p == index) {
 			*len = *(p + 1);
-			return (p);
-		}
-		else
-		{
+			return p;
+		} else {
 			tmp = *(p + 1);
 			p += (tmp + 2);
 			i += (tmp + 2);
@@ -274,32 +268,28 @@ u8 *rtw_get_ie_ex(u8 *in_ie, uint in_len
 	u8 *target_ie = NULL;
 
 
-	if(ielen)
+	if (ielen)
 		*ielen = 0;
 
-	if(!in_ie || in_len<=0)
+	if (!in_ie || in_len <= 0)
 		return target_ie;
 
 	cnt = 0;
 
-	while(cnt<in_len)
-	{
-		if(eid == in_ie[cnt]
-			&& ( !oui || _rtw_memcmp(&in_ie[cnt+2], oui, oui_len) == true))
-		{
+	while (cnt < in_len) {
+		if (eid == in_ie[cnt] && (!oui ||
+		    _rtw_memcmp(&in_ie[cnt+2], oui, oui_len) == true)) {
 			target_ie = &in_ie[cnt];
 
-			if(ie)
+			if (ie)
 				_rtw_memcpy(ie, &in_ie[cnt], in_ie[cnt+1]+2);
 
-			if(ielen)
+			if (ielen)
 				*ielen = in_ie[cnt+1]+2;
 
 			break;
-		}
-		else
-		{
-			cnt+=in_ie[cnt+1]+2; //goto next
+		} else {
+			cnt += in_ie[cnt+1]+2; /* goto next */
 		}
 
 	}
@@ -326,7 +316,7 @@ int rtw_ies_remove_ie(u8 *ies, uint *ies
 	u8 *start;
 	uint search_len;
 
-	if(!ies || !ies_len || *ies_len <= offset)
+	if (!ies || !ies_len || *ies_len <= offset)
 		goto exit;
 
 	start = ies + offset;
@@ -354,33 +344,29 @@ exit:
 	return ret;
 }
 
-void rtw_set_supported_rate(u8* SupportedRates, uint mode)
+void rtw_set_supported_rate(u8 *SupportedRates, uint mode)
 {
 _func_enter_;
 
 	_rtw_memset(SupportedRates, 0, NDIS_802_11_LENGTH_RATES_EX);
 
-	switch (mode)
-	{
-		case WIRELESS_11B:
-			_rtw_memcpy(SupportedRates, WIFI_CCKRATES, IEEE80211_CCK_RATE_LEN);
-			break;
-
-		case WIRELESS_11G:
-		case WIRELESS_11A:
-		case WIRELESS_11_5N:
-		case WIRELESS_11A_5N://Todo: no basic rate for ofdm ?
-			_rtw_memcpy(SupportedRates, WIFI_OFDMRATES, IEEE80211_NUM_OFDM_RATESLEN);
-			break;
-
-		case WIRELESS_11BG:
-		case WIRELESS_11G_24N:
-		case WIRELESS_11_24N:
-		case WIRELESS_11BG_24N:
-			_rtw_memcpy(SupportedRates, WIFI_CCKRATES, IEEE80211_CCK_RATE_LEN);
-			_rtw_memcpy(SupportedRates + IEEE80211_CCK_RATE_LEN, WIFI_OFDMRATES, IEEE80211_NUM_OFDM_RATESLEN);
-			break;
-
+	switch (mode) {
+	case WIRELESS_11B:
+		_rtw_memcpy(SupportedRates, WIFI_CCKRATES, IEEE80211_CCK_RATE_LEN);
+		break;
+	case WIRELESS_11G:
+	case WIRELESS_11A:
+	case WIRELESS_11_5N:
+	case WIRELESS_11A_5N:/* Todo: no basic rate for ofdm ? */
+		_rtw_memcpy(SupportedRates, WIFI_OFDMRATES, IEEE80211_NUM_OFDM_RATESLEN);
+		break;
+	case WIRELESS_11BG:
+	case WIRELESS_11G_24N:
+	case WIRELESS_11_24N:
+	case WIRELESS_11BG_24N:
+		_rtw_memcpy(SupportedRates, WIFI_CCKRATES, IEEE80211_CCK_RATE_LEN);
+		_rtw_memcpy(SupportedRates + IEEE80211_CCK_RATE_LEN, WIFI_OFDMRATES, IEEE80211_NUM_OFDM_RATESLEN);
+		break;
 	}
 _func_exit_;
 }
@@ -389,8 +375,7 @@ uint	rtw_get_rateset_len(u8	*rateset)
 {
 	uint i = 0;
 _func_enter_;
-	while(1)
-	{
+	while (1) {
 		if ((rateset[i]) == 0)
 			break;
 
@@ -406,91 +391,80 @@ _func_exit_;
 int rtw_generate_ie(struct registry_priv *pregistrypriv)
 {
 	u8	wireless_mode;
-	int	sz = 0, rateLen;
-	struct wlan_bssid_ex*	pdev_network = &pregistrypriv->dev_network;
-	u8*	ie = pdev_network->IEs;
+	int	sz = 0, rate_len;
+	struct wlan_bssid_ex *pdev_network = &pregistrypriv->dev_network;
+	u8 *ie = pdev_network->IEs;
 
 _func_enter_;
 
-	//timestamp will be inserted by hardware
+	/* timestamp will be inserted by hardware */
 	sz += 8;
 	ie += sz;
 
-	//beacon interval : 2bytes
-	*(u16*)ie = cpu_to_le16((u16)pdev_network->Configuration.BeaconPeriod);//BCN_INTERVAL;
+	/* beacon interval : 2bytes */
+	*(u16 *)ie = cpu_to_le16((u16)pdev_network->Configuration.BeaconPeriod);/* BCN_INTERVAL; */
 	sz += 2;
 	ie += 2;
 
-	//capability info
-	*(u16*)ie = 0;
+	/* capability info */
+	*(u16 *)ie = 0;
 
-	*(u16*)ie |= cpu_to_le16(cap_IBSS);
+	*(u16 *)ie |= cpu_to_le16(cap_IBSS);
 
-	if(pregistrypriv->preamble == PREAMBLE_SHORT)
-		*(u16*)ie |= cpu_to_le16(cap_ShortPremble);
+	if (pregistrypriv->preamble == PREAMBLE_SHORT)
+		*(u16 *)ie |= cpu_to_le16(cap_ShortPremble);
 
 	if (pdev_network->Privacy)
-		*(u16*)ie |= cpu_to_le16(cap_Privacy);
+		*(u16 *)ie |= cpu_to_le16(cap_Privacy);
 
 	sz += 2;
 	ie += 2;
 
-	//SSID
+	/* SSID */
 	ie = rtw_set_ie(ie, _SSID_IE_, pdev_network->Ssid.SsidLength, pdev_network->Ssid.Ssid, &sz);
 
-	//supported rates
-	if(pregistrypriv->wireless_mode == WIRELESS_11ABGN)
-	{
-		if(pdev_network->Configuration.DSConfig > 14)
+	/* supported rates */
+	if (pregistrypriv->wireless_mode == WIRELESS_11ABGN) {
+		if (pdev_network->Configuration.DSConfig > 14)
 			wireless_mode = WIRELESS_11A_5N;
 		else
 			wireless_mode = WIRELESS_11BG_24N;
-	}
-	else
-	{
+	} else {
 		wireless_mode = pregistrypriv->wireless_mode;
 	}
 
 	rtw_set_supported_rate(pdev_network->SupportedRates, wireless_mode) ;
 
-	rateLen = rtw_get_rateset_len(pdev_network->SupportedRates);
+	rate_len = rtw_get_rateset_len(pdev_network->SupportedRates);
 
-	if (rateLen > 8)
-	{
+	if (rate_len > 8)
 		ie = rtw_set_ie(ie, _SUPPORTEDRATES_IE_, 8, pdev_network->SupportedRates, &sz);
-		//ie = rtw_set_ie(ie, _EXT_SUPPORTEDRATES_IE_, (rateLen - 8), (pdev_network->SupportedRates + 8), &sz);
-	}
 	else
-	{
-		ie = rtw_set_ie(ie, _SUPPORTEDRATES_IE_, rateLen, pdev_network->SupportedRates, &sz);
-	}
+		ie = rtw_set_ie(ie, _SUPPORTEDRATES_IE_, rate_len, pdev_network->SupportedRates, &sz);
 
-	//DS parameter set
+	/* DS parameter set */
 	ie = rtw_set_ie(ie, _DSSET_IE_, 1, (u8 *)&(pdev_network->Configuration.DSConfig), &sz);
 
 
-	//IBSS Parameter Set
+	/* IBSS Parameter Set */
 
 	ie = rtw_set_ie(ie, _IBSS_PARA_IE_, 2, (u8 *)&(pdev_network->Configuration.ATIMWindow), &sz);
 
-	if (rateLen > 8)
-	{
-		ie = rtw_set_ie(ie, _EXT_SUPPORTEDRATES_IE_, (rateLen - 8), (pdev_network->SupportedRates + 8), &sz);
-	}
+	if (rate_len > 8)
+		ie = rtw_set_ie(ie, _EXT_SUPPORTEDRATES_IE_, (rate_len - 8), (pdev_network->SupportedRates + 8), &sz);
 
 
-	//HT Cap.
-	if(((pregistrypriv->wireless_mode&WIRELESS_11_5N)||(pregistrypriv->wireless_mode&WIRELESS_11_24N))
-		&& (pregistrypriv->ht_enable==true))
-	{
-		//todo:
+	/* HT Cap. */
+	if (((pregistrypriv->wireless_mode&WIRELESS_11_5N) ||
+	    (pregistrypriv->wireless_mode&WIRELESS_11_24N)) &&
+	    (pregistrypriv->ht_enable == true)) {
+		/* todo: */
 	}
 
-	//pdev_network->IELength =  sz; //update IELength
 
 _func_exit_;
 
-	//return _SUCCESS;
+	/* return _SUCCESS; */
 
 	return sz;
 
@@ -503,19 +477,16 @@ unsigned char *rtw_get_wpa_ie(unsigned c
 	unsigned char wpa_oui_type[] = {0x00, 0x50, 0xf2, 0x01};
 	u8 *pbuf = pie;
 
-	while(1)
-	{
+	while (1) {
 		pbuf = rtw_get_ie(pbuf, _WPA_IE_ID_, &len, limit);
 
 		if (pbuf) {
 
-			//check if oui matches...
-			if (_rtw_memcmp((pbuf + 2), wpa_oui_type, sizeof (wpa_oui_type)) == false) {
-
+			/* check if oui matches... */
+			if (_rtw_memcmp((pbuf + 2), wpa_oui_type, sizeof(wpa_oui_type)) == false)
 				goto check_next_ie;
-			}
 
-			//check version...
+			/* check version... */
 			_rtw_memcpy((u8 *)&val16, (pbuf + 6), sizeof(val16));
 
 			val16 = le16_to_cpu(val16);
@@ -525,8 +496,7 @@ unsigned char *rtw_get_wpa_ie(unsigned c
 			*wpa_ie_len = *(pbuf + 1);
 
 			return pbuf;
-		}
-		else {
+		} else {
 
 			*wpa_ie_len = 0;
 			return NULL;
@@ -550,7 +520,7 @@ check_next_ie:
 unsigned char *rtw_get_wpa2_ie(unsigned char *pie, int *rsn_ie_len, int limit)
 {
 
-	return rtw_get_ie(pie, _WPA2_IE_ID_,rsn_ie_len, limit);
+	return rtw_get_ie(pie, _WPA2_IE_ID_, rsn_ie_len, limit);
 
 }
 
@@ -587,9 +557,9 @@ int rtw_get_wpa2_cipher_suite(u8 *s)
 }
 
 
-int rtw_parse_wpa_ie(u8* wpa_ie, int wpa_ie_len, int *group_cipher, int *pairwise_cipher)
+int rtw_parse_wpa_ie(u8 *wpa_ie, int wpa_ie_len, int *group_cipher, int *pairwise_cipher)
 {
-	int i, ret=_SUCCESS;
+	int i, ret = _SUCCESS;
 	int left, count;
 	u8 *pos;
 
@@ -600,10 +570,8 @@ int rtw_parse_wpa_ie(u8* wpa_ie, int wpa
 
 
 	if ((*wpa_ie != _WPA_IE_ID_) || (*(wpa_ie+1) != (u8)(wpa_ie_len - 2)) ||
-	   (_rtw_memcmp(wpa_ie+2, RTW_WPA_OUI_TYPE, WPA_SELECTOR_LEN) != true) )
-	{
+	    (_rtw_memcmp(wpa_ie+2, RTW_WPA_OUI_TYPE, WPA_SELECTOR_LEN) != true))
 		return _FAIL;
-	}
 
 	pos = wpa_ie;
 
@@ -611,7 +579,7 @@ int rtw_parse_wpa_ie(u8* wpa_ie, int wpa
 	left = wpa_ie_len - 8;
 
 
-	//group_cipher
+	/* group_cipher */
 	if (left >= WPA_SELECTOR_LEN) {
 
 		*group_cipher = rtw_get_wpa_cipher_suite(pos);
@@ -619,41 +587,36 @@ int rtw_parse_wpa_ie(u8* wpa_ie, int wpa
 		pos += WPA_SELECTOR_LEN;
 		left -= WPA_SELECTOR_LEN;
 
-	}
-	else if (left > 0)
-	{
-		RT_TRACE(_module_rtl871x_mlme_c_,_drv_err_,("%s: ie length mismatch, %u too much", __FUNCTION__, left));
+	} else if (left > 0) {
+		RT_TRACE(_module_rtl871x_mlme_c_, _drv_err_, ("%s: ie length mismatch, %u too much", __func__, left));
 
 		return _FAIL;
 	}
 
 
-	//pairwise_cipher
-	if (left >= 2)
-	{
-                //count = le16_to_cpu(*(u16*)pos);
+	/* pairwise_cipher */
+	if (left >= 2) {
+		/* count = le16_to_cpu(*(u16 *)pos); */
 		count = RTW_GET_LE16(pos);
 		pos += 2;
 		left -= 2;
 
 		if (count == 0 || left < count * WPA_SELECTOR_LEN) {
-			RT_TRACE(_module_rtl871x_mlme_c_,_drv_err_,("%s: ie count botch (pairwise), "
-						"count %u left %u", __FUNCTION__, count, left));
+			RT_TRACE(_module_rtl871x_mlme_c_, _drv_err_,
+				 ("%s: ie count botch (pairwise), count %u left %u",
+				 __func__, count, left));
 			return _FAIL;
 		}
 
-		for (i = 0; i < count; i++)
-		{
+		for (i = 0; i < count; i++) {
 			*pairwise_cipher |= rtw_get_wpa_cipher_suite(pos);
 
 			pos += WPA_SELECTOR_LEN;
 			left -= WPA_SELECTOR_LEN;
 		}
 
-	}
-	else if (left == 1)
-	{
-		RT_TRACE(_module_rtl871x_mlme_c_,_drv_err_,("%s: ie too short (for key mgmt)",   __FUNCTION__));
+	} else if (left == 1) {
+		RT_TRACE(_module_rtl871x_mlme_c_, _drv_err_, ("%s: ie too short (for key mgmt)",   __func__));
 		return _FAIL;
 	}
 
@@ -662,9 +625,9 @@ int rtw_parse_wpa_ie(u8* wpa_ie, int wpa
 
 }
 
-int rtw_parse_wpa2_ie(u8* rsn_ie, int rsn_ie_len, int *group_cipher, int *pairwise_cipher)
+int rtw_parse_wpa2_ie(u8 *rsn_ie, int rsn_ie_len, int *group_cipher, int *pairwise_cipher)
 {
-	int i, ret=_SUCCESS;
+	int i, ret = _SUCCESS;
 	int left, count;
 	u8 *pos;
 
@@ -674,16 +637,15 @@ int rtw_parse_wpa2_ie(u8* rsn_ie, int rs
 	}
 
 
-	if ((*rsn_ie!= _WPA2_IE_ID_) || (*(rsn_ie+1) != (u8)(rsn_ie_len - 2)))
-	{
+	if ((*rsn_ie != _WPA2_IE_ID_) ||
+	    (*(rsn_ie+1) != (u8)(rsn_ie_len - 2)))
 		return _FAIL;
-	}
 
 	pos = rsn_ie;
 	pos += 4;
 	left = rsn_ie_len - 4;
 
-	//group_cipher
+	/* group_cipher */
 	if (left >= RSN_SELECTOR_LEN) {
 
 		*group_cipher = rtw_get_wpa2_cipher_suite(pos);
@@ -692,36 +654,31 @@ int rtw_parse_wpa2_ie(u8* rsn_ie, int rs
 		left -= RSN_SELECTOR_LEN;
 
 	} else if (left > 0) {
-		RT_TRACE(_module_rtl871x_mlme_c_,_drv_err_,("%s: ie length mismatch, %u too much", __FUNCTION__, left));
+		RT_TRACE(_module_rtl871x_mlme_c_, _drv_err_, ("%s: ie length mismatch, %u too much", __func__, left));
 		return _FAIL;
 	}
 
-	//pairwise_cipher
-	if (left >= 2)
-	{
-	        //count = le16_to_cpu(*(u16*)pos);
+	/* pairwise_cipher */
+	if (left >= 2) {
 		count = RTW_GET_LE16(pos);
 		pos += 2;
 		left -= 2;
 
 		if (count == 0 || left < count * RSN_SELECTOR_LEN) {
-			RT_TRACE(_module_rtl871x_mlme_c_,_drv_err_,("%s: ie count botch (pairwise), "
-						 "count %u left %u", __FUNCTION__, count, left));
+			RT_TRACE(_module_rtl871x_mlme_c_, _drv_err_, ("%s: ie count botch (pairwise), "
+						 "count %u left %u", __func__, count, left));
 			return _FAIL;
 		}
 
-		for (i = 0; i < count; i++)
-		{
+		for (i = 0; i < count; i++) {
 			*pairwise_cipher |= rtw_get_wpa2_cipher_suite(pos);
 
 			pos += RSN_SELECTOR_LEN;
 			left -= RSN_SELECTOR_LEN;
 		}
 
-	}
-	else if (left == 1)
-	{
-		RT_TRACE(_module_rtl871x_mlme_c_,_drv_err_,("%s: ie too short (for key mgmt)",  __FUNCTION__));
+	} else if (left == 1) {
+		RT_TRACE(_module_rtl871x_mlme_c_, _drv_err_, ("%s: ie too short (for key mgmt)",  __func__));
 
 		return _FAIL;
 	}
@@ -731,55 +688,63 @@ int rtw_parse_wpa2_ie(u8* rsn_ie, int rs
 
 }
 
-int rtw_get_sec_ie(u8 *in_ie,uint in_len,u8 *rsn_ie,u16 *rsn_len,u8 *wpa_ie,u16 *wpa_len)
+int rtw_get_sec_ie(u8 *in_ie, uint in_len, u8 *rsn_ie, u16 *rsn_len, u8 *wpa_ie, u16 *wpa_len)
 {
 	u8 authmode, sec_idx, i;
-	u8 wpa_oui[4]={0x0,0x50,0xf2,0x01};
+	u8 wpa_oui[4] = {0x0, 0x50, 0xf2, 0x01};
 	uint	cnt;
 
 _func_enter_;
 
-	//Search required WPA or WPA2 IE and copy to sec_ie[ ]
+	/* Search required WPA or WPA2 IE and copy to sec_ie[] */
 
 	cnt = (_TIMESTAMP_ + _BEACON_ITERVAL_ + _CAPABILITY_);
 
-	sec_idx=0;
-
-	while(cnt<in_len)
-	{
-		authmode=in_ie[cnt];
-
-		if((authmode==_WPA_IE_ID_)&&(_rtw_memcmp(&in_ie[cnt+2], &wpa_oui[0],4)==true))
-		{
-				RT_TRACE(_module_rtl871x_mlme_c_,_drv_info_,("\n rtw_get_wpa_ie: sec_idx=%d in_ie[cnt+1]+2=%d\n",sec_idx,in_ie[cnt+1]+2));
+	sec_idx = 0;
 
-				_rtw_memcpy(wpa_ie, &in_ie[cnt],in_ie[cnt+1]+2);
+	while (cnt < in_len) {
+		authmode = in_ie[cnt];
 
-				for(i=0;i<(in_ie[cnt+1]+2);i=i+8){
-					RT_TRACE(_module_rtl871x_mlme_c_,_drv_info_,("\n %2x,%2x,%2x,%2x,%2x,%2x,%2x,%2x\n",wpa_ie[i],wpa_ie[i+1],wpa_ie[i+2],wpa_ie[i+3],wpa_ie[i+4],wpa_ie[i+5],wpa_ie[i+6],wpa_ie[i+7]));
+		if ((authmode == _WPA_IE_ID_) &&
+		    (_rtw_memcmp(&in_ie[cnt+2], &wpa_oui[0], 4) == true)) {
+				RT_TRACE(_module_rtl871x_mlme_c_, _drv_info_,
+					 ("\n rtw_get_wpa_ie: sec_idx =%d in_ie[cnt+1]+2 =%d\n",
+					 sec_idx, in_ie[cnt+1]+2));
+
+				_rtw_memcpy(wpa_ie, &in_ie[cnt], in_ie[cnt+1]+2);
+
+				for (i = 0; i < (in_ie[cnt+1]+2); i = i+8) {
+					RT_TRACE(_module_rtl871x_mlme_c_, _drv_info_,
+						 ("\n %2x,%2x,%2x,%2x,%2x,%2x,%2x,%2x\n",
+						 wpa_ie[i], wpa_ie[i+1],
+						 wpa_ie[i+2], wpa_ie[i+3],
+						 wpa_ie[i+4], wpa_ie[i+5],
+						 wpa_ie[i+6], wpa_ie[i+7]));
 				}
 
-				*wpa_len=in_ie[cnt+1]+2;
-				cnt+=in_ie[cnt+1]+2;  //get next
-		}
-		else
-		{
-			if(authmode==_WPA2_IE_ID_)
-			{
-				RT_TRACE(_module_rtl871x_mlme_c_,_drv_info_,("\n get_rsn_ie: sec_idx=%d in_ie[cnt+1]+2=%d\n",sec_idx,in_ie[cnt+1]+2));
-
-				_rtw_memcpy(rsn_ie, &in_ie[cnt],in_ie[cnt+1]+2);
-
-				for(i=0;i<(in_ie[cnt+1]+2);i=i+8){
-					RT_TRACE(_module_rtl871x_mlme_c_,_drv_info_,("\n %2x,%2x,%2x,%2x,%2x,%2x,%2x,%2x\n",rsn_ie[i],rsn_ie[i+1],rsn_ie[i+2],rsn_ie[i+3],rsn_ie[i+4],rsn_ie[i+5],rsn_ie[i+6],rsn_ie[i+7]));
+				*wpa_len = in_ie[cnt+1]+2;
+				cnt += in_ie[cnt+1]+2;  /* get next */
+		} else {
+			if (authmode == _WPA2_IE_ID_) {
+				RT_TRACE(_module_rtl871x_mlme_c_, _drv_info_,
+					 ("\n get_rsn_ie: sec_idx =%d in_ie[cnt+1]+2 =%d\n",
+					 sec_idx, in_ie[cnt+1]+2));
+
+				_rtw_memcpy(rsn_ie, &in_ie[cnt], in_ie[cnt+1]+2);
+
+				for (i = 0; i < (in_ie[cnt+1]+2); i = i+8) {
+					RT_TRACE(_module_rtl871x_mlme_c_, _drv_info_,
+						 ("\n %2x,%2x,%2x,%2x,%2x,%2x,%2x,%2x\n",
+						 rsn_ie[i], rsn_ie[i+1],
+						 rsn_ie[i+2], rsn_ie[i+3],
+						 rsn_ie[i+4], rsn_ie[i+5],
+						 rsn_ie[i+6], rsn_ie[i+7]));
 				}
 
-				*rsn_len=in_ie[cnt+1]+2;
-				cnt+=in_ie[cnt+1]+2;  //get next
-			}
-			else
-			{
-				cnt+=in_ie[cnt+1]+2;   //get next
+				*rsn_len = in_ie[cnt+1]+2;
+				cnt += in_ie[cnt+1]+2;  /* get next */
+			} else {
+				cnt += in_ie[cnt+1]+2;   /* get next */
 			}
 		}
 
@@ -787,24 +752,23 @@ _func_enter_;
 
 _func_exit_;
 
-	return (*rsn_len+*wpa_len);
+	return *rsn_len + *wpa_len;
 
 }
 
 u8 rtw_is_wps_ie(u8 *ie_ptr, uint *wps_ielen)
 {
 	u8 match = false;
-	u8 eid, wps_oui[4]={0x0,0x50,0xf2,0x04};
+	u8 eid, wps_oui[4] = {0x0, 0x50, 0xf2, 0x04};
 
-	if(ie_ptr == NULL) return match;
+	if (ie_ptr == NULL)
+		return match;
 
 	eid = ie_ptr[0];
 
-	if((eid==_WPA_IE_ID_)&&(_rtw_memcmp(&ie_ptr[2], wps_oui, 4)==true))
-	{
-		//printk("==> found WPS_IE.....\n");
+	if ((eid == _WPA_IE_ID_) && (_rtw_memcmp(&ie_ptr[2], wps_oui, 4) == true)) {
 		*wps_ielen = ie_ptr[1]+2;
-		match=true;
+		match = true;
 	}
 	return match;
 }
@@ -821,38 +785,35 @@ u8 rtw_is_wps_ie(u8 *ie_ptr, uint *wps_i
 u8 *rtw_get_wps_ie(u8 *in_ie, uint in_len, u8 *wps_ie, uint *wps_ielen)
 {
 	uint cnt;
-	u8 *wpsie_ptr=NULL;
-	u8 eid, wps_oui[4]={0x0,0x50,0xf2,0x04};
+	u8 *wpsie_ptr = NULL;
+	u8 eid, wps_oui[4] = {0x0, 0x50, 0xf2, 0x04};
 
-	if(wps_ielen)
+	if (wps_ielen)
 		*wps_ielen = 0;
 
-	if(!in_ie || in_len<=0)
+	if (!in_ie || in_len <= 0)
 		return wpsie_ptr;
 
 	cnt = 0;
 
-	while(cnt<in_len)
-	{
+	while (cnt < in_len) {
 		eid = in_ie[cnt];
 
-		if((eid==_WPA_IE_ID_)&&(_rtw_memcmp(&in_ie[cnt+2], wps_oui, 4)==true))
-		{
+		if ((eid == _WPA_IE_ID_) &&
+		    (_rtw_memcmp(&in_ie[cnt+2], wps_oui, 4) == true)) {
 			wpsie_ptr = &in_ie[cnt];
 
-			if(wps_ie)
+			if (wps_ie)
 				_rtw_memcpy(wps_ie, &in_ie[cnt], in_ie[cnt+1]+2);
 
-			if(wps_ielen)
+			if (wps_ielen)
 				*wps_ielen = in_ie[cnt+1]+2;
 
-			cnt+=in_ie[cnt+1]+2;
+			cnt += in_ie[cnt+1]+2;
 
 			break;
-		}
-		else
-		{
-			cnt+=in_ie[cnt+1]+2; //goto next
+		} else {
+			cnt += in_ie[cnt+1]+2; /* goto next */
 		}
 
 	}
@@ -870,47 +831,40 @@ u8 *rtw_get_wps_ie(u8 *in_ie, uint in_le
  *
  * Returns: the address of the specific WPS attribute found, or NULL
  */
-u8 *rtw_get_wps_attr(u8 *wps_ie, uint wps_ielen, u16 target_attr_id ,u8 *buf_attr, u32 *len_attr)
+u8 *rtw_get_wps_attr(u8 *wps_ie, uint wps_ielen, u16 target_attr_id, u8 *buf_attr, u32 *len_attr)
 {
 	u8 *attr_ptr = NULL;
-	u8 * target_attr_ptr = NULL;
-	u8 wps_oui[4]={0x00,0x50,0xF2,0x04};
+	u8 *target_attr_ptr = NULL;
+	u8 wps_oui[4] = {0x00, 0x50, 0xF2, 0x04};
 
-	if(len_attr)
+	if (len_attr)
 		*len_attr = 0;
 
-	if ( ( wps_ie[0] != _VENDOR_SPECIFIC_IE_ ) ||
-		( _rtw_memcmp( wps_ie + 2, wps_oui , 4 ) != true ) )
-	{
+	if ((wps_ie[0] != _VENDOR_SPECIFIC_IE_) ||
+	    (_rtw_memcmp(wps_ie + 2, wps_oui, 4) != true))
 		return attr_ptr;
-	}
 
-	// 6 = 1(Element ID) + 1(Length) + 4(WPS OUI)
-	attr_ptr = wps_ie + 6; //goto first attr
+	/*  6 = 1(Element ID) + 1(Length) + 4(WPS OUI) */
+	attr_ptr = wps_ie + 6; /* goto first attr */
 
-	while(attr_ptr - wps_ie < wps_ielen)
-	{
-		// 4 = 2(Attribute ID) + 2(Length)
+	while (attr_ptr - wps_ie < wps_ielen) {
+		/*  4 = 2(Attribute ID) + 2(Length) */
 		u16 attr_id = RTW_GET_BE16(attr_ptr);
 		u16 attr_data_len = RTW_GET_BE16(attr_ptr + 2);
 		u16 attr_len = attr_data_len + 4;
 
-		//DBG_8192D("%s attr_ptr:%p, id:%u, length:%u\n", __FUNCTION__, attr_ptr, attr_id, attr_data_len);
-		if( attr_id == target_attr_id )
-		{
+		if (attr_id == target_attr_id) {
 			target_attr_ptr = attr_ptr;
 
-			if(buf_attr)
+			if (buf_attr)
 				_rtw_memcpy(buf_attr, attr_ptr, attr_len);
 
-			if(len_attr)
+			if (len_attr)
 				*len_attr = attr_len;
 
 			break;
-		}
-		else
-		{
-			attr_ptr += attr_len; //goto next
+		} else {
+			attr_ptr += attr_len; /* goto next */
 		}
 
 	}
@@ -928,22 +882,21 @@ u8 *rtw_get_wps_attr(u8 *wps_ie, uint wp
  *
  * Returns: the address of the specific WPS attribute content found, or NULL
  */
-u8 *rtw_get_wps_attr_content(u8 *wps_ie, uint wps_ielen, u16 target_attr_id ,u8 *buf_content, uint *len_content)
+u8 *rtw_get_wps_attr_content(u8 *wps_ie, uint wps_ielen, u16 target_attr_id, u8 *buf_content, uint *len_content)
 {
 	u8 *attr_ptr;
 	u32 attr_len;
 
-	if(len_content)
+	if (len_content)
 		*len_content = 0;
 
 	attr_ptr = rtw_get_wps_attr(wps_ie, wps_ielen, target_attr_id, NULL, &attr_len);
 
-	if(attr_ptr && attr_len)
-	{
-		if(buf_content)
+	if (attr_ptr && attr_len) {
+		if (buf_content)
 			_rtw_memcpy(buf_content, attr_ptr+4, attr_len-4);
 
-		if(len_content)
+		if (len_content)
 			*len_content = attr_len-4;
 
 		return attr_ptr+4;
@@ -963,8 +916,7 @@ static int rtw_ieee802_11_parse_vendor_s
 	 * sub-type. */
 	if (elen < 4) {
 		if (show_errors) {
-			DBG_8192D("short vendor specific "
-				   "information element ignored (len=%lu)\n",
+			DBG_8192D("short vendor specific information element ignored (len =%lu)\n",
 				   (unsigned long) elen);
 		}
 		return -1;
@@ -984,9 +936,7 @@ static int rtw_ieee802_11_parse_vendor_s
 			break;
 		case WME_OUI_TYPE: /* this is a Wi-Fi WME info. element */
 			if (elen < 5) {
-				DBG_8192D("short WME "
-					   "information element ignored "
-					   "(len=%lu)\n",
+				DBG_8192D("short WME information element ignored (len =%lu)\n",
 					   (unsigned long) elen);
 				return -1;
 			}
@@ -1001,9 +951,7 @@ static int rtw_ieee802_11_parse_vendor_s
 				elems->wme_tspec_len = elen;
 				break;
 			default:
-				DBG_8192D("unknown WME "
-					   "information element ignored "
-					   "(subtype=%d len=%lu)\n",
+				DBG_8192D("unknown WME information element ignored (subtype =%d len =%lu)\n",
 					   pos[4], (unsigned long) elen);
 				return -1;
 			}
@@ -1014,9 +962,7 @@ static int rtw_ieee802_11_parse_vendor_s
 			elems->wps_ie_len = elen;
 			break;
 		default:
-			DBG_8192D("Unknown Microsoft "
-				   "information element ignored "
-				   "(type=%d len=%lu)\n",
+			DBG_8192D("Unknown Microsoft information element ignored (type =%d len =%lu)\n",
 				   pos[3], (unsigned long) elen);
 			return -1;
 		}
@@ -1029,18 +975,14 @@ static int rtw_ieee802_11_parse_vendor_s
 			elems->vendor_ht_cap_len = elen;
 			break;
 		default:
-			DBG_8192D("Unknown Broadcom "
-				   "information element ignored "
-				   "(type=%d len=%lu)\n",
+			DBG_8192D("Unknown Broadcom information element ignored (type =%d len =%lu)\n",
 				   pos[3], (unsigned long) elen);
 			return -1;
 		}
 		break;
 
 	default:
-		DBG_8192D("unknown vendor specific information "
-			   "element ignored (vendor OUI %02x:%02x:%02x "
-			   "len=%lu)\n",
+		DBG_8192D("unknown vendor specific information element ignored (vendor OUI %02x:%02x:%02x len =%lu)\n",
 			   pos[0], pos[1], pos[2], (unsigned long) elen);
 		return -1;
 	}
@@ -1076,9 +1018,7 @@ enum parse_res rtw_ieee802_11_parse_elem
 
 		if (elen > left) {
 			if (show_errors) {
-				DBG_8192D("IEEE 802.11 element "
-					   "parse failed (id=%d elen=%d "
-					   "left=%lu)\n",
+				DBG_8192D("IEEE 802.11 element parse failed (id =%d elen =%d left =%lu)\n",
 					   id, elen, (unsigned long) left);
 			}
 			return PARSE_FAIL;
@@ -1167,8 +1107,7 @@ enum parse_res rtw_ieee802_11_parse_elem
 			unknown++;
 			if (!show_errors)
 				break;
-			DBG_8192D("IEEE 802.11 element parse "
-				   "ignored unknown element (id=%d elen=%d)\n",
+			DBG_8192D("IEEE 802.11 element parse ignored unknown element (id =%d elen =%d)\n",
 				   id, elen);
 			break;
 		}
@@ -1185,66 +1124,59 @@ enum parse_res rtw_ieee802_11_parse_elem
 
 static u8 key_char2num(u8 ch)
 {
-    if((ch>='0')&&(ch<='9'))
-        return ch - '0';
-    else if ((ch>='a')&&(ch<='f'))
-        return ch - 'a' + 10;
-    else if ((ch>='A')&&(ch<='F'))
-        return ch - 'A' + 10;
-    else
-	 return 0xff;
+	if ((ch >= '0') && (ch <= '9'))
+		return ch - '0';
+	else if ((ch >= 'a') && (ch <= 'f'))
+		return ch - 'a' + 10;
+	else if ((ch >= 'A') && (ch <= 'F'))
+		return ch - 'A' + 10;
+	else
+		return 0xff;
 }
 
-u8 str_2char2num(u8 hch, u8 lch);
 u8 str_2char2num(u8 hch, u8 lch)
 {
-    return ((key_char2num(hch) * 10 ) + key_char2num(lch));
+	return (key_char2num(hch) * 10) + key_char2num(lch);
 }
 
-u8 key_2char2num(u8 hch, u8 lch);
 u8 key_2char2num(u8 hch, u8 lch)
 {
-    return ((key_char2num(hch) << 4) | key_char2num(lch));
+	return (key_char2num(hch) << 4) | key_char2num(lch);
 }
 
 u8 convert_ip_addr(u8 hch, u8 mch, u8 lch)
 {
-    return ((key_char2num(hch) * 100) + (key_char2num(mch) * 10 ) + key_char2num(lch));
+	return (key_char2num(hch) * 100) + (key_char2num(mch) * 10) + key_char2num(lch);
 }
 
-extern char* rtw_initmac;
+extern char *rtw_initmac;
 void rtw_macaddr_cfg(u8 *mac_addr)
 {
 	u8 mac[ETH_ALEN];
-	if(mac_addr == NULL)	return;
+	if (mac_addr == NULL)
+		return;
 
-	if ( rtw_initmac )
-	{	//	Users specify the mac address
-		int jj,kk;
-
-		for( jj = 0, kk = 0; jj < ETH_ALEN; jj++, kk += 3 )
-		{
-			mac[jj] = key_2char2num(rtw_initmac[kk], rtw_initmac[kk+ 1]);
-		}
+	if (rtw_initmac) {	/*	Users specify the mac address */
+		int jj, kk;
+
+		for (jj = 0, kk = 0; jj < ETH_ALEN; jj++, kk += 3)
+			mac[jj] = key_2char2num(rtw_initmac[kk], rtw_initmac[kk+1]);
 		_rtw_memcpy(mac_addr, mac, ETH_ALEN);
-	}
-	else
-	{	//	Use the mac address stored in the Efuse
+	} else {	/*	Use the mac address stored in the Efuse */
 		_rtw_memcpy(mac, mac_addr, ETH_ALEN);
 	}
 
-	if (((mac[0]==0xff) &&(mac[1]==0xff) && (mac[2]==0xff) &&
-	     (mac[3]==0xff) && (mac[4]==0xff) &&(mac[5]==0xff)) ||
-	    ((mac[0]==0x0) && (mac[1]==0x0) && (mac[2]==0x0) &&
-	     (mac[3]==0x0) && (mac[4]==0x0) &&(mac[5]==0x0)))
-	{
+	if (((mac[0] == 0xff) && (mac[1] == 0xff) && (mac[2] == 0xff) &&
+	     (mac[3] == 0xff) && (mac[4] == 0xff) && (mac[5] == 0xff)) ||
+	    ((mac[0] == 0x0) && (mac[1] == 0x0) && (mac[2] == 0x0) &&
+	     (mac[3] == 0x0) && (mac[4] == 0x0) && (mac[5] == 0x0))) {
 		mac[0] = 0x00;
 		mac[1] = 0xe0;
 		mac[2] = 0x4c;
 		mac[3] = 0x87;
 		mac[4] = 0x00;
 		mac[5] = 0x00;
-		// use default mac addresss
+		/*  use default mac addresss */
 		_rtw_memcpy(mac_addr, mac, ETH_ALEN);
 		DBG_8192D("MAC Address from efuse error, assign default one !!!\n");
 	}
@@ -1252,26 +1184,28 @@ void rtw_macaddr_cfg(u8 *mac_addr)
 	DBG_8192D("rtw_macaddr_cfg MAC Address  = %pM\n", mac_addr);
 }
 
-void dump_ies(u8 *buf, u32 buf_len) {
-	u8* pos = (u8*)buf;
+void dump_ies(u8 *buf, u32 buf_len)
+{
+	u8 *pos = (u8 *)buf;
 	u8 id, len;
 
-	while(pos-buf<=buf_len){
+	while (pos-buf <= buf_len) {
 		id = *pos;
 		len = *(pos+1);
 
-		DBG_8192D("%s ID:%u, LEN:%u\n", __FUNCTION__, id, len);
+		DBG_8192D("%s ID:%u, LEN:%u\n", __func__, id, len);
 		#ifdef CONFIG_P2P
 		dump_p2p_ie(pos, len);
 		#endif
 		dump_wps_ie(pos, len);
 
-		pos+=(2+len);
+		pos += (2+len);
 	}
 }
 
-void dump_wps_ie(u8 *ie, u32 ie_len) {
-	u8* pos = (u8*)ie;
+void dump_wps_ie(u8 *ie, u32 ie_len)
+{
+	u8 *pos = (u8 *)ie;
 	u16 id;
 	u16 len;
 
@@ -1279,23 +1213,24 @@ void dump_wps_ie(u8 *ie, u32 ie_len) {
 	uint wps_ielen;
 
 	wps_ie = rtw_get_wps_ie(ie, ie_len, NULL, &wps_ielen);
-	if(wps_ie != ie || wps_ielen == 0)
+	if (wps_ie != ie || wps_ielen == 0)
 		return;
 
-	pos+=6;
-	while(pos-ie < ie_len){
+	pos += 6;
+	while (pos-ie < ie_len) {
 		id = RTW_GET_BE16(pos);
 		len = RTW_GET_BE16(pos + 2);
 
-		DBG_8192D("%s ID:0x%04x, LEN:%u\n", __FUNCTION__, id, len);
+		DBG_8192D("%s ID:0x%04x, LEN:%u\n", __func__, id, len);
 
-		pos+=(4+len);
+		pos += (4+len);
 	}
 }
 
 #ifdef CONFIG_P2P
-void dump_p2p_ie(u8 *ie, u32 ie_len) {
-	u8* pos = (u8*)ie;
+void dump_p2p_ie(u8 *ie, u32 ie_len)
+{
+	u8 *pos = (u8 *)ie;
 	u8 id;
 	u16 len;
 
@@ -1303,17 +1238,17 @@ void dump_p2p_ie(u8 *ie, u32 ie_len) {
 	uint p2p_ielen;
 
 	p2p_ie = rtw_get_p2p_ie(ie, ie_len, NULL, &p2p_ielen);
-	if(p2p_ie != ie || p2p_ielen == 0)
+	if (p2p_ie != ie || p2p_ielen == 0)
 		return;
 
-	pos+=6;
-	while(pos-ie < ie_len){
+	pos += 6;
+	while (pos-ie < ie_len) {
 		id = *pos;
 		len = RTW_GET_LE16(pos+1);
 
-		DBG_8192D("%s ID:%u, LEN:%u\n", __FUNCTION__, id, len);
+		DBG_8192D("%s ID:%u, LEN:%u\n", __func__, id, len);
 
-		pos+=(3+len);
+		pos += (3 + len);
 	}
 }
 
@@ -1330,39 +1265,32 @@ u8 *rtw_get_p2p_ie(u8 *in_ie, int in_len
 {
 	uint cnt = 0;
 	u8 *p2p_ie_ptr;
-	u8 eid, p2p_oui[4]={0x50,0x6F,0x9A,0x09};
+	u8 eid, p2p_oui[4] = {0x50, 0x6F, 0x9A, 0x09};
 
-	if ( p2p_ielen != NULL )
+	if (p2p_ielen != NULL)
 		*p2p_ielen = 0;
 
-	while(cnt<in_len)
-	{
+	while (cnt < in_len) {
 		eid = in_ie[cnt];
 		if ((in_len < 0) || (cnt > MAX_IE_SZ)) {
 			dump_stack();
 			return NULL;
 		}
-		if( ( eid == _VENDOR_SPECIFIC_IE_ ) && ( _rtw_memcmp( &in_ie[cnt+2], p2p_oui, 4) == true ) )
-		{
+		if ((eid == _VENDOR_SPECIFIC_IE_) &&
+		    (_rtw_memcmp(&in_ie[cnt+2], p2p_oui, 4) == true)) {
 			p2p_ie_ptr = in_ie + cnt;
 
-			if ( p2p_ie != NULL )
-			{
-				_rtw_memcpy( p2p_ie, &in_ie[ cnt ], in_ie[ cnt + 1 ] + 2 );
-			}
+			if (p2p_ie != NULL)
+				_rtw_memcpy(p2p_ie, &in_ie[cnt], in_ie[cnt + 1] + 2);
 
-			if ( p2p_ielen != NULL )
-			{
-				*p2p_ielen = in_ie[ cnt + 1 ] + 2;
-			}
+			if (p2p_ielen != NULL)
+				*p2p_ielen = in_ie[cnt + 1] + 2;
 
 			return p2p_ie_ptr;
 
 			break;
-		}
-		else
-		{
-			cnt += in_ie[ cnt + 1 ] +2; //goto next
+		} else {
+			cnt += in_ie[cnt + 1] + 2; /* goto next */
 		}
 
 	}
@@ -1381,47 +1309,40 @@ u8 *rtw_get_p2p_ie(u8 *in_ie, int in_len
  *
  * Returns: the address of the specific WPS attribute found, or NULL
  */
-u8 *rtw_get_p2p_attr(u8 *p2p_ie, uint p2p_ielen, u8 target_attr_id ,u8 *buf_attr, u32 *len_attr)
+u8 *rtw_get_p2p_attr(u8 *p2p_ie, uint p2p_ielen, u8 target_attr_id, u8 *buf_attr, u32 *len_attr)
 {
 	u8 *attr_ptr = NULL;
 	u8 *target_attr_ptr = NULL;
-	u8 p2p_oui[4]={0x50,0x6F,0x9A,0x09};
+	u8 p2p_oui[4] = {0x50, 0x6F, 0x9A, 0x09};
 
-	if(len_attr)
+	if (len_attr)
 		*len_attr = 0;
 
-	if ( !p2p_ie || ( p2p_ie[0] != _VENDOR_SPECIFIC_IE_ ) ||
-		( _rtw_memcmp( p2p_ie + 2, p2p_oui , 4 ) != true ) )
-	{
+	if (!p2p_ie || (p2p_ie[0] != _VENDOR_SPECIFIC_IE_) ||
+	    (_rtw_memcmp(p2p_ie + 2, p2p_oui, 4) != true))
 		return attr_ptr;
-	}
 
-	// 6 = 1(Element ID) + 1(Length) + 3 (OUI) + 1(OUI Type)
-	attr_ptr = p2p_ie + 6; //goto first attr
+	/*  6 = 1(Element ID) + 1(Length) + 3 (OUI) + 1(OUI Type) */
+	attr_ptr = p2p_ie + 6; /* goto first attr */
 
-	while(attr_ptr - p2p_ie < p2p_ielen)
-	{
-		// 3 = 1(Attribute ID) + 2(Length)
+	while (attr_ptr - p2p_ie < p2p_ielen) {
+		/*  3 = 1(Attribute ID) + 2(Length) */
 		u8 attr_id = *attr_ptr;
 		u16 attr_data_len = RTW_GET_LE16(attr_ptr + 1);
 		u16 attr_len = attr_data_len + 3;
 
-		//DBG_8192D("%s attr_ptr:%p, id:%u, length:%u\n", __FUNCTION__, attr_ptr, attr_id, attr_data_len);
-		if( attr_id == target_attr_id )
-		{
+		if (attr_id == target_attr_id) {
 			target_attr_ptr = attr_ptr;
 
-			if(buf_attr)
+			if (buf_attr)
 				_rtw_memcpy(buf_attr, attr_ptr, attr_len);
 
-			if(len_attr)
+			if (len_attr)
 				*len_attr = attr_len;
 
 			break;
-		}
-		else
-		{
-			attr_ptr += attr_len; //goto next
+		} else {
+			attr_ptr += attr_len; /* goto next */
 		}
 
 	}
@@ -1439,22 +1360,21 @@ u8 *rtw_get_p2p_attr(u8 *p2p_ie, uint p2
  *
  * Returns: the address of the specific P2P attribute content found, or NULL
  */
-u8 *rtw_get_p2p_attr_content(u8 *p2p_ie, uint p2p_ielen, u8 target_attr_id ,u8 *buf_content, uint *len_content)
+u8 *rtw_get_p2p_attr_content(u8 *p2p_ie, uint p2p_ielen, u8 target_attr_id, u8 *buf_content, uint *len_content)
 {
 	u8 *attr_ptr;
 	u32 attr_len;
 
-	if(len_content)
+	if (len_content)
 		*len_content = 0;
 
 	attr_ptr = rtw_get_p2p_attr(p2p_ie, p2p_ielen, target_attr_id, NULL, &attr_len);
 
-	if(attr_ptr && attr_len)
-	{
-		if(buf_content)
+	if (attr_ptr && attr_len) {
+		if (buf_content)
 			_rtw_memcpy(buf_content, attr_ptr+3, attr_len-3);
 
-		if(len_content)
+		if (len_content)
 			*len_content = attr_len-3;
 
 		return attr_ptr+3;
@@ -1469,10 +1389,9 @@ u32 rtw_set_p2p_attr_content(u8 *pbuf, u
 
 	*pbuf = attr_id;
 
-	//*(u16*)(pbuf + 1) = cpu_to_le16(attr_len);
 	RTW_PUT_LE16(pbuf + 1, attr_len);
 
-	if(pdata_attr)
+	if (pdata_attr)
 		_rtw_memcpy(pbuf + 3, pdata_attr, attr_len);
 
 	a_len = attr_len + 3;
@@ -1485,36 +1404,20 @@ static uint rtw_p2p_attr_remove(u8 *ie,
 	u8 *target_attr;
 	u32 target_attr_len;
 	uint ielen = ielen_ori;
-	int index=0;
+	int index = 0;
 
-	while(1) {
-		target_attr=rtw_get_p2p_attr(ie, ielen, attr_id, NULL, &target_attr_len);
-		if(target_attr && target_attr_len)
-		{
+	while (1) {
+		target_attr = rtw_get_p2p_attr(ie, ielen, attr_id, NULL, &target_attr_len);
+		if (target_attr && target_attr_len) {
 			u8 *next_attr = target_attr+target_attr_len;
 			uint remain_len = ielen-(next_attr-ie);
-			//dump_ies(ie, ielen);
-			#if 0
-			DBG_8192D("[%d] ie:%p, ielen:%u\n"
-				"target_attr:%p, target_attr_len:%u\n"
-				"next_attr:%p, remain_len:%u\n"
-				, index++
-				, ie, ielen
-				, target_attr, target_attr_len
-				, next_attr, remain_len
-			);
-			#endif
 
 			_rtw_memset(target_attr, 0, target_attr_len);
 			_rtw_memcpy(target_attr, next_attr, remain_len);
 			_rtw_memset(target_attr+remain_len, 0, target_attr_len);
 			*(ie+1) -= target_attr_len;
-			ielen-=target_attr_len;
-		}
-		else
-		{
-			//if(index>0)
-			//	dump_ies(ie, ielen);
+			ielen -= target_attr_len;
+		} else {
 			break;
 		}
 	}
@@ -1528,17 +1431,12 @@ void rtw_wlan_bssid_ex_remove_p2p_attr(s
 	uint p2p_ielen, p2p_ielen_ori;
 	int cnt;
 
-	if( (p2p_ie=rtw_get_p2p_ie(bss_ex->IEs+_FIXED_IE_LENGTH_, bss_ex->IELength-_FIXED_IE_LENGTH_, NULL, &p2p_ielen_ori)) )
-	{
-		#if 0
-		if(rtw_get_p2p_attr(p2p_ie, p2p_ielen_ori, attr_id, NULL, NULL)) {
-			DBG_8192D("rtw_get_p2p_attr: GOT P2P_ATTR:%u!!!!!!!!\n", attr_id);
-			dump_ies(bss_ex->IEs+_FIXED_IE_LENGTH_, bss_ex->IELength-_FIXED_IE_LENGTH_);
-		}
-		#endif
-
-		p2p_ielen=rtw_p2p_attr_remove(p2p_ie, p2p_ielen_ori, attr_id);
-		if(p2p_ielen != p2p_ielen_ori) {
+	p2p_ie = rtw_get_p2p_ie(bss_ex->IEs+_FIXED_IE_LENGTH_,
+				bss_ex->IELength-_FIXED_IE_LENGTH_,
+				NULL, &p2p_ielen_ori);
+	if (p2p_ie) {
+		p2p_ielen = rtw_p2p_attr_remove(p2p_ie, p2p_ielen_ori, attr_id);
+		if (p2p_ielen != p2p_ielen_ori) {
 
 			u8 *next_ie_ori = p2p_ie+p2p_ielen_ori;
 			u8 *next_ie = p2p_ie+p2p_ielen;
@@ -1547,128 +1445,99 @@ void rtw_wlan_bssid_ex_remove_p2p_attr(s
 			_rtw_memcpy(next_ie, next_ie_ori, remain_len);
 			_rtw_memset(next_ie+remain_len, 0, p2p_ielen_ori-p2p_ielen);
 			bss_ex->IELength -= p2p_ielen_ori-p2p_ielen;
-
-			#if 0
-			DBG_8192D("remove P2P_ATTR:%u!\n", attr_id);
-			dump_ies(bss_ex->IEs+_FIXED_IE_LENGTH_, bss_ex->IELength-_FIXED_IE_LENGTH_);
-			#endif
 		}
 	}
 }
 
-#endif //CONFIG_P2P
+#endif /* CONFIG_P2P */
 
 #ifdef CONFIG_WFD
 int rtw_get_wfd_ie(u8 *in_ie, int in_len, u8 *wfd_ie, uint *wfd_ielen)
 {
 	int match;
 	uint cnt = 0;
-	u8 eid, wfd_oui[4]={0x50,0x6F,0x9A,0x0A};
+	u8 eid, wfd_oui[4] = {0x50, 0x6F, 0x9A, 0x0A};
 
 
-	match=false;
+	match = false;
 
-	if ( in_len < 0 )
-	{
+	if (in_len < 0)
 		return match;
-	}
-
-	while(cnt<in_len)
-	{
+	while (cnt < in_len) {
 		eid = in_ie[cnt];
 
-		if( ( eid == _VENDOR_SPECIFIC_IE_ ) && ( _rtw_memcmp( &in_ie[cnt+2], wfd_oui, 4) == true ) )
-		{
-			if ( wfd_ie != NULL )
-			{
-				_rtw_memcpy( wfd_ie, &in_ie[ cnt ], in_ie[ cnt + 1 ] + 2 );
+		if ((eid == _VENDOR_SPECIFIC_IE_) &&
+		    (_rtw_memcmp(&in_ie[cnt+2], wfd_oui, 4) == true)) {
+			if (wfd_ie != NULL) {
+				_rtw_memcpy(wfd_ie, &in_ie[cnt], in_ie[cnt + 1] + 2);
 
-			}
-			else
-			{
-				if ( wfd_ielen != NULL )
-				{
+			} else {
+				if (wfd_ielen != NULL)
 					*wfd_ielen = 0;
-				}
 			}
 
-			if ( wfd_ielen != NULL )
-			{
-				*wfd_ielen = in_ie[ cnt + 1 ] + 2;
-			}
+			if (wfd_ielen != NULL)
+				*wfd_ielen = in_ie[cnt + 1] + 2;
 
-			cnt += in_ie[ cnt + 1 ] + 2;
+			cnt += in_ie[cnt + 1] + 2;
 
 			match = true;
 			break;
-		}
-		else
-		{
-			cnt += in_ie[ cnt + 1 ] +2; //goto next
+		} else {
+			cnt += in_ie[cnt + 1] + 2; /* goto next */
 		}
 
 	}
 
-	if ( match == true )
-	{
+	if (match == true)
 		match = cnt;
-	}
 
 	return match;
-
 }
 
-//	attr_content: The output buffer, contains the "body field" of WFD attribute.
-//	attr_contentlen: The data length of the "body field" of WFD attribute.
-int rtw_get_wfd_attr_content(u8 *wfd_ie, uint wfd_ielen, u8 target_attr_id ,u8 *attr_content, uint *attr_contentlen)
+/*	attr_content: The output buffer, contains the "body field" of WFD attribute. */
+/*	attr_contentlen: The data length of the "body field" of WFD attribute. */
+int rtw_get_wfd_attr_content(u8 *wfd_ie, uint wfd_ielen, u8 target_attr_id, u8 *attr_content, uint *attr_contentlen)
 {
 	int match;
 	uint cnt = 0;
-	u8 attr_id, wfd_oui[4]={0x50,0x6F,0x9A,0x0A};
+	u8 attr_id, wfd_oui[4] = {0x50, 0x6F, 0x9A, 0x0A};
 
 
-	match=false;
+	match = false;
 
-	if ( ( wfd_ie[ 0 ] != _VENDOR_SPECIFIC_IE_ ) ||
-		( _rtw_memcmp( wfd_ie + 2, wfd_oui , 4 ) != true ) )
-	{
-		return( match );
-	}
+	if ((wfd_ie[0] != _VENDOR_SPECIFIC_IE_) ||
+	    (_rtw_memcmp(wfd_ie + 2, wfd_oui, 4) != true))
+		return match;
 
-	//	1 ( WFD IE ) + 1 ( Length ) + 3 ( OUI ) + 1 ( OUI Type )
+	/*	1 (WFD IE) + 1 (Length) + 3 (OUI) + 1 (OUI Type) */
 	cnt = 6;
-	while( cnt < wfd_ielen )
-	{
+	while (cnt < wfd_ielen) {
 		u16 attrlen = RTW_GET_BE16(wfd_ie + cnt + 1);
 
 		attr_id = wfd_ie[cnt];
-		if( attr_id == target_attr_id )
-		{
-			//	3 -> 1 byte for attribute ID field, 2 bytes for length field
-			if(attr_content)
-				_rtw_memcpy( attr_content, &wfd_ie[ cnt + 3 ], attrlen );
+		if (attr_id == target_attr_id) {
+			/*	3 -> 1 byte for attribute ID field, 2 bytes for length field */
+			if (attr_content)
+				_rtw_memcpy(attr_content, &wfd_ie[cnt + 3], attrlen);
 
-			if(attr_contentlen)
+			if (attr_contentlen)
 				*attr_contentlen = attrlen;
 
 			cnt += attrlen + 3;
 
 			match = true;
 			break;
-		}
-		else
-		{
-			cnt += attrlen + 3; //goto next
+		} else {
+			cnt += attrlen + 3; /* goto next */
 		}
 
 	}
-
 	return match;
-
 }
-#endif // CONFIG_WFD
+#endif /*  CONFIG_WFD */
 
-//Baron adds to avoid FreeBSD warning
+/* Baron adds to avoid FreeBSD warning */
 int ieee80211_is_empty_essid(const char *essid, int essid_len)
 {
 	/* Single white space is for Linksys APs */
@@ -1712,75 +1581,69 @@ int ieee80211_get_hdrlen(u16 fc)
 	return hdrlen;
 }
 
-//show MCS rate, unit: 100Kbps
-u16 rtw_mcs_rate(u8 rf_type, u8 bw_40MHz, u8 short_GI_20, u8 short_GI_40, unsigned char * MCS_rate)
+/* show MCS rate, unit: 100Kbps */
+u16 rtw_mcs_rate(u8 rf_type, u8 bw_40MHz, u8 short_GI_20, u8 short_GI_40, unsigned char *mcs_rate)
 {
 	u16 max_rate = 0;
 
-	if(rf_type == RF_1T1R)
-	{
-		if(MCS_rate[0] & BIT(7))
-			max_rate = (bw_40MHz) ? ((short_GI_40)?1500:1350):((short_GI_20)?722:650);
-		else if(MCS_rate[0] & BIT(6))
-			max_rate = (bw_40MHz) ? ((short_GI_40)?1350:1215):((short_GI_20)?650:585);
-		else if(MCS_rate[0] & BIT(5))
-			max_rate = (bw_40MHz) ? ((short_GI_40)?1200:1080):((short_GI_20)?578:520);
-		else if(MCS_rate[0] & BIT(4))
-			max_rate = (bw_40MHz) ? ((short_GI_40)?900:810):((short_GI_20)?433:390);
-		else if(MCS_rate[0] & BIT(3))
-			max_rate = (bw_40MHz) ? ((short_GI_40)?600:540):((short_GI_20)?289:260);
-		else if(MCS_rate[0] & BIT(2))
-			max_rate = (bw_40MHz) ? ((short_GI_40)?450:405):((short_GI_20)?217:195);
-		else if(MCS_rate[0] & BIT(1))
-			max_rate = (bw_40MHz) ? ((short_GI_40)?300:270):((short_GI_20)?144:130);
-		else if(MCS_rate[0] & BIT(0))
-			max_rate = (bw_40MHz) ? ((short_GI_40)?150:135):((short_GI_20)?72:65);
-	}
-	else
-	{
-		if(MCS_rate[1])
-		{
-			if(MCS_rate[1] & BIT(7))
-				max_rate = (bw_40MHz) ? ((short_GI_40)?3000:2700):((short_GI_20)?1444:1300);
-			else if(MCS_rate[1] & BIT(6))
-				max_rate = (bw_40MHz) ? ((short_GI_40)?2700:2430):((short_GI_20)?1300:1170);
-			else if(MCS_rate[1] & BIT(5))
-				max_rate = (bw_40MHz) ? ((short_GI_40)?2400:2160):((short_GI_20)?1156:1040);
-			else if(MCS_rate[1] & BIT(4))
-				max_rate = (bw_40MHz) ? ((short_GI_40)?1800:1620):((short_GI_20)?867:780);
-			else if(MCS_rate[1] & BIT(3))
-				max_rate = (bw_40MHz) ? ((short_GI_40)?1200:1080):((short_GI_20)?578:520);
-			else if(MCS_rate[1] & BIT(2))
-				max_rate = (bw_40MHz) ? ((short_GI_40)?900:810):((short_GI_20)?433:390);
-			else if(MCS_rate[1] & BIT(1))
-				max_rate = (bw_40MHz) ? ((short_GI_40)?600:540):((short_GI_20)?289:260);
-			else if(MCS_rate[1] & BIT(0))
-				max_rate = (bw_40MHz) ? ((short_GI_40)?300:270):((short_GI_20)?144:130);
-		}
-		else
-		{
-			if(MCS_rate[0] & BIT(7))
-				max_rate = (bw_40MHz) ? ((short_GI_40)?1500:1350):((short_GI_20)?722:650);
-			else if(MCS_rate[0] & BIT(6))
-				max_rate = (bw_40MHz) ? ((short_GI_40)?1350:1215):((short_GI_20)?650:585);
-			else if(MCS_rate[0] & BIT(5))
-				max_rate = (bw_40MHz) ? ((short_GI_40)?1200:1080):((short_GI_20)?578:520);
-			else if(MCS_rate[0] & BIT(4))
-				max_rate = (bw_40MHz) ? ((short_GI_40)?900:810):((short_GI_20)?433:390);
-			else if(MCS_rate[0] & BIT(3))
-				max_rate = (bw_40MHz) ? ((short_GI_40)?600:540):((short_GI_20)?289:260);
-			else if(MCS_rate[0] & BIT(2))
-				max_rate = (bw_40MHz) ? ((short_GI_40)?450:405):((short_GI_20)?217:195);
-			else if(MCS_rate[0] & BIT(1))
-				max_rate = (bw_40MHz) ? ((short_GI_40)?300:270):((short_GI_20)?144:130);
-			else if(MCS_rate[0] & BIT(0))
-				max_rate = (bw_40MHz) ? ((short_GI_40)?150:135):((short_GI_20)?72:65);
+	if (rf_type == RF_1T1R) {
+		if (mcs_rate[0] & BIT(7))
+			max_rate = (bw_40MHz) ? ((short_GI_40) ? 1500 : 1350) : ((short_GI_20) ? 722 : 650);
+		else if (mcs_rate[0] & BIT(6))
+			max_rate = (bw_40MHz) ? ((short_GI_40) ? 1350 : 1215) : ((short_GI_20) ? 650 : 585);
+		else if (mcs_rate[0] & BIT(5))
+			max_rate = (bw_40MHz) ? ((short_GI_40) ? 1200 : 1080) : ((short_GI_20) ? 578 : 520);
+		else if (mcs_rate[0] & BIT(4))
+			max_rate = (bw_40MHz) ? ((short_GI_40) ? 900 : 810) : ((short_GI_20) ? 433 : 390);
+		else if (mcs_rate[0] & BIT(3))
+			max_rate = (bw_40MHz) ? ((short_GI_40) ? 600 : 540) : ((short_GI_20) ? 289 : 260);
+		else if (mcs_rate[0] & BIT(2))
+			max_rate = (bw_40MHz) ? ((short_GI_40) ? 450 : 405) : ((short_GI_20) ? 217 : 195);
+		else if (mcs_rate[0] & BIT(1))
+			max_rate = (bw_40MHz) ? ((short_GI_40) ? 300 : 270) : ((short_GI_20) ? 144 : 130);
+		else if (mcs_rate[0] & BIT(0))
+			max_rate = (bw_40MHz) ? ((short_GI_40) ? 150 : 135) : ((short_GI_20) ? 72 : 65);
+	} else {
+		if (mcs_rate[1]) {
+			if (mcs_rate[1] & BIT(7))
+				max_rate = (bw_40MHz) ? ((short_GI_40) ? 3000 : 2700) : ((short_GI_20) ? 1444 : 1300);
+			else if (mcs_rate[1] & BIT(6))
+				max_rate = (bw_40MHz) ? ((short_GI_40) ? 2700 : 2430) : ((short_GI_20) ? 1300 : 1170);
+			else if (mcs_rate[1] & BIT(5))
+				max_rate = (bw_40MHz) ? ((short_GI_40) ? 2400 : 2160) : ((short_GI_20) ? 1156 : 1040);
+			else if (mcs_rate[1] & BIT(4))
+				max_rate = (bw_40MHz) ? ((short_GI_40) ? 1800 : 1620) : ((short_GI_20) ? 867 : 780);
+			else if (mcs_rate[1] & BIT(3))
+				max_rate = (bw_40MHz) ? ((short_GI_40) ? 1200 : 1080) : ((short_GI_20) ? 578 : 520);
+			else if (mcs_rate[1] & BIT(2))
+				max_rate = (bw_40MHz) ? ((short_GI_40) ? 900 : 810) : ((short_GI_20) ? 433 : 390);
+			else if (mcs_rate[1] & BIT(1))
+				max_rate = (bw_40MHz) ? ((short_GI_40) ? 600 : 540) : ((short_GI_20) ? 289 : 260);
+			else if (mcs_rate[1] & BIT(0))
+				max_rate = (bw_40MHz) ? ((short_GI_40) ? 300 : 270) : ((short_GI_20) ? 144 : 130);
+		} else {
+			if (mcs_rate[0] & BIT(7))
+				max_rate = (bw_40MHz) ? ((short_GI_40) ? 1500 : 1350) : ((short_GI_20) ? 722 : 650);
+			else if (mcs_rate[0] & BIT(6))
+				max_rate = (bw_40MHz) ? ((short_GI_40) ? 1350 : 1215) : ((short_GI_20) ? 650 : 585);
+			else if (mcs_rate[0] & BIT(5))
+				max_rate = (bw_40MHz) ? ((short_GI_40) ? 1200 : 1080) : ((short_GI_20) ? 578 : 520);
+			else if (mcs_rate[0] & BIT(4))
+				max_rate = (bw_40MHz) ? ((short_GI_40) ? 900 : 810) : ((short_GI_20) ? 433 : 390);
+			else if (mcs_rate[0] & BIT(3))
+				max_rate = (bw_40MHz) ? ((short_GI_40) ? 600 : 540) : ((short_GI_20) ? 289 : 260);
+			else if (mcs_rate[0] & BIT(2))
+				max_rate = (bw_40MHz) ? ((short_GI_40) ? 450 : 405) : ((short_GI_20) ? 217 : 195);
+			else if (mcs_rate[0] & BIT(1))
+				max_rate = (bw_40MHz) ? ((short_GI_40) ? 300 : 270) : ((short_GI_20) ? 144 : 130);
+			else if (mcs_rate[0] & BIT(0))
+				max_rate = (bw_40MHz) ? ((short_GI_40) ? 150 : 135) : ((short_GI_20) ? 72 : 65);
 		}
 	}
 	return max_rate;
 }
 
-int rtw_action_frame_parse(const u8 *frame, u32 frame_len, u8* category, u8 *action)
+int rtw_action_frame_parse(const u8 *frame, u32 frame_len, u8 *category, u8 *action)
 {
 	const u8 *frame_body = frame + sizeof(struct rtw_ieee80211_hdr_3addr);
 	u16 fc;
@@ -1788,16 +1651,13 @@ int rtw_action_frame_parse(const u8 *fra
 
 	fc = le16_to_cpu(((struct rtw_ieee80211_hdr_3addr *)frame)->frame_ctl);
 
-	if ((fc & (RTW_IEEE80211_FCTL_FTYPE|RTW_IEEE80211_FCTL_STYPE))
-		!= (RTW_IEEE80211_FTYPE_MGMT|RTW_IEEE80211_STYPE_ACTION)
-	)
-	{
+	if ((fc & (RTW_IEEE80211_FCTL_FTYPE|RTW_IEEE80211_FCTL_STYPE)) !=
+	    (RTW_IEEE80211_FTYPE_MGMT|RTW_IEEE80211_STYPE_ACTION))
 		return false;
-	}
 
 	c = frame_body[0];
 
-	switch(c) {
+	switch (c) {
 	case RTW_WLAN_CATEGORY_P2P: /* vendor-specific */
 		break;
 	default:
