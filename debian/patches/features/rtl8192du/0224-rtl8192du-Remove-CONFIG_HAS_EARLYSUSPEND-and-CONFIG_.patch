From 2d99f89221140ade37becdd6f5df780430f14492 Mon Sep 17 00:00:00 2001
From: Larry Finger <Larry.Finger@lwfinger.net>
Date: Thu, 20 Feb 2014 11:31:48 -0600
Subject: [PATCH 224/390] rtl8192du: Remove CONFIG_HAS_EARLYSUSPEND and
 CONFIG_ANDROID_POWER

These two could never be selected. In addition, there are some
simplifications to the code.

Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
---
 core/rtw_pwrctrl.c      | 138 +-----------------------------------------------
 include/drv_conf.h      |  14 +----
 include/osdep_service.h |   2 -
 include/rtw_pwrctrl.h   |  30 -----------
 os_dep/osdep_service.c  |  12 -----
 os_dep/usb_intf.c       |  15 +-----
 6 files changed, 4 insertions(+), 207 deletions(-)

--- a/drivers/staging/rtl8192du/core/rtw_pwrctrl.c
+++ b/drivers/staging/rtl8192du/core/rtw_pwrctrl.c
@@ -661,12 +661,6 @@ void rtw_init_pwrctrl_priv(struct rtw_ad
 	pwrctrlpriv->rtw_workqueue =
 	    create_singlethread_workqueue("rtw_workqueue");
 #endif /* CONFIG_RESUME_IN_WORKQUEUE */
-
-#if defined(CONFIG_HAS_EARLYSUSPEND) || defined(CONFIG_ANDROID_POWER)
-	pwrctrlpriv->early_suspend.suspend = NULL;
-	rtw_register_early_suspend(pwrctrlpriv);
-#endif /* CONFIG_HAS_EARLYSUSPEND || CONFIG_ANDROID_POWER */
-
 }
 
 void rtw_free_pwrctrl_priv(struct rtw_adapter *adapter)
@@ -679,13 +673,7 @@ void rtw_free_pwrctrl_priv(struct rtw_ad
 		destroy_workqueue(pwrctrlpriv->rtw_workqueue);
 	}
 #endif
-
-#if defined(CONFIG_HAS_EARLYSUSPEND) || defined(CONFIG_ANDROID_POWER)
-	rtw_unregister_early_suspend(pwrctrlpriv);
-#endif /* CONFIG_HAS_EARLYSUSPEND || CONFIG_ANDROID_POWER */
-
 	_free_pwrlock(&pwrctrlpriv->lock);
-
 }
 
 #ifdef CONFIG_RESUME_IN_WORKQUEUE
@@ -710,126 +698,6 @@ void rtw_resume_in_workqueue(struct pwrc
 }
 #endif /* CONFIG_RESUME_IN_WORKQUEUE */
 
-#if defined(CONFIG_HAS_EARLYSUSPEND) || defined(CONFIG_ANDROID_POWER)
-inline bool rtw_is_earlysuspend_registered(struct pwrctrl_priv *pwrpriv)
-{
-	return (pwrpriv->early_suspend.suspend) ? true : false;
-}
-
-inline bool rtw_is_do_late_resume(struct pwrctrl_priv *pwrpriv)
-{
-	return (pwrpriv->do_late_resume) ? true : false;
-}
-
-inline void rtw_set_do_late_resume(struct pwrctrl_priv *pwrpriv, bool enable)
-{
-	pwrpriv->do_late_resume = enable;
-}
-#endif
-
-#ifdef CONFIG_HAS_EARLYSUSPEND
-extern int rtw_resume_process(struct rtw_adapter *padapter);
-static void rtw_early_suspend(struct early_suspend *h)
-{
-	struct pwrctrl_priv *pwrpriv =
-	    container_of(h, struct pwrctrl_priv, early_suspend);
-	DBG_8192D("%s\n", __func__);
-
-	rtw_set_do_late_resume(pwrpriv, false);
-}
-
-static void rtw_late_resume(struct early_suspend *h)
-{
-	struct pwrctrl_priv *pwrpriv =
-	    container_of(h, struct pwrctrl_priv, early_suspend);
-	struct rtw_adapter *adapter =
-	    container_of(pwrpriv, struct rtw_adapter, pwrctrlpriv);
-
-	DBG_8192D("%s\n", __func__);
-	if (pwrpriv->do_late_resume) {
-		rtw_set_do_late_resume(pwrpriv, false);
-		rtw_resume_process(adapter);
-	}
-}
-
-void rtw_register_early_suspend(struct pwrctrl_priv *pwrpriv)
-{
-	DBG_8192D("%s\n", __func__);
-
-	/* jeff: set the early suspend level before blank screen,
-	 * so we wll do late resume after scree is lit */
-	pwrpriv->early_suspend.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN - 20;
-	pwrpriv->early_suspend.suspend = rtw_early_suspend;
-	pwrpriv->early_suspend.resume = rtw_late_resume;
-	register_early_suspend(&pwrpriv->early_suspend);
-}
-
-void rtw_unregister_early_suspend(struct pwrctrl_priv *pwrpriv)
-{
-	DBG_8192D("%s\n", __func__);
-
-	rtw_set_do_late_resume(pwrpriv, false);
-
-	if (pwrpriv->early_suspend.suspend)
-		unregister_early_suspend(&pwrpriv->early_suspend);
-
-	pwrpriv->early_suspend.suspend = NULL;
-	pwrpriv->early_suspend.resume = NULL;
-}
-#endif /* CONFIG_HAS_EARLYSUSPEND */
-
-#ifdef CONFIG_ANDROID_POWER
-extern int rtw_resume_process(struct rtw_adapter *padapter);
-static void rtw_early_suspend(android_early_suspend_t *h)
-{
-	struct pwrctrl_priv *pwrpriv =
-	    container_of(h, struct pwrctrl_priv, early_suspend);
-	DBG_8192D("%s\n", __func__);
-
-	rtw_set_do_late_resume(pwrpriv, false);
-}
-
-static void rtw_late_resume(android_early_suspend_t *h)
-{
-	struct pwrctrl_priv *pwrpriv =
-	    container_of(h, struct pwrctrl_priv, early_suspend);
-	struct rtw_adapter *adapter =
-	    container_of(pwrpriv, _adapter, pwrctrlpriv);
-
-	DBG_8192D("%s\n", __func__);
-	if (pwrpriv->do_late_resume) {
-		rtw_set_do_late_resume(pwrpriv, false);
-		rtw_resume_process(adapter);
-	}
-}
-
-void rtw_register_early_suspend(struct pwrctrl_priv *pwrpriv)
-{
-	DBG_8192D("%s\n", __func__);
-
-	/* jeff: set the early suspend level before blank screen,
-	 * so we wll do late resume after screen is lit */
-	pwrpriv->early_suspend.level =
-	    ANDROID_EARLY_SUSPEND_LEVEL_BLANK_SCREEN - 20;
-	pwrpriv->early_suspend.suspend = rtw_early_suspend;
-	pwrpriv->early_suspend.resume = rtw_late_resume;
-	android_register_early_suspend(&pwrpriv->early_suspend);
-}
-
-void rtw_unregister_early_suspend(struct pwrctrl_priv *pwrpriv)
-{
-	DBG_8192D("%s\n", __func__);
-
-	rtw_set_do_late_resume(pwrpriv, false);
-
-	if (pwrpriv->early_suspend.suspend)
-		android_unregister_early_suspend(&pwrpriv->early_suspend);
-
-	pwrpriv->early_suspend.suspend = NULL;
-	pwrpriv->early_suspend.resume = NULL;
-}
-#endif /* CONFIG_ANDROID_POWER */
-
 u8 rtw_interface_ps_func(struct rtw_adapter *padapter,
 			 enum HAL_INTF_PS_FUNC efunc_id, u8 *val)
 {
@@ -887,12 +755,8 @@ int _rtw_pwr_wakeup(struct rtw_adapter *
 	if (pwrpriv->bInternalAutoSuspend == false && pwrpriv->bInSuspend) {
 		DBG_8192D("%s wait bInSuspend...\n", __func__);
 		while (pwrpriv->bInSuspend &&
-		       ((rtw_get_passing_time_ms(start) <= 3000 &&
-		       !rtw_is_do_late_resume(pwrpriv)) ||
-		       (rtw_get_passing_time_ms(start) <= 500 &&
-		       rtw_is_do_late_resume(pwrpriv)))) {
+		       ((rtw_get_passing_time_ms(start) <= 3000)))
 			rtw_msleep_os(10);
-		}
 		if (pwrpriv->bInSuspend)
 			DBG_8192D("%s wait bInSuspend timeout\n", __func__);
 		else
--- a/drivers/staging/rtl8192du/include/drv_conf.h
+++ b/drivers/staging/rtl8192du/include/drv_conf.h
@@ -28,19 +28,9 @@
 #define CONFIG_SIGNAL_DISPLAY_DBM
 #endif
 
-#if defined(CONFIG_HAS_EARLYSUSPEND) && defined (CONFIG_RESUME_IN_WORKQUEUE)
-	#warning "You have CONFIG_HAS_EARLYSUSPEND enabled in your system, we disable CONFIG_RESUME_IN_WORKQUEUE automatically"
-	#undef CONFIG_RESUME_IN_WORKQUEUE
-#endif
-
-#if defined(CONFIG_ANDROID_POWER) && defined (CONFIG_RESUME_IN_WORKQUEUE)
-	#warning "You have CONFIG_ANDROID_POWER enabled in your system, we disable CONFIG_RESUME_IN_WORKQUEUE automatically"
-	#undef CONFIG_RESUME_IN_WORKQUEUE
-#endif
-
 #ifdef CONFIG_RESUME_IN_WORKQUEUE /* this can be removed, because there is no case for this... */
-	#if !defined(CONFIG_WAKELOCK) && !defined(CONFIG_ANDROID_POWER)
-	#error "enable CONFIG_RESUME_IN_WORKQUEUE without CONFIG_WAKELOCK or CONFIG_ANDROID_POWER will suffer from the danger of wifi's unfunctionality..."
+	#if !defined(CONFIG_WAKELOCK)
+	#error "enable CONFIG_RESUME_IN_WORKQUEUE without CONFIG_WAKELOCK will suffer from the danger of wifi's unfunctionality..."
 	#error "If you still want to enable CONFIG_RESUME_IN_WORKQUEUE in this case, mask this preprossor checking and GOOD LUCK..."
 	#endif
 #endif
--- a/drivers/staging/rtl8192du/include/osdep_service.h
+++ b/drivers/staging/rtl8192du/include/osdep_service.h
@@ -333,8 +333,6 @@ static inline u32 bitshift(u32 bitmask)
 /*  Suspend lock prevent system from going suspend */
 #ifdef CONFIG_WAKELOCK
 #include <linux/wakelock.h>
-#elif defined(CONFIG_ANDROID_POWER)
-#include <linux/android_power.h>
 #endif
 
 void rtw_suspend_lock_init(void);
--- a/drivers/staging/rtl8192du/include/rtw_pwrctrl.h
+++ b/drivers/staging/rtl8192du/include/rtw_pwrctrl.h
@@ -20,11 +20,6 @@
 #include <osdep_service.h>
 #include <drv_types.h>
 
-#ifdef CONFIG_HAS_EARLYSUSPEND
-#include <linux/earlysuspend.h>
-#endif /* CONFIG_HAS_EARLYSUSPEND */
-
-
 #define FW_PWR0	0
 #define FW_PWR1		1
 #define FW_PWR2		2
@@ -242,17 +237,6 @@ struct pwrctrl_priv
 	struct workqueue_struct *rtw_workqueue;
 	struct work_struct resume_work;
 	#endif
-
-	#ifdef CONFIG_HAS_EARLYSUSPEND
-	struct early_suspend early_suspend;
-	u8 do_late_resume;
-	#endif /* CONFIG_HAS_EARLYSUSPEND */
-
-	#ifdef CONFIG_ANDROID_POWER
-	android_early_suspend_t early_suspend;
-	u8 do_late_resume;
-	#endif
-
 };
 
 #define rtw_get_ips_mode_req(pwrctrlpriv) \
@@ -297,20 +281,6 @@ void rtw_lps_leave(struct rtw_adapter *
 void rtw_resume_in_workqueue(struct pwrctrl_priv *pwrpriv);
 #endif /* CONFIG_RESUME_IN_WORKQUEUE */
 
-#if defined(CONFIG_HAS_EARLYSUSPEND) || defined(CONFIG_ANDROID_POWER)
-bool rtw_is_earlysuspend_registered(struct pwrctrl_priv *pwrpriv);
-bool rtw_is_do_late_resume(struct pwrctrl_priv *pwrpriv);
-void rtw_set_do_late_resume(struct pwrctrl_priv *pwrpriv, bool enable);
-void rtw_register_early_suspend(struct pwrctrl_priv *pwrpriv);
-void rtw_unregister_early_suspend(struct pwrctrl_priv *pwrpriv);
-#else
-#define rtw_is_earlysuspend_registered(pwrpriv) false
-#define rtw_is_do_late_resume(pwrpriv) false
-#define rtw_set_do_late_resume(pwrpriv, enable) do {} while (0)
-#define rtw_register_early_suspend(pwrpriv) do {} while (0)
-#define rtw_unregister_early_suspend(pwrpriv) do {} while (0)
-#endif /* CONFIG_HAS_EARLYSUSPEND || CONFIG_ANDROID_POWER */
-
 u8 rtw_interface_ps_func(struct rtw_adapter *padapter, enum HAL_INTF_PS_FUNC efunc_id,u8* val);
 void rtw_set_ips_deny(struct rtw_adapter *padapter, u32 ms);
 int _rtw_pwr_wakeup(struct rtw_adapter *padapter, u32 ips_deffer_ms, const char *caller);
--- a/drivers/staging/rtl8192du/os_dep/osdep_service.c
+++ b/drivers/staging/rtl8192du/os_dep/osdep_service.c
@@ -239,18 +239,12 @@ void rtw_yield_os(void)
 
 #ifdef CONFIG_WAKELOCK
 static struct wake_lock rtw_suspend_lock;
-#elif defined(CONFIG_ANDROID_POWER)
-static android_suspend_lock_t rtw_suspend_lock ={
-	.name = RTW_SUSPEND_LOCK_NAME
-};
 #endif
 
 inline void rtw_suspend_lock_init(void)
 {
 	#ifdef CONFIG_WAKELOCK
 	wake_lock_init(&rtw_suspend_lock, WAKE_LOCK_SUSPEND, RTW_SUSPEND_LOCK_NAME);
-	#elif defined(CONFIG_ANDROID_POWER)
-	android_init_suspend_lock(&rtw_suspend_lock);
 	#endif
 }
 
@@ -258,8 +252,6 @@ inline void rtw_suspend_lock_uninit(void
 {
 	#ifdef CONFIG_WAKELOCK
 	wake_lock_destroy(&rtw_suspend_lock);
-	#elif defined(CONFIG_ANDROID_POWER)
-	android_uninit_suspend_lock(&rtw_suspend_lock);
 	#endif
 }
 
@@ -267,8 +259,6 @@ inline void rtw_lock_suspend(void)
 {
 	#ifdef CONFIG_WAKELOCK
 	wake_lock(&rtw_suspend_lock);
-	#elif defined(CONFIG_ANDROID_POWER)
-	android_lock_suspend(&rtw_suspend_lock);
 	#endif
 }
 
@@ -276,8 +266,6 @@ inline void rtw_unlock_suspend(void)
 {
 	#ifdef CONFIG_WAKELOCK
 	wake_unlock(&rtw_suspend_lock);
-	#elif defined(CONFIG_ANDROID_POWER)
-	android_unlock_suspend(&rtw_suspend_lock);
 	#endif
 }
 
--- a/drivers/staging/rtl8192du/os_dep/usb_intf.c
+++ b/drivers/staging/rtl8192du/os_dep/usb_intf.c
@@ -735,16 +735,7 @@ static int rtw_resume(struct usb_interfa
 #ifdef CONFIG_RESUME_IN_WORKQUEUE
 		rtw_resume_in_workqueue(pwrpriv);
 #else
-		if (rtw_is_earlysuspend_registered(pwrpriv)
-			#ifdef CONFIG_WOWLAN
-			&& !padapter->pwrctrlpriv.wowlan_mode
-			#endif /* CONFIG_WOWLAN */
-		) {
-			/* jeff: bypass resume here, do in late_resume */
-			rtw_set_do_late_resume(pwrpriv, true);
-		} else {
-			ret = rtw_resume_process(padapter);
-		}
+		ret = rtw_resume_process(padapter);
 #endif /* CONFIG_RESUME_IN_WORKQUEUE */
 	}
 
@@ -1164,10 +1155,6 @@ static void rtw_dev_remove(struct usb_in
 	if (usb_drv->drv_registered )
 		padapter->bSurpriseRemoved = true;
 
-#if defined(CONFIG_HAS_EARLYSUSPEND) || defined(CONFIG_ANDROID_POWER)
-	rtw_unregister_early_suspend(&padapter->pwrctrlpriv);
-#endif
-
 	rtw_pm_set_ips(padapter, IPS_NONE);
 	rtw_pm_set_lps(padapter, PS_MODE_ACTIVE);
 
