From da29855eb021b84f13fa40799467004857881ca7 Mon Sep 17 00:00:00 2001
From: Larry Finger <Larry.Finger@lwfinger.net>
Date: Wed, 19 Feb 2014 00:20:33 -0600
Subject: [PATCH 203/210] rtl8192du: Switch to external firmware

Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
---
 Makefile                        |    8 +-
 hal/Hal8192DUHWImg.c            | 5372 ++++++++++++---------------------------
 hal/rtl8192d_hal_init.c         | 1244 ++++-----
 hal/rtl8192d_phycfg.c           |   24 +-
 include/Hal8192DUHWImg.h        |    1 -
 include/Hal8192DUHWImg_wowlan.h |   25 -
 include/autoconf.h              |    3 +-
 include/drv_types.h             |    3 +
 include/rtl8192d_hal.h          |   18 +-
 include/rtw_debug.h             |    1 +
 os_dep/os_intfs.c               |   14 +-
 os_dep/usb_intf.c               |   26 +-
 13 files changed, 2213 insertions(+), 6099 deletions(-)
 delete mode 100644 include/Hal8192DUHWImg_wowlan.h

--- a/drivers/staging/rtl8192du/Makefile
+++ b/drivers/staging/rtl8192du/Makefile
@@ -37,14 +37,9 @@ ccflags-y += -D__CHECK_ENDIAN__
 RTL871X = rtl8192d
 
 MODULE_NAME = 8192du
-FW_FILES := hal/Hal8192DUHWImg.o
-ifneq ($(CONFIG_WAKE_ON_WLAN), n)
-FW_FILES += hal/Hal8192DUHWImg_wowlan.o
-endif
 
 CHIP_FILES := \
 	hal/$(RTL871X)_xmit.o
-CHIP_FILES += $(FW_FILES)
 
 HCI_NAME = usb
 
@@ -71,7 +66,8 @@ _HAL_INTFS_FILES :=	hal/hal_intf.o \
 			hal/$(HCI_NAME)_halinit.o \
 			hal/rtl$(MODULE_NAME)_led.o \
 			hal/rtl$(MODULE_NAME)_xmit.o \
-			hal/rtl$(MODULE_NAME)_recv.o
+			hal/rtl$(MODULE_NAME)_recv.o \
+			hal/Hal8192DUHWImg.o
 
 _HAL_INTFS_FILES += hal/$(HCI_NAME)_ops_linux.o
 
--- a/drivers/staging/rtl8192du/hal/Hal8192DUHWImg.c
+++ b/drivers/staging/rtl8192du/hal/Hal8192DUHWImg.c
@@ -14,1705 +14,1712 @@
  *
  ******************************************************************************/
 /*Created on  2011/11/11,  8: 8*/
-
+	
 #include <Hal8192DUHWImg.h>
-
+	
 const u8 Rtl8192DUFwMainArray[Rtl8192DUMainArrayLength] = {
-0x0, };
-
+	0x0,
+};
+	
 const u8 Rtl8192DUFwDataArray[Rtl8192DUDataArrayLength] = {
-0x0, };
-
+	0x0,
+};
+	
 const u32 Rtl8192DUPHY_REG_2TArray[Rtl8192DUPHY_REG_2TArrayLength] = {
-0x800,0x80040002,
-0x804,0x00000003,
-0x808,0x0000fc00,
-0x80c,0x0000000a,
-0x810,0x10001331,
-0x814,0x020c3d10,
-0x818,0x02200385,
-0x81c,0x00000000,
-0x820,0x01000100,
-0x824,0x00390004,
-0x828,0x01000100,
-0x82c,0x00390004,
-0x830,0x27272727,
-0x834,0x27272727,
-0x838,0x27272727,
-0x83c,0x27272727,
-0x840,0x00010000,
-0x844,0x00010000,
-0x848,0x27272727,
-0x84c,0x27272727,
-0x850,0x00000000,
-0x854,0x00000000,
-0x858,0x569a569a,
-0x85c,0x0c1b25a4,
-0x860,0x66e60250,
-0x864,0x061f0150,
-0x868,0x27272727,
-0x86c,0x272b2b2b,
-0x870,0x07000700,
-0x874,0x22188000,
-0x878,0x08080808,
-0x87c,0x0001fff8,
-0x880,0xc0083070,
-0x884,0x00000cd5,
-0x888,0x00000000,
-0x88c,0xcc0000c0,
-0x890,0x00000800,
-0x894,0xfffffffe,
-0x898,0x40302010,
-0x89c,0x00706050,
-0x900,0x00000000,
-0x904,0x00000023,
-0x908,0x00000000,
-0x90c,0x81121313,
-0xa00,0x00d047c8,
-0xa04,0x80ff000c,
-0xa08,0x8c8a8300,
-0xa0c,0x2e68120f,
-0xa10,0x9500bb78,
-0xa14,0x11144028,
-0xa18,0x00881117,
-0xa1c,0x89140f00,
-0xa20,0x1a1b0000,
-0xa24,0x090e1317,
-0xa28,0x00000204,
-0xa2c,0x00d30000,
-0xa70,0x101fff00,
-0xa74,0x00000007,
-0xc00,0x40071d40,
-0xc04,0x03a05633,
-0xc08,0x001000e4,
-0xc0c,0x6c6c6c6c,
-0xc10,0x08800000,
-0xc14,0x40000100,
-0xc18,0x08800000,
-0xc1c,0x40000100,
-0xc20,0x00000000,
-0xc24,0x00000000,
-0xc28,0x00000000,
-0xc2c,0x00000000,
-0xc30,0x69e9ac44,
-0xc34,0x469652af,
-0xc38,0x49795994,
-0xc3c,0x0a979718,
-0xc40,0x1f7c403f,
-0xc44,0x000100b7,
-0xc48,0xec020107,
-0xc4c,0x007f037f,
-0xc50,0x69543420,
-0xc54,0x43bc009e,
-0xc58,0x69543420,
-0xc5c,0x433c00a8,
-0xc60,0x00000000,
-0xc64,0x7112848b,
-0xc68,0x47c00bff,
-0xc6c,0x00000036,
-0xc70,0x2c7f000d,
-0xc74,0x258610db,
-0xc78,0x0000001f,
-0xc7c,0x40b95612,
-0xc80,0x40000100,
-0xc84,0x20f60000,
-0xc88,0x40000100,
-0xc8c,0xa0e40000,
-0xc90,0x00121820,
-0xc94,0x00000007,
-0xc98,0x00121820,
-0xc9c,0x00007f7f,
-0xca0,0x00000000,
-0xca4,0x00000080,
-0xca8,0x00000000,
-0xcac,0x00000000,
-0xcb0,0x00000000,
-0xcb4,0x00000000,
-0xcb8,0x00000000,
-0xcbc,0x28000000,
-0xcc0,0x00000000,
-0xcc4,0x00000000,
-0xcc8,0x00000000,
-0xccc,0x00000000,
-0xcd0,0x00000000,
-0xcd4,0x00000000,
-0xcd8,0x64b11e20,
-0xcdc,0xe0767533,
-0xce0,0x00222222,
-0xce4,0x00000000,
-0xce8,0x37644302,
-0xcec,0x2f97d40c,
-0xd00,0x00080740,
-0xd04,0x00020403,
-0xd08,0x0000907f,
-0xd0c,0x20010201,
-0xd10,0xa0633333,
-0xd14,0x3333bc43,
-0xd18,0x7a8f5b6b,
-0xd2c,0xcc979975,
-0xd30,0x00000000,
-0xd34,0x80608404,
-0xd38,0x00000000,
-0xd3c,0x00027353,
-0xd40,0x00000000,
-0xd44,0x00000000,
-0xd48,0x00000000,
-0xd4c,0x00000000,
-0xd50,0x6437140a,
-0xd54,0x00000000,
-0xd58,0x00000000,
-0xd5c,0x30032064,
-0xd60,0x4653de68,
-0xd64,0x04518a3c,
-0xd68,0x00002101,
-0xd6c,0x2a201c16,
-0xd70,0x1812362e,
-0xd74,0x322c2220,
-0xd78,0x000e3c24,
-0xe00,0x2a2a2a2a,
-0xe04,0x2a2a2a2a,
-0xe08,0x03902a2a,
-0xe10,0x2a2a2a2a,
-0xe14,0x2a2a2a2a,
-0xe18,0x2a2a2a2a,
-0xe1c,0x2a2a2a2a,
-0xe28,0x00000000,
-0xe30,0x1000dc1f,
-0xe34,0x10008c1f,
-0xe38,0x02140102,
-0xe3c,0x681604c2,
-0xe40,0x01007c00,
-0xe44,0x01004800,
-0xe48,0xfb000000,
-0xe4c,0x000028d1,
-0xe50,0x1000dc1f,
-0xe54,0x10008c1f,
-0xe58,0x02140102,
-0xe5c,0x28160d05,
-0xe60,0x00000010,
-0xe68,0x001b25a4,
-0xe6c,0x63db25a4,
-0xe70,0x63db25a4,
-0xe74,0x0c126da4,
-0xe78,0x0c126da4,
-0xe7c,0x0c126da4,
-0xe80,0x0c126da4,
-0xe84,0x63db25a4,
-0xe88,0x0c126da4,
-0xe8c,0x63db25a4,
-0xed0,0x63db25a4,
-0xed4,0x63db25a4,
-0xed8,0x63db25a4,
-0xedc,0x001b25a4,
-0xee0,0x001b25a4,
-0xeec,0x6fdb25a4,
-0xf14,0x00000003,
-0xf1c,0x00000064,
-0xf4c,0x00000004,
-0xf00,0x00000300,
+	0x800, 0x80040002,
+	0x804, 0x00000003,
+	0x808, 0x0000fc00,
+	0x80c, 0x0000000a,
+	0x810, 0x10001331,
+	0x814, 0x020c3d10,
+	0x818, 0x02200385,
+	0x81c, 0x00000000,
+	0x820, 0x01000100,
+	0x824, 0x00390004,
+	0x828, 0x01000100,
+	0x82c, 0x00390004,
+	0x830, 0x27272727,
+	0x834, 0x27272727,
+	0x838, 0x27272727,
+	0x83c, 0x27272727,
+	0x840, 0x00010000,
+	0x844, 0x00010000,
+	0x848, 0x27272727,
+	0x84c, 0x27272727,
+	0x850, 0x00000000,
+	0x854, 0x00000000,
+	0x858, 0x569a569a,
+	0x85c, 0x0c1b25a4,
+	0x860, 0x66e60250,
+	0x864, 0x061f0150,
+	0x868, 0x27272727,
+	0x86c, 0x272b2b2b,
+	0x870, 0x07000700,
+	0x874, 0x22188000,
+	0x878, 0x08080808,
+	0x87c, 0x0001fff8,
+	0x880, 0xc0083070,
+	0x884, 0x00000cd5,
+	0x888, 0x00000000,
+	0x88c, 0xcc0000c0,
+	0x890, 0x00000800,
+	0x894, 0xfffffffe,
+	0x898, 0x40302010,
+	0x89c, 0x00706050,
+	0x900, 0x00000000,
+	0x904, 0x00000023,
+	0x908, 0x00000000,
+	0x90c, 0x81121313,
+	0xa00, 0x00d047c8,
+	0xa04, 0x80ff000c,
+	0xa08, 0x8c8a8300,
+	0xa0c, 0x2e68120f,
+	0xa10, 0x9500bb78,
+	0xa14, 0x11144028,
+	0xa18, 0x00881117,
+	0xa1c, 0x89140f00,
+	0xa20, 0x1a1b0000,
+	0xa24, 0x090e1317,
+	0xa28, 0x00000204,
+	0xa2c, 0x00d30000,
+	0xa70, 0x101fff00,
+	0xa74, 0x00000007,
+	0xc00, 0x40071d40,
+	0xc04, 0x03a05633,
+	0xc08, 0x001000e4,
+	0xc0c, 0x6c6c6c6c,
+	0xc10, 0x08800000,
+	0xc14, 0x40000100,
+	0xc18, 0x08800000,
+	0xc1c, 0x40000100,
+	0xc20, 0x00000000,
+	0xc24, 0x00000000,
+	0xc28, 0x00000000,
+	0xc2c, 0x00000000,
+	0xc30, 0x69e9ac44,
+	0xc34, 0x469652af,
+	0xc38, 0x49795994,
+	0xc3c, 0x0a979718,
+	0xc40, 0x1f7c403f,
+	0xc44, 0x000100b7,
+	0xc48, 0xec020107,
+	0xc4c, 0x007f037f,
+	0xc50, 0x69543420,
+	0xc54, 0x43bc009e,
+	0xc58, 0x69543420,
+	0xc5c, 0x433c00a8,
+	0xc60, 0x00000000,
+	0xc64, 0x7112848b,
+	0xc68, 0x47c00bff,
+	0xc6c, 0x00000036,
+	0xc70, 0x2c7f000d,
+	0xc74, 0x258610db,
+	0xc78, 0x0000001f,
+	0xc7c, 0x40b95612,
+	0xc80, 0x40000100,
+	0xc84, 0x20f60000,
+	0xc88, 0x40000100,
+	0xc8c, 0xa0e40000,
+	0xc90, 0x00121820,
+	0xc94, 0x00000007,
+	0xc98, 0x00121820,
+	0xc9c, 0x00007f7f,
+	0xca0, 0x00000000,
+	0xca4, 0x00000080,
+	0xca8, 0x00000000,
+	0xcac, 0x00000000,
+	0xcb0, 0x00000000,
+	0xcb4, 0x00000000,
+	0xcb8, 0x00000000,
+	0xcbc, 0x28000000,
+	0xcc0, 0x00000000,
+	0xcc4, 0x00000000,
+	0xcc8, 0x00000000,
+	0xccc, 0x00000000,
+	0xcd0, 0x00000000,
+	0xcd4, 0x00000000,
+	0xcd8, 0x64b11e20,
+	0xcdc, 0xe0767533,
+	0xce0, 0x00222222,
+	0xce4, 0x00000000,
+	0xce8, 0x37644302,
+	0xcec, 0x2f97d40c,
+	0xd00, 0x00080740,
+	0xd04, 0x00020403,
+	0xd08, 0x0000907f,
+	0xd0c, 0x20010201,
+	0xd10, 0xa0633333,
+	0xd14, 0x3333bc43,
+	0xd18, 0x7a8f5b6b,
+	0xd2c, 0xcc979975,
+	0xd30, 0x00000000,
+	0xd34, 0x80608404,
+	0xd38, 0x00000000,
+	0xd3c, 0x00027353,
+	0xd40, 0x00000000,
+	0xd44, 0x00000000,
+	0xd48, 0x00000000,
+	0xd4c, 0x00000000,
+	0xd50, 0x6437140a,
+	0xd54, 0x00000000,
+	0xd58, 0x00000000,
+	0xd5c, 0x30032064,
+	0xd60, 0x4653de68,
+	0xd64, 0x04518a3c,
+	0xd68, 0x00002101,
+	0xd6c, 0x2a201c16,
+	0xd70, 0x1812362e,
+	0xd74, 0x322c2220,
+	0xd78, 0x000e3c24,
+	0xe00, 0x2a2a2a2a,
+	0xe04, 0x2a2a2a2a,
+	0xe08, 0x03902a2a,
+	0xe10, 0x2a2a2a2a,
+	0xe14, 0x2a2a2a2a,
+	0xe18, 0x2a2a2a2a,
+	0xe1c, 0x2a2a2a2a,
+	0xe28, 0x00000000,
+	0xe30, 0x1000dc1f,
+	0xe34, 0x10008c1f,
+	0xe38, 0x02140102,
+	0xe3c, 0x681604c2,
+	0xe40, 0x01007c00,
+	0xe44, 0x01004800,
+	0xe48, 0xfb000000,
+	0xe4c, 0x000028d1,
+	0xe50, 0x1000dc1f,
+	0xe54, 0x10008c1f,
+	0xe58, 0x02140102,
+	0xe5c, 0x28160d05,
+	0xe60, 0x00000010,
+	0xe68, 0x001b25a4,
+	0xe6c, 0x63db25a4,
+	0xe70, 0x63db25a4,
+	0xe74, 0x0c126da4,
+	0xe78, 0x0c126da4,
+	0xe7c, 0x0c126da4,
+	0xe80, 0x0c126da4,
+	0xe84, 0x63db25a4,
+	0xe88, 0x0c126da4,
+	0xe8c, 0x63db25a4,
+	0xed0, 0x63db25a4,
+	0xed4, 0x63db25a4,
+	0xed8, 0x63db25a4,
+	0xedc, 0x001b25a4,
+	0xee0, 0x001b25a4,
+	0xeec, 0x6fdb25a4,
+	0xf14, 0x00000003,
+	0xf1c, 0x00000064,
+	0xf4c, 0x00000004,
+	0xf00, 0x00000300,
 };
-
+	
 const u32 Rtl8192DUPHY_REG_1TArray[Rtl8192DUPHY_REG_1TArrayLength] = {
-0x0, };
-
+	0x0,
+};
+	
 const u32 Rtl8192DUPHY_REG_Array_PG[Rtl8192DUPHY_REG_Array_PGLength] = {
-0xe00,0xffffffff,0x07090c0c,
-0xe04,0xffffffff,0x01020405,
-0xe08,0x0000ff00,0x00000000,
-0x86c,0xffffff00,0x00000000,
-0xe10,0xffffffff,0x0b0c0c0e,
-0xe14,0xffffffff,0x01030506,
-0xe18,0xffffffff,0x0b0c0d0e,
-0xe1c,0xffffffff,0x01030509,
-0x830,0xffffffff,0x07090c0c,
-0x834,0xffffffff,0x01020405,
-0x838,0xffffff00,0x00000000,
-0x86c,0x000000ff,0x00000000,
-0x83c,0xffffffff,0x0b0c0c0e,
-0x848,0xffffffff,0x01030506,
-0x84c,0xffffffff,0x0b0c0d0e,
-0x868,0xffffffff,0x01030509,
-0xe00,0xffffffff,0x00000000,
-0xe04,0xffffffff,0x00000000,
-0xe08,0x0000ff00,0x00000000,
-0x86c,0xffffff00,0x00000000,
-0xe10,0xffffffff,0x00000000,
-0xe14,0xffffffff,0x00000000,
-0xe18,0xffffffff,0x00000000,
-0xe1c,0xffffffff,0x00000000,
-0x830,0xffffffff,0x00000000,
-0x834,0xffffffff,0x00000000,
-0x838,0xffffff00,0x00000000,
-0x86c,0x000000ff,0x00000000,
-0x83c,0xffffffff,0x00000000,
-0x848,0xffffffff,0x00000000,
-0x84c,0xffffffff,0x00000000,
-0x868,0xffffffff,0x00000000,
-0xe00,0xffffffff,0x04040404,
-0xe04,0xffffffff,0x00020204,
-0xe08,0x0000ff00,0x00000000,
-0x86c,0xffffff00,0x00000000,
-0xe10,0xffffffff,0x06060606,
-0xe14,0xffffffff,0x00020406,
-0xe18,0xffffffff,0x00000000,
-0xe1c,0xffffffff,0x00000000,
-0x830,0xffffffff,0x04040404,
-0x834,0xffffffff,0x00020204,
-0x838,0xffffff00,0x00000000,
-0x86c,0x000000ff,0x00000000,
-0x83c,0xffffffff,0x06060606,
-0x848,0xffffffff,0x00020406,
-0x84c,0xffffffff,0x00000000,
-0x868,0xffffffff,0x00000000,
-0xe00,0xffffffff,0x00000000,
-0xe04,0xffffffff,0x00000000,
-0xe08,0x0000ff00,0x00000000,
-0x86c,0xffffff00,0x00000000,
-0xe10,0xffffffff,0x00000000,
-0xe14,0xffffffff,0x00000000,
-0xe18,0xffffffff,0x00000000,
-0xe1c,0xffffffff,0x00000000,
-0x830,0xffffffff,0x00000000,
-0x834,0xffffffff,0x00000000,
-0x838,0xffffff00,0x00000000,
-0x86c,0x000000ff,0x00000000,
-0x83c,0xffffffff,0x00000000,
-0x848,0xffffffff,0x00000000,
-0x84c,0xffffffff,0x00000000,
-0x868,0xffffffff,0x00000000,
-0xe00,0xffffffff,0x00000000,
-0xe04,0xffffffff,0x00000000,
-0xe08,0x0000ff00,0x00000000,
-0x86c,0xffffff00,0x00000000,
-0xe10,0xffffffff,0x00000000,
-0xe14,0xffffffff,0x00000000,
-0xe18,0xffffffff,0x00000000,
-0xe1c,0xffffffff,0x00000000,
-0x830,0xffffffff,0x00000000,
-0x834,0xffffffff,0x00000000,
-0x838,0xffffff00,0x00000000,
-0x86c,0x000000ff,0x00000000,
-0x83c,0xffffffff,0x00000000,
-0x848,0xffffffff,0x00000000,
-0x84c,0xffffffff,0x00000000,
-0x868,0xffffffff,0x00000000,
-0xe00,0xffffffff,0x04040404,
-0xe04,0xffffffff,0x00020204,
-0xe08,0x0000ff00,0x00000000,
-0x86c,0xffffff00,0x00000000,
-0xe10,0xffffffff,0x00000000,
-0xe14,0xffffffff,0x00000000,
-0xe18,0xffffffff,0x00000000,
-0xe1c,0xffffffff,0x00000000,
-0x830,0xffffffff,0x04040404,
-0x834,0xffffffff,0x00020204,
-0x838,0xffffff00,0x00000000,
-0x86c,0x000000ff,0x00000000,
-0x83c,0xffffffff,0x00000000,
-0x848,0xffffffff,0x00000000,
-0x84c,0xffffffff,0x00000000,
-0x868,0xffffffff,0x00000000,
-0xe00,0xffffffff,0x00000000,
-0xe04,0xffffffff,0x00000000,
-0xe08,0x0000ff00,0x00000000,
-0x86c,0xffffff00,0x00000000,
-0xe10,0xffffffff,0x00000000,
-0xe14,0xffffffff,0x00000000,
-0xe18,0xffffffff,0x00000000,
-0xe1c,0xffffffff,0x00000000,
-0x830,0xffffffff,0x00000000,
-0x834,0xffffffff,0x00000000,
-0x838,0xffffff00,0x00000000,
-0x86c,0x000000ff,0x00000000,
-0x83c,0xffffffff,0x00000000,
-0x848,0xffffffff,0x00000000,
-0x84c,0xffffffff,0x00000000,
-0x868,0xffffffff,0x00000000,
-0xe00,0xffffffff,0x04040404,
-0xe04,0xffffffff,0x00020204,
-0xe08,0x0000ff00,0x00000000,
-0x86c,0xffffff00,0x00000000,
-0xe10,0xffffffff,0x08080808,
-0xe14,0xffffffff,0x00040408,
-0xe18,0xffffffff,0x00000000,
-0xe1c,0xffffffff,0x00000000,
-0x830,0xffffffff,0x04040404,
-0x834,0xffffffff,0x00020204,
-0x838,0xffffff00,0x00000000,
-0x86c,0x000000ff,0x00000000,
-0x83c,0xffffffff,0x08080808,
-0x848,0xffffffff,0x00040408,
-0x84c,0xffffffff,0x00000000,
-0x868,0xffffffff,0x00000000,
-0xe00,0xffffffff,0x04040404,
-0xe04,0xffffffff,0x00020204,
-0xe08,0x0000ff00,0x00000000,
-0x86c,0xffffff00,0x00000000,
-0xe10,0xffffffff,0x08080808,
-0xe14,0xffffffff,0x00040408,
-0xe18,0xffffffff,0x00000000,
-0xe1c,0xffffffff,0x00000000,
-0x830,0xffffffff,0x04040404,
-0x834,0xffffffff,0x00020204,
-0x838,0xffffff00,0x00000000,
-0x86c,0x000000ff,0x00000000,
-0x83c,0xffffffff,0x08080808,
-0x848,0xffffffff,0x00040408,
-0x84c,0xffffffff,0x00000000,
-0x868,0xffffffff,0x00000000,
-0xe00,0xffffffff,0x04040404,
-0xe04,0xffffffff,0x00020204,
-0xe08,0x0000ff00,0x00000000,
-0x86c,0xffffff00,0x00000000,
-0xe10,0xffffffff,0x08080808,
-0xe14,0xffffffff,0x00040408,
-0xe18,0xffffffff,0x00000000,
-0xe1c,0xffffffff,0x00000000,
-0x830,0xffffffff,0x04040404,
-0x834,0xffffffff,0x00020204,
-0x838,0xffffff00,0x00000000,
-0x86c,0x000000ff,0x00000000,
-0x83c,0xffffffff,0x08080808,
-0x848,0xffffffff,0x00040408,
-0x84c,0xffffffff,0x00000000,
-0x868,0xffffffff,0x00000000,
-0xe00,0xffffffff,0x04040404,
-0xe04,0xffffffff,0x00020204,
-0xe08,0x0000ff00,0x00000000,
-0x86c,0xffffff00,0x00000000,
-0xe10,0xffffffff,0x08080808,
-0xe14,0xffffffff,0x00040408,
-0xe18,0xffffffff,0x00000000,
-0xe1c,0xffffffff,0x00000000,
-0x830,0xffffffff,0x04040404,
-0x834,0xffffffff,0x00020204,
-0x838,0xffffff00,0x00000000,
-0x86c,0x000000ff,0x00000000,
-0x83c,0xffffffff,0x08080808,
-0x848,0xffffffff,0x00040408,
-0x84c,0xffffffff,0x00000000,
-0x868,0xffffffff,0x00000000,
-0xe00,0xffffffff,0x04040404,
-0xe04,0xffffffff,0x00020204,
-0xe08,0x0000ff00,0x00000000,
-0x86c,0xffffff00,0x00000000,
-0xe10,0xffffffff,0x08080808,
-0xe14,0xffffffff,0x00040408,
-0xe18,0xffffffff,0x00000000,
-0xe1c,0xffffffff,0x00000000,
-0x830,0xffffffff,0x04040404,
-0x834,0xffffffff,0x00020204,
-0x838,0xffffff00,0x00000000,
-0x86c,0x000000ff,0x00000000,
-0x83c,0xffffffff,0x08080808,
-0x848,0xffffffff,0x00040408,
-0x84c,0xffffffff,0x00000000,
-0x868,0xffffffff,0x00000000,
-0xe00,0xffffffff,0x04040404,
-0xe04,0xffffffff,0x00020204,
-0xe08,0x0000ff00,0x00000000,
-0x86c,0xffffff00,0x00000000,
-0xe10,0xffffffff,0x08080808,
-0xe14,0xffffffff,0x00040408,
-0xe18,0xffffffff,0x00000000,
-0xe1c,0xffffffff,0x00000000,
-0x830,0xffffffff,0x04040404,
-0x834,0xffffffff,0x00020204,
-0x838,0xffffff00,0x00000000,
-0x86c,0x000000ff,0x00000000,
-0x83c,0xffffffff,0x08080808,
-0x848,0xffffffff,0x00040408,
-0x84c,0xffffffff,0x00000000,
-0x868,0xffffffff,0x00000000,
+	0xe00, 0xffffffff, 0x07090c0c,
+	0xe04, 0xffffffff, 0x01020405,
+	0xe08, 0x0000ff00, 0x00000000,
+	0x86c, 0xffffff00, 0x00000000,
+	0xe10, 0xffffffff, 0x0b0c0c0e,
+	0xe14, 0xffffffff, 0x01030506,
+	0xe18, 0xffffffff, 0x0b0c0d0e,
+	0xe1c, 0xffffffff, 0x01030509,
+	0x830, 0xffffffff, 0x07090c0c,
+	0x834, 0xffffffff, 0x01020405,
+	0x838, 0xffffff00, 0x00000000,
+	0x86c, 0x000000ff, 0x00000000,
+	0x83c, 0xffffffff, 0x0b0c0c0e,
+	0x848, 0xffffffff, 0x01030506,
+	0x84c, 0xffffffff, 0x0b0c0d0e,
+	0x868, 0xffffffff, 0x01030509,
+	0xe00, 0xffffffff, 0x00000000,
+	0xe04, 0xffffffff, 0x00000000,
+	0xe08, 0x0000ff00, 0x00000000,
+	0x86c, 0xffffff00, 0x00000000,
+	0xe10, 0xffffffff, 0x00000000,
+	0xe14, 0xffffffff, 0x00000000,
+	0xe18, 0xffffffff, 0x00000000,
+	0xe1c, 0xffffffff, 0x00000000,
+	0x830, 0xffffffff, 0x00000000,
+	0x834, 0xffffffff, 0x00000000,
+	0x838, 0xffffff00, 0x00000000,
+	0x86c, 0x000000ff, 0x00000000,
+	0x83c, 0xffffffff, 0x00000000,
+	0x848, 0xffffffff, 0x00000000,
+	0x84c, 0xffffffff, 0x00000000,
+	0x868, 0xffffffff, 0x00000000,
+	0xe00, 0xffffffff, 0x04040404,
+	0xe04, 0xffffffff, 0x00020204,
+	0xe08, 0x0000ff00, 0x00000000,
+	0x86c, 0xffffff00, 0x00000000,
+	0xe10, 0xffffffff, 0x06060606,
+	0xe14, 0xffffffff, 0x00020406,
+	0xe18, 0xffffffff, 0x00000000,
+	0xe1c, 0xffffffff, 0x00000000,
+	0x830, 0xffffffff, 0x04040404,
+	0x834, 0xffffffff, 0x00020204,
+	0x838, 0xffffff00, 0x00000000,
+	0x86c, 0x000000ff, 0x00000000,
+	0x83c, 0xffffffff, 0x06060606,
+	0x848, 0xffffffff, 0x00020406,
+	0x84c, 0xffffffff, 0x00000000,
+	0x868, 0xffffffff, 0x00000000,
+	0xe00, 0xffffffff, 0x00000000,
+	0xe04, 0xffffffff, 0x00000000,
+	0xe08, 0x0000ff00, 0x00000000,
+	0x86c, 0xffffff00, 0x00000000,
+	0xe10, 0xffffffff, 0x00000000,
+	0xe14, 0xffffffff, 0x00000000,
+	0xe18, 0xffffffff, 0x00000000,
+	0xe1c, 0xffffffff, 0x00000000,
+	0x830, 0xffffffff, 0x00000000,
+	0x834, 0xffffffff, 0x00000000,
+	0x838, 0xffffff00, 0x00000000,
+	0x86c, 0x000000ff, 0x00000000,
+	0x83c, 0xffffffff, 0x00000000,
+	0x848, 0xffffffff, 0x00000000,
+	0x84c, 0xffffffff, 0x00000000,
+	0x868, 0xffffffff, 0x00000000,
+	0xe00, 0xffffffff, 0x00000000,
+	0xe04, 0xffffffff, 0x00000000,
+	0xe08, 0x0000ff00, 0x00000000,
+	0x86c, 0xffffff00, 0x00000000,
+	0xe10, 0xffffffff, 0x00000000,
+	0xe14, 0xffffffff, 0x00000000,
+	0xe18, 0xffffffff, 0x00000000,
+	0xe1c, 0xffffffff, 0x00000000,
+	0x830, 0xffffffff, 0x00000000,
+	0x834, 0xffffffff, 0x00000000,
+	0x838, 0xffffff00, 0x00000000,
+	0x86c, 0x000000ff, 0x00000000,
+	0x83c, 0xffffffff, 0x00000000,
+	0x848, 0xffffffff, 0x00000000,
+	0x84c, 0xffffffff, 0x00000000,
+	0x868, 0xffffffff, 0x00000000,
+	0xe00, 0xffffffff, 0x04040404,
+	0xe04, 0xffffffff, 0x00020204,
+	0xe08, 0x0000ff00, 0x00000000,
+	0x86c, 0xffffff00, 0x00000000,
+	0xe10, 0xffffffff, 0x00000000,
+	0xe14, 0xffffffff, 0x00000000,
+	0xe18, 0xffffffff, 0x00000000,
+	0xe1c, 0xffffffff, 0x00000000,
+	0x830, 0xffffffff, 0x04040404,
+	0x834, 0xffffffff, 0x00020204,
+	0x838, 0xffffff00, 0x00000000,
+	0x86c, 0x000000ff, 0x00000000,
+	0x83c, 0xffffffff, 0x00000000,
+	0x848, 0xffffffff, 0x00000000,
+	0x84c, 0xffffffff, 0x00000000,
+	0x868, 0xffffffff, 0x00000000,
+	0xe00, 0xffffffff, 0x00000000,
+	0xe04, 0xffffffff, 0x00000000,
+	0xe08, 0x0000ff00, 0x00000000,
+	0x86c, 0xffffff00, 0x00000000,
+	0xe10, 0xffffffff, 0x00000000,
+	0xe14, 0xffffffff, 0x00000000,
+	0xe18, 0xffffffff, 0x00000000,
+	0xe1c, 0xffffffff, 0x00000000,
+	0x830, 0xffffffff, 0x00000000,
+	0x834, 0xffffffff, 0x00000000,
+	0x838, 0xffffff00, 0x00000000,
+	0x86c, 0x000000ff, 0x00000000,
+	0x83c, 0xffffffff, 0x00000000,
+	0x848, 0xffffffff, 0x00000000,
+	0x84c, 0xffffffff, 0x00000000,
+	0x868, 0xffffffff, 0x00000000,
+	0xe00, 0xffffffff, 0x04040404,
+	0xe04, 0xffffffff, 0x00020204,
+	0xe08, 0x0000ff00, 0x00000000,
+	0x86c, 0xffffff00, 0x00000000,
+	0xe10, 0xffffffff, 0x08080808,
+	0xe14, 0xffffffff, 0x00040408,
+	0xe18, 0xffffffff, 0x00000000,
+	0xe1c, 0xffffffff, 0x00000000,
+	0x830, 0xffffffff, 0x04040404,
+	0x834, 0xffffffff, 0x00020204,
+	0x838, 0xffffff00, 0x00000000,
+	0x86c, 0x000000ff, 0x00000000,
+	0x83c, 0xffffffff, 0x08080808,
+	0x848, 0xffffffff, 0x00040408,
+	0x84c, 0xffffffff, 0x00000000,
+	0x868, 0xffffffff, 0x00000000,
+	0xe00, 0xffffffff, 0x04040404,
+	0xe04, 0xffffffff, 0x00020204,
+	0xe08, 0x0000ff00, 0x00000000,
+	0x86c, 0xffffff00, 0x00000000,
+	0xe10, 0xffffffff, 0x08080808,
+	0xe14, 0xffffffff, 0x00040408,
+	0xe18, 0xffffffff, 0x00000000,
+	0xe1c, 0xffffffff, 0x00000000,
+	0x830, 0xffffffff, 0x04040404,
+	0x834, 0xffffffff, 0x00020204,
+	0x838, 0xffffff00, 0x00000000,
+	0x86c, 0x000000ff, 0x00000000,
+	0x83c, 0xffffffff, 0x08080808,
+	0x848, 0xffffffff, 0x00040408,
+	0x84c, 0xffffffff, 0x00000000,
+	0x868, 0xffffffff, 0x00000000,
+	0xe00, 0xffffffff, 0x04040404,
+	0xe04, 0xffffffff, 0x00020204,
+	0xe08, 0x0000ff00, 0x00000000,
+	0x86c, 0xffffff00, 0x00000000,
+	0xe10, 0xffffffff, 0x08080808,
+	0xe14, 0xffffffff, 0x00040408,
+	0xe18, 0xffffffff, 0x00000000,
+	0xe1c, 0xffffffff, 0x00000000,
+	0x830, 0xffffffff, 0x04040404,
+	0x834, 0xffffffff, 0x00020204,
+	0x838, 0xffffff00, 0x00000000,
+	0x86c, 0x000000ff, 0x00000000,
+	0x83c, 0xffffffff, 0x08080808,
+	0x848, 0xffffffff, 0x00040408,
+	0x84c, 0xffffffff, 0x00000000,
+	0x868, 0xffffffff, 0x00000000,
+	0xe00, 0xffffffff, 0x04040404,
+	0xe04, 0xffffffff, 0x00020204,
+	0xe08, 0x0000ff00, 0x00000000,
+	0x86c, 0xffffff00, 0x00000000,
+	0xe10, 0xffffffff, 0x08080808,
+	0xe14, 0xffffffff, 0x00040408,
+	0xe18, 0xffffffff, 0x00000000,
+	0xe1c, 0xffffffff, 0x00000000,
+	0x830, 0xffffffff, 0x04040404,
+	0x834, 0xffffffff, 0x00020204,
+	0x838, 0xffffff00, 0x00000000,
+	0x86c, 0x000000ff, 0x00000000,
+	0x83c, 0xffffffff, 0x08080808,
+	0x848, 0xffffffff, 0x00040408,
+	0x84c, 0xffffffff, 0x00000000,
+	0x868, 0xffffffff, 0x00000000,
+	0xe00, 0xffffffff, 0x04040404,
+	0xe04, 0xffffffff, 0x00020204,
+	0xe08, 0x0000ff00, 0x00000000,
+	0x86c, 0xffffff00, 0x00000000,
+	0xe10, 0xffffffff, 0x08080808,
+	0xe14, 0xffffffff, 0x00040408,
+	0xe18, 0xffffffff, 0x00000000,
+	0xe1c, 0xffffffff, 0x00000000,
+	0x830, 0xffffffff, 0x04040404,
+	0x834, 0xffffffff, 0x00020204,
+	0x838, 0xffffff00, 0x00000000,
+	0x86c, 0x000000ff, 0x00000000,
+	0x83c, 0xffffffff, 0x08080808,
+	0x848, 0xffffffff, 0x00040408,
+	0x84c, 0xffffffff, 0x00000000,
+	0x868, 0xffffffff, 0x00000000,
+	0xe00, 0xffffffff, 0x04040404,
+	0xe04, 0xffffffff, 0x00020204,
+	0xe08, 0x0000ff00, 0x00000000,
+	0x86c, 0xffffff00, 0x00000000,
+	0xe10, 0xffffffff, 0x08080808,
+	0xe14, 0xffffffff, 0x00040408,
+	0xe18, 0xffffffff, 0x00000000,
+	0xe1c, 0xffffffff, 0x00000000,
+	0x830, 0xffffffff, 0x04040404,
+	0x834, 0xffffffff, 0x00020204,
+	0x838, 0xffffff00, 0x00000000,
+	0x86c, 0x000000ff, 0x00000000,
+	0x83c, 0xffffffff, 0x08080808,
+	0x848, 0xffffffff, 0x00040408,
+	0x84c, 0xffffffff, 0x00000000,
+	0x868, 0xffffffff, 0x00000000,
 };
-
+	
 const u32 Rtl8192DUPHY_REG_Array_MP[Rtl8192DUPHY_REG_Array_MPLength] = {
-0xc64,0x5116848b,
-0xc30,0x69e9ac4a,
-0xd04,0x80020403,
-0xd14,0x3333bc53,
-0x840,0x03cff456,
-0x844,0x03cff456,
-0xc04,0x03a07633,
+	0xc64, 0x5116848b,
+	0xc30, 0x69e9ac4a,
+	0xd04, 0x80020403,
+	0xd14, 0x3333bc53,
+	0x840, 0x03cff456,
+	0x844, 0x03cff456,
+	0xc04, 0x03a07633,
 };
-
+	
 const u32 Rtl8192DURadioA_2TArray[Rtl8192DURadioA_2TArrayLength] = {
-0x000,0x00030000,
-0x001,0x00030000,
-0x002,0x00000000,
-0x003,0x00018c63,
-0x004,0x00018c63,
-0x008,0x00084000,
-0x00b,0x0001c000,
-0x00e,0x00018c67,
-0x00f,0x00000851,
-0x014,0x00021440,
-0x018,0x00017524,
-0x019,0x00000000,
-0x01d,0x000a1290,
-0x023,0x00001558,
-0x01a,0x00030a99,
-0x01b,0x00040b00,
-0x01c,0x000fc339,
-0x03a,0x000a57eb,
-0x03b,0x00020000,
-0x03c,0x000ff454,
-0x020,0x0000aa52,
-0x021,0x00054000,
-0x040,0x0000aa52,
-0x041,0x00014000,
-0x025,0x000803be,
-0x026,0x000fc638,
-0x027,0x00077c18,
-0x028,0x000de471,
-0x029,0x000d7110,
-0x02a,0x0008cb04,
-0x02b,0x0004128b,
-0x02c,0x00001840,
-0x043,0x0002444f,
-0x044,0x0001adb0,
-0x045,0x00056467,
-0x046,0x0008992c,
-0x047,0x0000452c,
-0x048,0x000f9c43,
-0x049,0x00002e0c,
-0x04a,0x000546eb,
-0x04b,0x0008966c,
-0x04c,0x0000dde9,
-0x018,0x00007401,
-0x000,0x00070000,
-0x012,0x000dc000,
-0x012,0x00090000,
-0x012,0x00051000,
-0x012,0x00012000,
-0x013,0x000287b7,
-0x013,0x000247ab,
-0x013,0x0002079f,
-0x013,0x0001c793,
-0x013,0x0001839b,
-0x013,0x00014392,
-0x013,0x0001019a,
-0x013,0x0000c191,
-0x013,0x00008194,
-0x013,0x000040a0,
-0x013,0x00000018,
-0x015,0x0000f424,
-0x015,0x0004f424,
-0x015,0x0008f424,
-0x016,0x000e1330,
-0x016,0x000a1330,
-0x016,0x00061330,
-0x016,0x00021330,
-0x018,0x00017524,
-0x000,0x00070000,
-0x012,0x000cf000,
-0x012,0x000bc000,
-0x012,0x00078000,
-0x012,0x00000000,
-0x013,0x000287bc,
-0x013,0x000247b0,
-0x013,0x000203b4,
-0x013,0x0001c3a8,
-0x013,0x000181b4,
-0x013,0x000141a8,
-0x013,0x000100b4,
-0x013,0x0000c0a8,
-0x013,0x0000b030,
-0x013,0x00004024,
-0x013,0x00000018,
-0x015,0x0000f4c3,
-0x015,0x0004f4c3,
-0x015,0x0008f4c3,
-0x016,0x000e085f,
-0x016,0x000a085f,
-0x016,0x0006085f,
-0x016,0x0002085f,
-0x018,0x00037524,
-0x000,0x00070000,
-0x012,0x000cf000,
-0x012,0x000bc000,
-0x012,0x00078000,
-0x012,0x00000000,
-0x013,0x000287bc,
-0x013,0x000247b0,
-0x013,0x000203b4,
-0x013,0x0001c3a8,
-0x013,0x000181b4,
-0x013,0x000141a8,
-0x013,0x000100b4,
-0x013,0x0000c0a8,
-0x013,0x0000b030,
-0x013,0x00004024,
-0x013,0x00000018,
-0x015,0x0000f4c3,
-0x015,0x0004f4c3,
-0x015,0x0008f4c3,
-0x016,0x000e085f,
-0x016,0x000a085f,
-0x016,0x0006085f,
-0x016,0x0002085f,
-0x018,0x00057568,
-0x000,0x00070000,
-0x012,0x000cf000,
-0x012,0x000bc000,
-0x012,0x00078000,
-0x012,0x00000000,
-0x013,0x000287bc,
-0x013,0x000247b0,
-0x013,0x000203b4,
-0x013,0x0001c3a8,
-0x013,0x000181b4,
-0x013,0x000141a8,
-0x013,0x000100b4,
-0x013,0x0000c0a8,
-0x013,0x0000b030,
-0x013,0x00004024,
-0x013,0x00000018,
-0x015,0x0000f4c3,
-0x015,0x0004f4c3,
-0x015,0x0008f4c3,
-0x016,0x000e085f,
-0x016,0x000a085f,
-0x016,0x0006085f,
-0x016,0x0002085f,
-0x030,0x0004470f,
-0x031,0x00044ff0,
-0x032,0x00000070,
-0x033,0x000dd480,
-0x034,0x000ffac0,
-0x035,0x000b80c0,
-0x036,0x00077000,
-0x037,0x00064ff2,
-0x038,0x000e7661,
-0x039,0x00000e90,
-0x000,0x00030000,
-0x018,0x0000f401,
-0x0fe,0x00000000,
-0x0fe,0x00000000,
-0x01e,0x00088009,
-0x01f,0x00080003,
-0x0fe,0x00000000,
-0x01e,0x00088001,
-0x01f,0x00080000,
-0x0fe,0x00000000,
-0x018,0x00097524,
-0x0fe,0x00000000,
-0x0fe,0x00000000,
-0x0fe,0x00000000,
-0x0fe,0x00000000,
-0x02b,0x00041289,
-0x0fe,0x00000000,
-0x02d,0x0006aaaa,
-0x02e,0x000b4d01,
-0x02d,0x00080000,
-0x02e,0x00004d02,
-0x02d,0x00095555,
-0x02e,0x00054d03,
-0x02d,0x000aaaaa,
-0x02e,0x000b4d04,
-0x02d,0x000c0000,
-0x02e,0x00004d05,
-0x02d,0x000d5555,
-0x02e,0x00054d06,
-0x02d,0x000eaaaa,
-0x02e,0x000b4d07,
-0x02d,0x00000000,
-0x02e,0x00005108,
-0x02d,0x00015555,
-0x02e,0x00055109,
-0x02d,0x0002aaaa,
-0x02e,0x000b510a,
-0x02d,0x00040000,
-0x02e,0x0000510b,
-0x02d,0x00055555,
-0x02e,0x0005510c,
+	0x000, 0x00030000,
+	0x001, 0x00030000,
+	0x002, 0x00000000,
+	0x003, 0x00018c63,
+	0x004, 0x00018c63,
+	0x008, 0x00084000,
+	0x00b, 0x0001c000,
+	0x00e, 0x00018c67,
+	0x00f, 0x00000851,
+	0x014, 0x00021440,
+	0x018, 0x00017524,
+	0x019, 0x00000000,
+	0x01d, 0x000a1290,
+	0x023, 0x00001558,
+	0x01a, 0x00030a99,
+	0x01b, 0x00040b00,
+	0x01c, 0x000fc339,
+	0x03a, 0x000a57eb,
+	0x03b, 0x00020000,
+	0x03c, 0x000ff454,
+	0x020, 0x0000aa52,
+	0x021, 0x00054000,
+	0x040, 0x0000aa52,
+	0x041, 0x00014000,
+	0x025, 0x000803be,
+	0x026, 0x000fc638,
+	0x027, 0x00077c18,
+	0x028, 0x000de471,
+	0x029, 0x000d7110,
+	0x02a, 0x0008cb04,
+	0x02b, 0x0004128b,
+	0x02c, 0x00001840,
+	0x043, 0x0002444f,
+	0x044, 0x0001adb0,
+	0x045, 0x00056467,
+	0x046, 0x0008992c,
+	0x047, 0x0000452c,
+	0x048, 0x000f9c43,
+	0x049, 0x00002e0c,
+	0x04a, 0x000546eb,
+	0x04b, 0x0008966c,
+	0x04c, 0x0000dde9,
+	0x018, 0x00007401,
+	0x000, 0x00070000,
+	0x012, 0x000dc000,
+	0x012, 0x00090000,
+	0x012, 0x00051000,
+	0x012, 0x00012000,
+	0x013, 0x000287b7,
+	0x013, 0x000247ab,
+	0x013, 0x0002079f,
+	0x013, 0x0001c793,
+	0x013, 0x0001839b,
+	0x013, 0x00014392,
+	0x013, 0x0001019a,
+	0x013, 0x0000c191,
+	0x013, 0x00008194,
+	0x013, 0x000040a0,
+	0x013, 0x00000018,
+	0x015, 0x0000f424,
+	0x015, 0x0004f424,
+	0x015, 0x0008f424,
+	0x016, 0x000e1330,
+	0x016, 0x000a1330,
+	0x016, 0x00061330,
+	0x016, 0x00021330,
+	0x018, 0x00017524,
+	0x000, 0x00070000,
+	0x012, 0x000cf000,
+	0x012, 0x000bc000,
+	0x012, 0x00078000,
+	0x012, 0x00000000,
+	0x013, 0x000287bc,
+	0x013, 0x000247b0,
+	0x013, 0x000203b4,
+	0x013, 0x0001c3a8,
+	0x013, 0x000181b4,
+	0x013, 0x000141a8,
+	0x013, 0x000100b4,
+	0x013, 0x0000c0a8,
+	0x013, 0x0000b030,
+	0x013, 0x00004024,
+	0x013, 0x00000018,
+	0x015, 0x0000f4c3,
+	0x015, 0x0004f4c3,
+	0x015, 0x0008f4c3,
+	0x016, 0x000e085f,
+	0x016, 0x000a085f,
+	0x016, 0x0006085f,
+	0x016, 0x0002085f,
+	0x018, 0x00037524,
+	0x000, 0x00070000,
+	0x012, 0x000cf000,
+	0x012, 0x000bc000,
+	0x012, 0x00078000,
+	0x012, 0x00000000,
+	0x013, 0x000287bc,
+	0x013, 0x000247b0,
+	0x013, 0x000203b4,
+	0x013, 0x0001c3a8,
+	0x013, 0x000181b4,
+	0x013, 0x000141a8,
+	0x013, 0x000100b4,
+	0x013, 0x0000c0a8,
+	0x013, 0x0000b030,
+	0x013, 0x00004024,
+	0x013, 0x00000018,
+	0x015, 0x0000f4c3,
+	0x015, 0x0004f4c3,
+	0x015, 0x0008f4c3,
+	0x016, 0x000e085f,
+	0x016, 0x000a085f,
+	0x016, 0x0006085f,
+	0x016, 0x0002085f,
+	0x018, 0x00057568,
+	0x000, 0x00070000,
+	0x012, 0x000cf000,
+	0x012, 0x000bc000,
+	0x012, 0x00078000,
+	0x012, 0x00000000,
+	0x013, 0x000287bc,
+	0x013, 0x000247b0,
+	0x013, 0x000203b4,
+	0x013, 0x0001c3a8,
+	0x013, 0x000181b4,
+	0x013, 0x000141a8,
+	0x013, 0x000100b4,
+	0x013, 0x0000c0a8,
+	0x013, 0x0000b030,
+	0x013, 0x00004024,
+	0x013, 0x00000018,
+	0x015, 0x0000f4c3,
+	0x015, 0x0004f4c3,
+	0x015, 0x0008f4c3,
+	0x016, 0x000e085f,
+	0x016, 0x000a085f,
+	0x016, 0x0006085f,
+	0x016, 0x0002085f,
+	0x030, 0x0004470f,
+	0x031, 0x00044ff0,
+	0x032, 0x00000070,
+	0x033, 0x000dd480,
+	0x034, 0x000ffac0,
+	0x035, 0x000b80c0,
+	0x036, 0x00077000,
+	0x037, 0x00064ff2,
+	0x038, 0x000e7661,
+	0x039, 0x00000e90,
+	0x000, 0x00030000,
+	0x018, 0x0000f401,
+	0x0fe, 0x00000000,
+	0x0fe, 0x00000000,
+	0x01e, 0x00088009,
+	0x01f, 0x00080003,
+	0x0fe, 0x00000000,
+	0x01e, 0x00088001,
+	0x01f, 0x00080000,
+	0x0fe, 0x00000000,
+	0x018, 0x00097524,
+	0x0fe, 0x00000000,
+	0x0fe, 0x00000000,
+	0x0fe, 0x00000000,
+	0x0fe, 0x00000000,
+	0x02b, 0x00041289,
+	0x0fe, 0x00000000,
+	0x02d, 0x0006aaaa,
+	0x02e, 0x000b4d01,
+	0x02d, 0x00080000,
+	0x02e, 0x00004d02,
+	0x02d, 0x00095555,
+	0x02e, 0x00054d03,
+	0x02d, 0x000aaaaa,
+	0x02e, 0x000b4d04,
+	0x02d, 0x000c0000,
+	0x02e, 0x00004d05,
+	0x02d, 0x000d5555,
+	0x02e, 0x00054d06,
+	0x02d, 0x000eaaaa,
+	0x02e, 0x000b4d07,
+	0x02d, 0x00000000,
+	0x02e, 0x00005108,
+	0x02d, 0x00015555,
+	0x02e, 0x00055109,
+	0x02d, 0x0002aaaa,
+	0x02e, 0x000b510a,
+	0x02d, 0x00040000,
+	0x02e, 0x0000510b,
+	0x02d, 0x00055555,
+	0x02e, 0x0005510c,
 };
-
+	
 const u32 Rtl8192DURadioB_2TArray[Rtl8192DURadioB_2TArrayLength] = {
-0x000,0x00030000,
-0x001,0x00030000,
-0x002,0x00000000,
-0x003,0x00018c63,
-0x004,0x00018c63,
-0x008,0x00084000,
-0x00b,0x0001c000,
-0x00e,0x00018c67,
-0x00f,0x00000851,
-0x014,0x00021440,
-0x018,0x00007401,
-0x019,0x00000060,
-0x01d,0x000a1290,
-0x023,0x00001558,
-0x01a,0x00030a99,
-0x01b,0x00040b00,
-0x01c,0x000fc339,
-0x03a,0x000a57eb,
-0x03b,0x00020000,
-0x03c,0x000ff454,
-0x020,0x0000aa52,
-0x021,0x00054000,
-0x040,0x0000aa52,
-0x041,0x00014000,
-0x025,0x000803be,
-0x026,0x000fc638,
-0x027,0x00077c18,
-0x028,0x000d1c31,
-0x029,0x000d7110,
-0x02a,0x000aeb04,
-0x02b,0x0004128b,
-0x02c,0x00001840,
-0x043,0x0002444f,
-0x044,0x0001adb0,
-0x045,0x00056467,
-0x046,0x0008992c,
-0x047,0x0000452c,
-0x048,0x000f9c43,
-0x049,0x00002e0c,
-0x04a,0x000546eb,
-0x04b,0x0008966c,
-0x04c,0x0000dde9,
-0x018,0x00007401,
-0x000,0x00070000,
-0x012,0x000dc000,
-0x012,0x00090000,
-0x012,0x00051000,
-0x012,0x00012000,
-0x013,0x000287b7,
-0x013,0x000247ab,
-0x013,0x0002079f,
-0x013,0x0001c793,
-0x013,0x0001839b,
-0x013,0x00014392,
-0x013,0x0001019a,
-0x013,0x0000c191,
-0x013,0x00008194,
-0x013,0x000040a0,
-0x013,0x00000018,
-0x015,0x0000f424,
-0x015,0x0004f424,
-0x015,0x0008f424,
-0x016,0x000e1330,
-0x016,0x000a1330,
-0x016,0x00061330,
-0x016,0x00021330,
-0x018,0x00017524,
-0x000,0x00070000,
-0x012,0x000cf000,
-0x012,0x000bc000,
-0x012,0x00078000,
-0x012,0x00000000,
-0x013,0x000287bc,
-0x013,0x000247b0,
-0x013,0x000203b4,
-0x013,0x0001c3a8,
-0x013,0x000181b4,
-0x013,0x000141a8,
-0x013,0x000100b4,
-0x013,0x0000c0a8,
-0x013,0x0000b030,
-0x013,0x00004024,
-0x013,0x00000018,
-0x015,0x0000f4c3,
-0x015,0x0004f4c3,
-0x015,0x0008f4c3,
-0x016,0x000e085f,
-0x016,0x000a085f,
-0x016,0x0006085f,
-0x016,0x0002085f,
-0x018,0x00037524,
-0x000,0x00070000,
-0x012,0x000cf000,
-0x012,0x000bc000,
-0x012,0x00078000,
-0x012,0x00000000,
-0x013,0x000287bc,
-0x013,0x000247b0,
-0x013,0x000203b4,
-0x013,0x0001c3a8,
-0x013,0x000181b4,
-0x013,0x000141a8,
-0x013,0x000100b4,
-0x013,0x0000c0a8,
-0x013,0x0000b030,
-0x013,0x00004024,
-0x013,0x00000018,
-0x015,0x0000f4c3,
-0x015,0x0004f4c3,
-0x015,0x0008f4c3,
-0x016,0x000e085f,
-0x016,0x000a085f,
-0x016,0x0006085f,
-0x016,0x0002085f,
-0x018,0x00057524,
-0x000,0x00070000,
-0x012,0x000cf000,
-0x012,0x000bc000,
-0x012,0x00078000,
-0x012,0x00000000,
-0x013,0x000287bc,
-0x013,0x000247b0,
-0x013,0x000203b4,
-0x013,0x0001c3a8,
-0x013,0x000181b4,
-0x013,0x000141a8,
-0x013,0x000100b4,
-0x013,0x0000c0a8,
-0x013,0x0000b030,
-0x013,0x00004024,
-0x013,0x00000018,
-0x015,0x0000f4c3,
-0x015,0x0004f4c3,
-0x015,0x0008f4c3,
-0x016,0x000e085f,
-0x016,0x000a085f,
-0x016,0x0006085f,
-0x016,0x0002085f,
-0x030,0x0004470f,
-0x031,0x00044ff0,
-0x032,0x00000070,
-0x033,0x000dd480,
-0x034,0x000ffac0,
-0x035,0x000b80c0,
-0x036,0x00077000,
-0x037,0x00064ff2,
-0x038,0x000e7661,
-0x039,0x00000e90,
-0x000,0x00030000,
-0x018,0x0000f401,
-0x0fe,0x00000000,
-0x0fe,0x00000000,
-0x01e,0x00088009,
-0x01f,0x00080003,
-0x0fe,0x00000000,
-0x01e,0x00088001,
-0x01f,0x00080000,
-0x0fe,0x00000000,
-0x018,0x00087401,
-0x0fe,0x00000000,
-0x0fe,0x00000000,
-0x0fe,0x00000000,
-0x02b,0x00041289,
-0x0fe,0x00000000,
-0x02d,0x00066666,
-0x02e,0x00064001,
-0x02d,0x00091111,
-0x02e,0x00014002,
-0x02d,0x000bbbbb,
-0x02e,0x000b4003,
-0x02d,0x000e6666,
-0x02e,0x00064004,
-0x02d,0x00088888,
-0x02e,0x00084005,
-0x02d,0x0009dddd,
-0x02e,0x000d4006,
-0x02d,0x000b3333,
-0x02e,0x00034007,
-0x02d,0x00048888,
-0x02e,0x00084408,
-0x02d,0x000bbbbb,
-0x02e,0x000b4409,
-0x02d,0x000e6666,
-0x02e,0x0006440a,
-0x02d,0x00011111,
-0x02e,0x0001480b,
-0x02d,0x0003bbbb,
-0x02e,0x000b480c,
-0x02d,0x00066666,
-0x02e,0x0006480d,
-0x02d,0x000ccccc,
-0x02e,0x000c480e,
+	0x000, 0x00030000,
+	0x001, 0x00030000,
+	0x002, 0x00000000,
+	0x003, 0x00018c63,
+	0x004, 0x00018c63,
+	0x008, 0x00084000,
+	0x00b, 0x0001c000,
+	0x00e, 0x00018c67,
+	0x00f, 0x00000851,
+	0x014, 0x00021440,
+	0x018, 0x00007401,
+	0x019, 0x00000060,
+	0x01d, 0x000a1290,
+	0x023, 0x00001558,
+	0x01a, 0x00030a99,
+	0x01b, 0x00040b00,
+	0x01c, 0x000fc339,
+	0x03a, 0x000a57eb,
+	0x03b, 0x00020000,
+	0x03c, 0x000ff454,
+	0x020, 0x0000aa52,
+	0x021, 0x00054000,
+	0x040, 0x0000aa52,
+	0x041, 0x00014000,
+	0x025, 0x000803be,
+	0x026, 0x000fc638,
+	0x027, 0x00077c18,
+	0x028, 0x000d1c31,
+	0x029, 0x000d7110,
+	0x02a, 0x000aeb04,
+	0x02b, 0x0004128b,
+	0x02c, 0x00001840,
+	0x043, 0x0002444f,
+	0x044, 0x0001adb0,
+	0x045, 0x00056467,
+	0x046, 0x0008992c,
+	0x047, 0x0000452c,
+	0x048, 0x000f9c43,
+	0x049, 0x00002e0c,
+	0x04a, 0x000546eb,
+	0x04b, 0x0008966c,
+	0x04c, 0x0000dde9,
+	0x018, 0x00007401,
+	0x000, 0x00070000,
+	0x012, 0x000dc000,
+	0x012, 0x00090000,
+	0x012, 0x00051000,
+	0x012, 0x00012000,
+	0x013, 0x000287b7,
+	0x013, 0x000247ab,
+	0x013, 0x0002079f,
+	0x013, 0x0001c793,
+	0x013, 0x0001839b,
+	0x013, 0x00014392,
+	0x013, 0x0001019a,
+	0x013, 0x0000c191,
+	0x013, 0x00008194,
+	0x013, 0x000040a0,
+	0x013, 0x00000018,
+	0x015, 0x0000f424,
+	0x015, 0x0004f424,
+	0x015, 0x0008f424,
+	0x016, 0x000e1330,
+	0x016, 0x000a1330,
+	0x016, 0x00061330,
+	0x016, 0x00021330,
+	0x018, 0x00017524,
+	0x000, 0x00070000,
+	0x012, 0x000cf000,
+	0x012, 0x000bc000,
+	0x012, 0x00078000,
+	0x012, 0x00000000,
+	0x013, 0x000287bc,
+	0x013, 0x000247b0,
+	0x013, 0x000203b4,
+	0x013, 0x0001c3a8,
+	0x013, 0x000181b4,
+	0x013, 0x000141a8,
+	0x013, 0x000100b4,
+	0x013, 0x0000c0a8,
+	0x013, 0x0000b030,
+	0x013, 0x00004024,
+	0x013, 0x00000018,
+	0x015, 0x0000f4c3,
+	0x015, 0x0004f4c3,
+	0x015, 0x0008f4c3,
+	0x016, 0x000e085f,
+	0x016, 0x000a085f,
+	0x016, 0x0006085f,
+	0x016, 0x0002085f,
+	0x018, 0x00037524,
+	0x000, 0x00070000,
+	0x012, 0x000cf000,
+	0x012, 0x000bc000,
+	0x012, 0x00078000,
+	0x012, 0x00000000,
+	0x013, 0x000287bc,
+	0x013, 0x000247b0,
+	0x013, 0x000203b4,
+	0x013, 0x0001c3a8,
+	0x013, 0x000181b4,
+	0x013, 0x000141a8,
+	0x013, 0x000100b4,
+	0x013, 0x0000c0a8,
+	0x013, 0x0000b030,
+	0x013, 0x00004024,
+	0x013, 0x00000018,
+	0x015, 0x0000f4c3,
+	0x015, 0x0004f4c3,
+	0x015, 0x0008f4c3,
+	0x016, 0x000e085f,
+	0x016, 0x000a085f,
+	0x016, 0x0006085f,
+	0x016, 0x0002085f,
+	0x018, 0x00057524,
+	0x000, 0x00070000,
+	0x012, 0x000cf000,
+	0x012, 0x000bc000,
+	0x012, 0x00078000,
+	0x012, 0x00000000,
+	0x013, 0x000287bc,
+	0x013, 0x000247b0,
+	0x013, 0x000203b4,
+	0x013, 0x0001c3a8,
+	0x013, 0x000181b4,
+	0x013, 0x000141a8,
+	0x013, 0x000100b4,
+	0x013, 0x0000c0a8,
+	0x013, 0x0000b030,
+	0x013, 0x00004024,
+	0x013, 0x00000018,
+	0x015, 0x0000f4c3,
+	0x015, 0x0004f4c3,
+	0x015, 0x0008f4c3,
+	0x016, 0x000e085f,
+	0x016, 0x000a085f,
+	0x016, 0x0006085f,
+	0x016, 0x0002085f,
+	0x030, 0x0004470f,
+	0x031, 0x00044ff0,
+	0x032, 0x00000070,
+	0x033, 0x000dd480,
+	0x034, 0x000ffac0,
+	0x035, 0x000b80c0,
+	0x036, 0x00077000,
+	0x037, 0x00064ff2,
+	0x038, 0x000e7661,
+	0x039, 0x00000e90,
+	0x000, 0x00030000,
+	0x018, 0x0000f401,
+	0x0fe, 0x00000000,
+	0x0fe, 0x00000000,
+	0x01e, 0x00088009,
+	0x01f, 0x00080003,
+	0x0fe, 0x00000000,
+	0x01e, 0x00088001,
+	0x01f, 0x00080000,
+	0x0fe, 0x00000000,
+	0x018, 0x00087401,
+	0x0fe, 0x00000000,
+	0x0fe, 0x00000000,
+	0x0fe, 0x00000000,
+	0x02b, 0x00041289,
+	0x0fe, 0x00000000,
+	0x02d, 0x00066666,
+	0x02e, 0x00064001,
+	0x02d, 0x00091111,
+	0x02e, 0x00014002,
+	0x02d, 0x000bbbbb,
+	0x02e, 0x000b4003,
+	0x02d, 0x000e6666,
+	0x02e, 0x00064004,
+	0x02d, 0x00088888,
+	0x02e, 0x00084005,
+	0x02d, 0x0009dddd,
+	0x02e, 0x000d4006,
+	0x02d, 0x000b3333,
+	0x02e, 0x00034007,
+	0x02d, 0x00048888,
+	0x02e, 0x00084408,
+	0x02d, 0x000bbbbb,
+	0x02e, 0x000b4409,
+	0x02d, 0x000e6666,
+	0x02e, 0x0006440a,
+	0x02d, 0x00011111,
+	0x02e, 0x0001480b,
+	0x02d, 0x0003bbbb,
+	0x02e, 0x000b480c,
+	0x02d, 0x00066666,
+	0x02e, 0x0006480d,
+	0x02d, 0x000ccccc,
+	0x02e, 0x000c480e,
 };
-
+	
 const u32 Rtl8192DURadioA_1TArray[Rtl8192DURadioA_1TArrayLength] = {
-0x0, };
-
+	0x0,
+};
+	
 const u32 Rtl8192DURadioB_1TArray[Rtl8192DURadioB_1TArrayLength] = {
-0x0, };
-
+	0x0,
+};
+	
 const u32 Rtl8192DURadioA_2T_intPAArray[Rtl8192DURadioA_2T_intPAArrayLength] = {
-0x000,0x00030000,
-0x001,0x00030000,
-0x002,0x00000000,
-0x003,0x00018c63,
-0x004,0x00018c63,
-0x008,0x00084000,
-0x00b,0x0001c000,
-0x00e,0x00018c67,
-0x00f,0x00000851,
-0x014,0x00021440,
-0x018,0x00017524,
-0x019,0x00000000,
-0x01d,0x000a1290,
-0x023,0x00001558,
-0x01a,0x00030a99,
-0x01b,0x00040b00,
-0x01c,0x000fc339,
-0x03a,0x000a57eb,
-0x03b,0x00020000,
-0x03c,0x000ff455,
-0x020,0x0000aa52,
-0x021,0x00054000,
-0x040,0x0000aa52,
-0x041,0x00014000,
-0x025,0x000803be,
-0x026,0x000fc638,
-0x027,0x00077c18,
-0x028,0x000de471,
-0x029,0x000d7110,
-0x02a,0x0008eb04,
-0x02b,0x0004128b,
-0x02c,0x00001840,
-0x043,0x0002444f,
-0x044,0x0001adb0,
-0x045,0x00056467,
-0x046,0x0008992c,
-0x047,0x0000452c,
-0x048,0x000c0443,
-0x049,0x00000730,
-0x04a,0x00050f0f,
-0x04b,0x000896ef,
-0x04c,0x0000ddee,
-0x018,0x00007401,
-0x000,0x00070000,
-0x012,0x000dc000,
-0x012,0x00090000,
-0x012,0x00051000,
-0x012,0x00012000,
-0x013,0x000287b7,
-0x013,0x000247ab,
-0x013,0x0002079f,
-0x013,0x0001c793,
-0x013,0x0001839b,
-0x013,0x00014392,
-0x013,0x0001019a,
-0x013,0x0000c191,
-0x013,0x00008194,
-0x013,0x000040a0,
-0x013,0x00000018,
-0x015,0x0000f424,
-0x015,0x0004f424,
-0x015,0x0008f424,
-0x016,0x000e1330,
-0x016,0x000a1330,
-0x016,0x00061330,
-0x016,0x00021330,
-0x018,0x00017524,
-0x000,0x00070000,
-0x012,0x000cf000,
-0x012,0x000bc000,
-0x012,0x00078000,
-0x012,0x00000000,
-0x013,0x000287bf,
-0x013,0x000247b3,
-0x013,0x000207a7,
-0x013,0x0001c79b,
-0x013,0x0001839f,
-0x013,0x00014393,
-0x013,0x00010399,
-0x013,0x0000c38d,
-0x013,0x00008199,
-0x013,0x0000418d,
-0x013,0x00000099,
-0x015,0x0000f495,
-0x015,0x0004f495,
-0x015,0x0008f495,
-0x016,0x000e1874,
-0x016,0x000a1874,
-0x016,0x00061874,
-0x016,0x00021874,
-0x018,0x00037564,
-0x000,0x00070000,
-0x012,0x000cf000,
-0x012,0x000bc000,
-0x012,0x00078000,
-0x012,0x00000000,
-0x013,0x000287bf,
-0x013,0x000247b3,
-0x013,0x000207a7,
-0x013,0x0001c79b,
-0x013,0x0001839f,
-0x013,0x00014393,
-0x013,0x00010399,
-0x013,0x0000c38d,
-0x013,0x00008199,
-0x013,0x0000418d,
-0x013,0x00000099,
-0x015,0x0000f495,
-0x015,0x0004f495,
-0x015,0x0008f495,
-0x016,0x000e1874,
-0x016,0x000a1874,
-0x016,0x00061874,
-0x016,0x00021874,
-0x018,0x00057595,
-0x000,0x00070000,
-0x012,0x000cf000,
-0x012,0x000bc000,
-0x012,0x00078000,
-0x012,0x00000000,
-0x013,0x000287bf,
-0x013,0x000247b3,
-0x013,0x000207a7,
-0x013,0x0001c79b,
-0x013,0x0001839f,
-0x013,0x00014393,
-0x013,0x00010399,
-0x013,0x0000c38d,
-0x013,0x00008199,
-0x013,0x0000418d,
-0x013,0x00000099,
-0x015,0x0000f495,
-0x015,0x0004f495,
-0x015,0x0008f495,
-0x016,0x000e1874,
-0x016,0x000a1874,
-0x016,0x00061874,
-0x016,0x00021874,
-0x030,0x0004470f,
-0x031,0x00044ff0,
-0x032,0x00000070,
-0x033,0x000dd480,
-0x034,0x000ffac0,
-0x035,0x000b80c0,
-0x036,0x00077000,
-0x037,0x00064ff2,
-0x038,0x000e7661,
-0x039,0x00000e90,
-0x000,0x00030000,
-0x018,0x0000f401,
-0x0fe,0x00000000,
-0x0fe,0x00000000,
-0x01e,0x00088009,
-0x01f,0x00080003,
-0x0fe,0x00000000,
-0x01e,0x00088001,
-0x01f,0x00080000,
-0x0fe,0x00000000,
-0x018,0x00097524,
-0x0fe,0x00000000,
-0x0fe,0x00000000,
-0x0fe,0x00000000,
-0x0fe,0x00000000,
-0x02b,0x00041289,
-0x0fe,0x00000000,
-0x02d,0x0006aaaa,
-0x02e,0x000b4d01,
-0x02d,0x00080000,
-0x02e,0x00004d02,
-0x02d,0x00095555,
-0x02e,0x00054d03,
-0x02d,0x000aaaaa,
-0x02e,0x000b4d04,
-0x02d,0x000c0000,
-0x02e,0x00004d05,
-0x02d,0x000d5555,
-0x02e,0x00054d06,
-0x02d,0x000eaaaa,
-0x02e,0x000b4d07,
-0x02d,0x00000000,
-0x02e,0x00005108,
-0x02d,0x00015555,
-0x02e,0x00055109,
-0x02d,0x0002aaaa,
-0x02e,0x000b510a,
-0x02d,0x00040000,
-0x02e,0x0000510b,
-0x02d,0x00055555,
-0x02e,0x0005510c,
+	0x000, 0x00030000,
+	0x001, 0x00030000,
+	0x002, 0x00000000,
+	0x003, 0x00018c63,
+	0x004, 0x00018c63,
+	0x008, 0x00084000,
+	0x00b, 0x0001c000,
+	0x00e, 0x00018c67,
+	0x00f, 0x00000851,
+	0x014, 0x00021440,
+	0x018, 0x00017524,
+	0x019, 0x00000000,
+	0x01d, 0x000a1290,
+	0x023, 0x00001558,
+	0x01a, 0x00030a99,
+	0x01b, 0x00040b00,
+	0x01c, 0x000fc339,
+	0x03a, 0x000a57eb,
+	0x03b, 0x00020000,
+	0x03c, 0x000ff455,
+	0x020, 0x0000aa52,
+	0x021, 0x00054000,
+	0x040, 0x0000aa52,
+	0x041, 0x00014000,
+	0x025, 0x000803be,
+	0x026, 0x000fc638,
+	0x027, 0x00077c18,
+	0x028, 0x000de471,
+	0x029, 0x000d7110,
+	0x02a, 0x0008eb04,
+	0x02b, 0x0004128b,
+	0x02c, 0x00001840,
+	0x043, 0x0002444f,
+	0x044, 0x0001adb0,
+	0x045, 0x00056467,
+	0x046, 0x0008992c,
+	0x047, 0x0000452c,
+	0x048, 0x000c0443,
+	0x049, 0x00000730,
+	0x04a, 0x00050f0f,
+	0x04b, 0x000896ef,
+	0x04c, 0x0000ddee,
+	0x018, 0x00007401,
+	0x000, 0x00070000,
+	0x012, 0x000dc000,
+	0x012, 0x00090000,
+	0x012, 0x00051000,
+	0x012, 0x00012000,
+	0x013, 0x000287b7,
+	0x013, 0x000247ab,
+	0x013, 0x0002079f,
+	0x013, 0x0001c793,
+	0x013, 0x0001839b,
+	0x013, 0x00014392,
+	0x013, 0x0001019a,
+	0x013, 0x0000c191,
+	0x013, 0x00008194,
+	0x013, 0x000040a0,
+	0x013, 0x00000018,
+	0x015, 0x0000f424,
+	0x015, 0x0004f424,
+	0x015, 0x0008f424,
+	0x016, 0x000e1330,
+	0x016, 0x000a1330,
+	0x016, 0x00061330,
+	0x016, 0x00021330,
+	0x018, 0x00017524,
+	0x000, 0x00070000,
+	0x012, 0x000cf000,
+	0x012, 0x000bc000,
+	0x012, 0x00078000,
+	0x012, 0x00000000,
+	0x013, 0x000287bf,
+	0x013, 0x000247b3,
+	0x013, 0x000207a7,
+	0x013, 0x0001c79b,
+	0x013, 0x0001839f,
+	0x013, 0x00014393,
+	0x013, 0x00010399,
+	0x013, 0x0000c38d,
+	0x013, 0x00008199,
+	0x013, 0x0000418d,
+	0x013, 0x00000099,
+	0x015, 0x0000f495,
+	0x015, 0x0004f495,
+	0x015, 0x0008f495,
+	0x016, 0x000e1874,
+	0x016, 0x000a1874,
+	0x016, 0x00061874,
+	0x016, 0x00021874,
+	0x018, 0x00037564,
+	0x000, 0x00070000,
+	0x012, 0x000cf000,
+	0x012, 0x000bc000,
+	0x012, 0x00078000,
+	0x012, 0x00000000,
+	0x013, 0x000287bf,
+	0x013, 0x000247b3,
+	0x013, 0x000207a7,
+	0x013, 0x0001c79b,
+	0x013, 0x0001839f,
+	0x013, 0x00014393,
+	0x013, 0x00010399,
+	0x013, 0x0000c38d,
+	0x013, 0x00008199,
+	0x013, 0x0000418d,
+	0x013, 0x00000099,
+	0x015, 0x0000f495,
+	0x015, 0x0004f495,
+	0x015, 0x0008f495,
+	0x016, 0x000e1874,
+	0x016, 0x000a1874,
+	0x016, 0x00061874,
+	0x016, 0x00021874,
+	0x018, 0x00057595,
+	0x000, 0x00070000,
+	0x012, 0x000cf000,
+	0x012, 0x000bc000,
+	0x012, 0x00078000,
+	0x012, 0x00000000,
+	0x013, 0x000287bf,
+	0x013, 0x000247b3,
+	0x013, 0x000207a7,
+	0x013, 0x0001c79b,
+	0x013, 0x0001839f,
+	0x013, 0x00014393,
+	0x013, 0x00010399,
+	0x013, 0x0000c38d,
+	0x013, 0x00008199,
+	0x013, 0x0000418d,
+	0x013, 0x00000099,
+	0x015, 0x0000f495,
+	0x015, 0x0004f495,
+	0x015, 0x0008f495,
+	0x016, 0x000e1874,
+	0x016, 0x000a1874,
+	0x016, 0x00061874,
+	0x016, 0x00021874,
+	0x030, 0x0004470f,
+	0x031, 0x00044ff0,
+	0x032, 0x00000070,
+	0x033, 0x000dd480,
+	0x034, 0x000ffac0,
+	0x035, 0x000b80c0,
+	0x036, 0x00077000,
+	0x037, 0x00064ff2,
+	0x038, 0x000e7661,
+	0x039, 0x00000e90,
+	0x000, 0x00030000,
+	0x018, 0x0000f401,
+	0x0fe, 0x00000000,
+	0x0fe, 0x00000000,
+	0x01e, 0x00088009,
+	0x01f, 0x00080003,
+	0x0fe, 0x00000000,
+	0x01e, 0x00088001,
+	0x01f, 0x00080000,
+	0x0fe, 0x00000000,
+	0x018, 0x00097524,
+	0x0fe, 0x00000000,
+	0x0fe, 0x00000000,
+	0x0fe, 0x00000000,
+	0x0fe, 0x00000000,
+	0x02b, 0x00041289,
+	0x0fe, 0x00000000,
+	0x02d, 0x0006aaaa,
+	0x02e, 0x000b4d01,
+	0x02d, 0x00080000,
+	0x02e, 0x00004d02,
+	0x02d, 0x00095555,
+	0x02e, 0x00054d03,
+	0x02d, 0x000aaaaa,
+	0x02e, 0x000b4d04,
+	0x02d, 0x000c0000,
+	0x02e, 0x00004d05,
+	0x02d, 0x000d5555,
+	0x02e, 0x00054d06,
+	0x02d, 0x000eaaaa,
+	0x02e, 0x000b4d07,
+	0x02d, 0x00000000,
+	0x02e, 0x00005108,
+	0x02d, 0x00015555,
+	0x02e, 0x00055109,
+	0x02d, 0x0002aaaa,
+	0x02e, 0x000b510a,
+	0x02d, 0x00040000,
+	0x02e, 0x0000510b,
+	0x02d, 0x00055555,
+	0x02e, 0x0005510c,
 };
-
+	
 const u32 Rtl8192DURadioB_2T_intPAArray[Rtl8192DURadioB_2T_intPAArrayLength] = {
-0x000,0x00030000,
-0x001,0x00030000,
-0x002,0x00000000,
-0x003,0x00018c63,
-0x004,0x00018c63,
-0x008,0x00084000,
-0x00b,0x0001c000,
-0x00e,0x00018c67,
-0x00f,0x00000851,
-0x014,0x00021440,
-0x018,0x00007401,
-0x019,0x00000060,
-0x01d,0x000a1290,
-0x023,0x00001558,
-0x01a,0x00030a99,
-0x01b,0x00040b00,
-0x01c,0x000fc339,
-0x03a,0x000a57eb,
-0x03b,0x00020000,
-0x03c,0x000ff455,
-0x020,0x0000aa52,
-0x021,0x00054000,
-0x040,0x0000aa52,
-0x041,0x00014000,
-0x025,0x000803be,
-0x026,0x000fc638,
-0x027,0x00077c18,
-0x028,0x000d1c31,
-0x029,0x000d7110,
-0x02a,0x000aeb04,
-0x02b,0x0004128b,
-0x02c,0x00001840,
-0x043,0x0002444f,
-0x044,0x0001adb0,
-0x045,0x00056467,
-0x046,0x0008992c,
-0x047,0x0000452c,
-0x048,0x000c0443,
-0x049,0x00000730,
-0x04a,0x00050f0f,
-0x04b,0x000896ef,
-0x04c,0x0000ddee,
-0x018,0x00007401,
-0x000,0x00070000,
-0x012,0x000dc000,
-0x012,0x00090000,
-0x012,0x00051000,
-0x012,0x00012000,
-0x013,0x000287b7,
-0x013,0x000247ab,
-0x013,0x0002079f,
-0x013,0x0001c793,
-0x013,0x0001839b,
-0x013,0x00014392,
-0x013,0x0001019a,
-0x013,0x0000c191,
-0x013,0x00008194,
-0x013,0x000040a0,
-0x013,0x00000018,
-0x015,0x0000f424,
-0x015,0x0004f424,
-0x015,0x0008f424,
-0x016,0x000e1330,
-0x016,0x000a1330,
-0x016,0x00061330,
-0x016,0x00021330,
-0x018,0x00017524,
-0x000,0x00070000,
-0x012,0x000cf000,
-0x012,0x000bc000,
-0x012,0x00078000,
-0x012,0x00000000,
-0x013,0x000287bf,
-0x013,0x000247b3,
-0x013,0x000207a7,
-0x013,0x0001c79b,
-0x013,0x0001839f,
-0x013,0x00014393,
-0x013,0x00010399,
-0x013,0x0000c38d,
-0x013,0x00008199,
-0x013,0x0000418d,
-0x013,0x00000099,
-0x015,0x0000f495,
-0x015,0x0004f495,
-0x015,0x0008f495,
-0x016,0x000e1874,
-0x016,0x000a1874,
-0x016,0x00061874,
-0x016,0x00021874,
-0x018,0x00037564,
-0x000,0x00070000,
-0x012,0x000cf000,
-0x012,0x000bc000,
-0x012,0x00078000,
-0x012,0x00000000,
-0x013,0x000287bf,
-0x013,0x000247b3,
-0x013,0x000207a7,
-0x013,0x0001c79b,
-0x013,0x0001839f,
-0x013,0x00014393,
-0x013,0x00010399,
-0x013,0x0000c38d,
-0x013,0x00008199,
-0x013,0x0000418d,
-0x013,0x00000099,
-0x015,0x0000f495,
-0x015,0x0004f495,
-0x015,0x0008f495,
-0x016,0x000e1874,
-0x016,0x000a1874,
-0x016,0x00061874,
-0x016,0x00021874,
-0x018,0x00057595,
-0x000,0x00070000,
-0x012,0x000cf000,
-0x012,0x000bc000,
-0x012,0x00078000,
-0x012,0x00000000,
-0x013,0x000287bf,
-0x013,0x000247b3,
-0x013,0x000207a7,
-0x013,0x0001c79b,
-0x013,0x0001839f,
-0x013,0x00014393,
-0x013,0x00010399,
-0x013,0x0000c38d,
-0x013,0x00008199,
-0x013,0x0000418d,
-0x013,0x00000099,
-0x015,0x0000f495,
-0x015,0x0004f495,
-0x015,0x0008f495,
-0x016,0x000e1874,
-0x016,0x000a1874,
-0x016,0x00061874,
-0x016,0x00021874,
-0x030,0x0004470f,
-0x031,0x00044ff0,
-0x032,0x00000070,
-0x033,0x000dd480,
-0x034,0x000ffac0,
-0x035,0x000b80c0,
-0x036,0x00077000,
-0x037,0x00064ff2,
-0x038,0x000e7661,
-0x039,0x00000e90,
-0x000,0x00030000,
-0x018,0x0000f401,
-0x0fe,0x00000000,
-0x0fe,0x00000000,
-0x01e,0x00088009,
-0x01f,0x00080003,
-0x0fe,0x00000000,
-0x01e,0x00088001,
-0x01f,0x00080000,
-0x0fe,0x00000000,
-0x018,0x00087401,
-0x0fe,0x00000000,
-0x0fe,0x00000000,
-0x0fe,0x00000000,
-0x02b,0x00041289,
-0x0fe,0x00000000,
-0x02d,0x00066666,
-0x02e,0x00064001,
-0x02d,0x00091111,
-0x02e,0x00014002,
-0x02d,0x000bbbbb,
-0x02e,0x000b4003,
-0x02d,0x000e6666,
-0x02e,0x00064004,
-0x02d,0x00088888,
-0x02e,0x00084005,
-0x02d,0x0009dddd,
-0x02e,0x000d4006,
-0x02d,0x000b3333,
-0x02e,0x00034007,
-0x02d,0x00048888,
-0x02e,0x00084408,
-0x02d,0x000bbbbb,
-0x02e,0x000b4409,
-0x02d,0x000e6666,
-0x02e,0x0006440a,
-0x02d,0x00011111,
-0x02e,0x0001480b,
-0x02d,0x0003bbbb,
-0x02e,0x000b480c,
-0x02d,0x00066666,
-0x02e,0x0006480d,
-0x02d,0x000ccccc,
-0x02e,0x000c480e,
+	0x000, 0x00030000,
+	0x001, 0x00030000,
+	0x002, 0x00000000,
+	0x003, 0x00018c63,
+	0x004, 0x00018c63,
+	0x008, 0x00084000,
+	0x00b, 0x0001c000,
+	0x00e, 0x00018c67,
+	0x00f, 0x00000851,
+	0x014, 0x00021440,
+	0x018, 0x00007401,
+	0x019, 0x00000060,
+	0x01d, 0x000a1290,
+	0x023, 0x00001558,
+	0x01a, 0x00030a99,
+	0x01b, 0x00040b00,
+	0x01c, 0x000fc339,
+	0x03a, 0x000a57eb,
+	0x03b, 0x00020000,
+	0x03c, 0x000ff455,
+	0x020, 0x0000aa52,
+	0x021, 0x00054000,
+	0x040, 0x0000aa52,
+	0x041, 0x00014000,
+	0x025, 0x000803be,
+	0x026, 0x000fc638,
+	0x027, 0x00077c18,
+	0x028, 0x000d1c31,
+	0x029, 0x000d7110,
+	0x02a, 0x000aeb04,
+	0x02b, 0x0004128b,
+	0x02c, 0x00001840,
+	0x043, 0x0002444f,
+	0x044, 0x0001adb0,
+	0x045, 0x00056467,
+	0x046, 0x0008992c,
+	0x047, 0x0000452c,
+	0x048, 0x000c0443,
+	0x049, 0x00000730,
+	0x04a, 0x00050f0f,
+	0x04b, 0x000896ef,
+	0x04c, 0x0000ddee,
+	0x018, 0x00007401,
+	0x000, 0x00070000,
+	0x012, 0x000dc000,
+	0x012, 0x00090000,
+	0x012, 0x00051000,
+	0x012, 0x00012000,
+	0x013, 0x000287b7,
+	0x013, 0x000247ab,
+	0x013, 0x0002079f,
+	0x013, 0x0001c793,
+	0x013, 0x0001839b,
+	0x013, 0x00014392,
+	0x013, 0x0001019a,
+	0x013, 0x0000c191,
+	0x013, 0x00008194,
+	0x013, 0x000040a0,
+	0x013, 0x00000018,
+	0x015, 0x0000f424,
+	0x015, 0x0004f424,
+	0x015, 0x0008f424,
+	0x016, 0x000e1330,
+	0x016, 0x000a1330,
+	0x016, 0x00061330,
+	0x016, 0x00021330,
+	0x018, 0x00017524,
+	0x000, 0x00070000,
+	0x012, 0x000cf000,
+	0x012, 0x000bc000,
+	0x012, 0x00078000,
+	0x012, 0x00000000,
+	0x013, 0x000287bf,
+	0x013, 0x000247b3,
+	0x013, 0x000207a7,
+	0x013, 0x0001c79b,
+	0x013, 0x0001839f,
+	0x013, 0x00014393,
+	0x013, 0x00010399,
+	0x013, 0x0000c38d,
+	0x013, 0x00008199,
+	0x013, 0x0000418d,
+	0x013, 0x00000099,
+	0x015, 0x0000f495,
+	0x015, 0x0004f495,
+	0x015, 0x0008f495,
+	0x016, 0x000e1874,
+	0x016, 0x000a1874,
+	0x016, 0x00061874,
+	0x016, 0x00021874,
+	0x018, 0x00037564,
+	0x000, 0x00070000,
+	0x012, 0x000cf000,
+	0x012, 0x000bc000,
+	0x012, 0x00078000,
+	0x012, 0x00000000,
+	0x013, 0x000287bf,
+	0x013, 0x000247b3,
+	0x013, 0x000207a7,
+	0x013, 0x0001c79b,
+	0x013, 0x0001839f,
+	0x013, 0x00014393,
+	0x013, 0x00010399,
+	0x013, 0x0000c38d,
+	0x013, 0x00008199,
+	0x013, 0x0000418d,
+	0x013, 0x00000099,
+	0x015, 0x0000f495,
+	0x015, 0x0004f495,
+	0x015, 0x0008f495,
+	0x016, 0x000e1874,
+	0x016, 0x000a1874,
+	0x016, 0x00061874,
+	0x016, 0x00021874,
+	0x018, 0x00057595,
+	0x000, 0x00070000,
+	0x012, 0x000cf000,
+	0x012, 0x000bc000,
+	0x012, 0x00078000,
+	0x012, 0x00000000,
+	0x013, 0x000287bf,
+	0x013, 0x000247b3,
+	0x013, 0x000207a7,
+	0x013, 0x0001c79b,
+	0x013, 0x0001839f,
+	0x013, 0x00014393,
+	0x013, 0x00010399,
+	0x013, 0x0000c38d,
+	0x013, 0x00008199,
+	0x013, 0x0000418d,
+	0x013, 0x00000099,
+	0x015, 0x0000f495,
+	0x015, 0x0004f495,
+	0x015, 0x0008f495,
+	0x016, 0x000e1874,
+	0x016, 0x000a1874,
+	0x016, 0x00061874,
+	0x016, 0x00021874,
+	0x030, 0x0004470f,
+	0x031, 0x00044ff0,
+	0x032, 0x00000070,
+	0x033, 0x000dd480,
+	0x034, 0x000ffac0,
+	0x035, 0x000b80c0,
+	0x036, 0x00077000,
+	0x037, 0x00064ff2,
+	0x038, 0x000e7661,
+	0x039, 0x00000e90,
+	0x000, 0x00030000,
+	0x018, 0x0000f401,
+	0x0fe, 0x00000000,
+	0x0fe, 0x00000000,
+	0x01e, 0x00088009,
+	0x01f, 0x00080003,
+	0x0fe, 0x00000000,
+	0x01e, 0x00088001,
+	0x01f, 0x00080000,
+	0x0fe, 0x00000000,
+	0x018, 0x00087401,
+	0x0fe, 0x00000000,
+	0x0fe, 0x00000000,
+	0x0fe, 0x00000000,
+	0x02b, 0x00041289,
+	0x0fe, 0x00000000,
+	0x02d, 0x00066666,
+	0x02e, 0x00064001,
+	0x02d, 0x00091111,
+	0x02e, 0x00014002,
+	0x02d, 0x000bbbbb,
+	0x02e, 0x000b4003,
+	0x02d, 0x000e6666,
+	0x02e, 0x00064004,
+	0x02d, 0x00088888,
+	0x02e, 0x00084005,
+	0x02d, 0x0009dddd,
+	0x02e, 0x000d4006,
+	0x02d, 0x000b3333,
+	0x02e, 0x00034007,
+	0x02d, 0x00048888,
+	0x02e, 0x00084408,
+	0x02d, 0x000bbbbb,
+	0x02e, 0x000b4409,
+	0x02d, 0x000e6666,
+	0x02e, 0x0006440a,
+	0x02d, 0x00011111,
+	0x02e, 0x0001480b,
+	0x02d, 0x0003bbbb,
+	0x02e, 0x000b480c,
+	0x02d, 0x00066666,
+	0x02e, 0x0006480d,
+	0x02d, 0x000ccccc,
+	0x02e, 0x000c480e,
 };
-
+	
 const u32 Rtl8192DUMAC_2T_Array[Rtl8192DUMAC_2T_ArrayLength] = {
-0x420,0x00000080,
-0x423,0x00000000,
-0x430,0x00000000,
-0x431,0x00000000,
-0x432,0x00000000,
-0x433,0x00000001,
-0x434,0x00000004,
-0x435,0x00000005,
-0x436,0x00000006,
-0x437,0x00000007,
-0x438,0x00000000,
-0x439,0x00000000,
-0x43a,0x00000000,
-0x43b,0x00000001,
-0x43c,0x00000004,
-0x43d,0x00000005,
-0x43e,0x00000006,
-0x43f,0x00000007,
-0x440,0x00000050,
-0x441,0x00000001,
-0x442,0x00000000,
-0x444,0x00000015,
-0x445,0x000000f0,
-0x446,0x0000000f,
-0x447,0x00000000,
-0x462,0x00000008,
-0x463,0x00000003,
-0x4c8,0x000000ff,
-0x4c9,0x00000008,
-0x4cc,0x000000ff,
-0x4cd,0x000000ff,
-0x4ce,0x00000001,
-0x500,0x00000026,
-0x501,0x000000a2,
-0x502,0x0000002f,
-0x503,0x00000000,
-0x504,0x00000028,
-0x505,0x000000a3,
-0x506,0x0000005e,
-0x507,0x00000000,
-0x508,0x0000002b,
-0x509,0x000000a4,
-0x50a,0x0000005e,
-0x50b,0x00000000,
-0x50c,0x0000004f,
-0x50d,0x000000a4,
-0x50e,0x00000000,
-0x50f,0x00000000,
-0x512,0x0000001c,
-0x514,0x0000000a,
-0x515,0x00000010,
-0x516,0x0000000a,
-0x517,0x00000010,
-0x51a,0x00000016,
-0x524,0x0000000f,
-0x525,0x0000004f,
-0x546,0x00000040,
-0x547,0x00000000,
-0x550,0x00000010,
-0x551,0x00000010,
-0x559,0x00000002,
-0x55a,0x00000002,
-0x55d,0x000000ff,
-0x605,0x00000080,
-0x608,0x0000000e,
-0x609,0x0000002a,
-0x652,0x00000020,
-0x63c,0x0000000a,
-0x63d,0x0000000a,
-0x63e,0x0000000e,
-0x63f,0x0000000e,
-0x66e,0x00000005,
-0x700,0x00000021,
-0x701,0x00000043,
-0x702,0x00000065,
-0x703,0x00000087,
-0x708,0x00000021,
-0x709,0x00000043,
-0x70a,0x00000065,
-0x70b,0x00000087,
-0x024,0x0000000d,
-0x025,0x00000080,
-0x026,0x00000011,
-0x027,0x00000000,
-0x028,0x00000083,
-0x029,0x000000db,
-0x02a,0x000000ff,
-0x02b,0x00000000,
-0x014,0x00000055,
-0x015,0x000000a9,
-0x016,0x0000008b,
-0x017,0x00000008,
-0x010,0x00000003,
-0x011,0x0000002b,
-0x012,0x00000002,
-0x013,0x00000049,
+	0x420, 0x00000080,
+	0x423, 0x00000000,
+	0x430, 0x00000000,
+	0x431, 0x00000000,
+	0x432, 0x00000000,
+	0x433, 0x00000001,
+	0x434, 0x00000004,
+	0x435, 0x00000005,
+	0x436, 0x00000006,
+	0x437, 0x00000007,
+	0x438, 0x00000000,
+	0x439, 0x00000000,
+	0x43a, 0x00000000,
+	0x43b, 0x00000001,
+	0x43c, 0x00000004,
+	0x43d, 0x00000005,
+	0x43e, 0x00000006,
+	0x43f, 0x00000007,
+	0x440, 0x00000050,
+	0x441, 0x00000001,
+	0x442, 0x00000000,
+	0x444, 0x00000015,
+	0x445, 0x000000f0,
+	0x446, 0x0000000f,
+	0x447, 0x00000000,
+	0x462, 0x00000008,
+	0x463, 0x00000003,
+	0x4c8, 0x000000ff,
+	0x4c9, 0x00000008,
+	0x4cc, 0x000000ff,
+	0x4cd, 0x000000ff,
+	0x4ce, 0x00000001,
+	0x500, 0x00000026,
+	0x501, 0x000000a2,
+	0x502, 0x0000002f,
+	0x503, 0x00000000,
+	0x504, 0x00000028,
+	0x505, 0x000000a3,
+	0x506, 0x0000005e,
+	0x507, 0x00000000,
+	0x508, 0x0000002b,
+	0x509, 0x000000a4,
+	0x50a, 0x0000005e,
+	0x50b, 0x00000000,
+	0x50c, 0x0000004f,
+	0x50d, 0x000000a4,
+	0x50e, 0x00000000,
+	0x50f, 0x00000000,
+	0x512, 0x0000001c,
+	0x514, 0x0000000a,
+	0x515, 0x00000010,
+	0x516, 0x0000000a,
+	0x517, 0x00000010,
+	0x51a, 0x00000016,
+	0x524, 0x0000000f,
+	0x525, 0x0000004f,
+	0x546, 0x00000040,
+	0x547, 0x00000000,
+	0x550, 0x00000010,
+	0x551, 0x00000010,
+	0x559, 0x00000002,
+	0x55a, 0x00000002,
+	0x55d, 0x000000ff,
+	0x605, 0x00000080,
+	0x608, 0x0000000e,
+	0x609, 0x0000002a,
+	0x652, 0x00000020,
+	0x63c, 0x0000000a,
+	0x63d, 0x0000000a,
+	0x63e, 0x0000000e,
+	0x63f, 0x0000000e,
+	0x66e, 0x00000005,
+	0x700, 0x00000021,
+	0x701, 0x00000043,
+	0x702, 0x00000065,
+	0x703, 0x00000087,
+	0x708, 0x00000021,
+	0x709, 0x00000043,
+	0x70a, 0x00000065,
+	0x70b, 0x00000087,
+	0x024, 0x0000000d,
+	0x025, 0x00000080,
+	0x026, 0x00000011,
+	0x027, 0x00000000,
+	0x028, 0x00000083,
+	0x029, 0x000000db,
+	0x02a, 0x000000ff,
+	0x02b, 0x00000000,
+	0x014, 0x00000055,
+	0x015, 0x000000a9,
+	0x016, 0x0000008b,
+	0x017, 0x00000008,
+	0x010, 0x00000003,
+	0x011, 0x0000002b,
+	0x012, 0x00000002,
+	0x013, 0x00000049,
 };
-
+	
 const u32 Rtl8192DUAGCTAB_Array[Rtl8192DUAGCTAB_ArrayLength] = {
-0xc78,0x7b000001,
-0xc78,0x7b010001,
-0xc78,0x7b020001,
-0xc78,0x7b030001,
-0xc78,0x7b040001,
-0xc78,0x7b050001,
-0xc78,0x7b060001,
-0xc78,0x7a070001,
-0xc78,0x79080001,
-0xc78,0x78090001,
-0xc78,0x770a0001,
-0xc78,0x760b0001,
-0xc78,0x750c0001,
-0xc78,0x740d0001,
-0xc78,0x730e0001,
-0xc78,0x720f0001,
-0xc78,0x71100001,
-0xc78,0x70110001,
-0xc78,0x6f120001,
-0xc78,0x6e130001,
-0xc78,0x6d140001,
-0xc78,0x6c150001,
-0xc78,0x6b160001,
-0xc78,0x6a170001,
-0xc78,0x69180001,
-0xc78,0x68190001,
-0xc78,0x671a0001,
-0xc78,0x661b0001,
-0xc78,0x651c0001,
-0xc78,0x641d0001,
-0xc78,0x631e0001,
-0xc78,0x621f0001,
-0xc78,0x61200001,
-0xc78,0x60210001,
-0xc78,0x49220001,
-0xc78,0x48230001,
-0xc78,0x47240001,
-0xc78,0x46250001,
-0xc78,0x45260001,
-0xc78,0x44270001,
-0xc78,0x43280001,
-0xc78,0x42290001,
-0xc78,0x412a0001,
-0xc78,0x402b0001,
-0xc78,0x262c0001,
-0xc78,0x252d0001,
-0xc78,0x242e0001,
-0xc78,0x232f0001,
-0xc78,0x22300001,
-0xc78,0x21310001,
-0xc78,0x20320001,
-0xc78,0x06330001,
-0xc78,0x05340001,
-0xc78,0x04350001,
-0xc78,0x03360001,
-0xc78,0x02370001,
-0xc78,0x01380001,
-0xc78,0x00390001,
-0xc78,0x003a0001,
-0xc78,0x003b0001,
-0xc78,0x003c0001,
-0xc78,0x003d0001,
-0xc78,0x003e0001,
-0xc78,0x003f0001,
-0xc78,0x7b400001,
-0xc78,0x7b410001,
-0xc78,0x7a420001,
-0xc78,0x79430001,
-0xc78,0x78440001,
-0xc78,0x77450001,
-0xc78,0x76460001,
-0xc78,0x75470001,
-0xc78,0x74480001,
-0xc78,0x73490001,
-0xc78,0x724a0001,
-0xc78,0x714b0001,
-0xc78,0x704c0001,
-0xc78,0x6f4d0001,
-0xc78,0x6e4e0001,
-0xc78,0x6d4f0001,
-0xc78,0x6c500001,
-0xc78,0x6b510001,
-0xc78,0x6a520001,
-0xc78,0x69530001,
-0xc78,0x68540001,
-0xc78,0x67550001,
-0xc78,0x66560001,
-0xc78,0x65570001,
-0xc78,0x64580001,
-0xc78,0x63590001,
-0xc78,0x625a0001,
-0xc78,0x615b0001,
-0xc78,0x605c0001,
-0xc78,0x485d0001,
-0xc78,0x475e0001,
-0xc78,0x465f0001,
-0xc78,0x45600001,
-0xc78,0x44610001,
-0xc78,0x43620001,
-0xc78,0x42630001,
-0xc78,0x41640001,
-0xc78,0x40650001,
-0xc78,0x27660001,
-0xc78,0x26670001,
-0xc78,0x25680001,
-0xc78,0x24690001,
-0xc78,0x236a0001,
-0xc78,0x226b0001,
-0xc78,0x216c0001,
-0xc78,0x206d0001,
-0xc78,0x206e0001,
-0xc78,0x206f0001,
-0xc78,0x20700001,
-0xc78,0x20710001,
-0xc78,0x20720001,
-0xc78,0x20730001,
-0xc78,0x20740001,
-0xc78,0x20750001,
-0xc78,0x20760001,
-0xc78,0x20770001,
-0xc78,0x20780001,
-0xc78,0x20790001,
-0xc78,0x207a0001,
-0xc78,0x207b0001,
-0xc78,0x207c0001,
-0xc78,0x207d0001,
-0xc78,0x207e0001,
-0xc78,0x207f0001,
-0xc78,0x38000002,
-0xc78,0x38010002,
-0xc78,0x38020002,
-0xc78,0x38030002,
-0xc78,0x38040002,
-0xc78,0x38050002,
-0xc78,0x38060002,
-0xc78,0x38070002,
-0xc78,0x38080002,
-0xc78,0x3c090002,
-0xc78,0x3e0a0002,
-0xc78,0x400b0002,
-0xc78,0x440c0002,
-0xc78,0x480d0002,
-0xc78,0x4c0e0002,
-0xc78,0x500f0002,
-0xc78,0x52100002,
-0xc78,0x56110002,
-0xc78,0x5a120002,
-0xc78,0x5e130002,
-0xc78,0x60140002,
-0xc78,0x60150002,
-0xc78,0x60160002,
-0xc78,0x62170002,
-0xc78,0x62180002,
-0xc78,0x62190002,
-0xc78,0x621a0002,
-0xc78,0x621b0002,
-0xc78,0x621c0002,
-0xc78,0x621d0002,
-0xc78,0x621e0002,
-0xc78,0x621f0002,
-0xc78,0x32000044,
-0xc78,0x32010044,
-0xc78,0x32020044,
-0xc78,0x32030044,
-0xc78,0x32040044,
-0xc78,0x32050044,
-0xc78,0x32060044,
-0xc78,0x34070044,
-0xc78,0x35080044,
-0xc78,0x36090044,
-0xc78,0x370a0044,
-0xc78,0x380b0044,
-0xc78,0x390c0044,
-0xc78,0x3a0d0044,
-0xc78,0x3e0e0044,
-0xc78,0x420f0044,
-0xc78,0x44100044,
-0xc78,0x46110044,
-0xc78,0x4a120044,
-0xc78,0x4e130044,
-0xc78,0x50140044,
-0xc78,0x55150044,
-0xc78,0x5a160044,
-0xc78,0x5e170044,
-0xc78,0x64180044,
-0xc78,0x6e190044,
-0xc78,0x6e1a0044,
-0xc78,0x6e1b0044,
-0xc78,0x6e1c0044,
-0xc78,0x6e1d0044,
-0xc78,0x6e1e0044,
-0xc78,0x6e1f0044,
-0xc78,0x6e1f0000,
+	0xc78, 0x7b000001,
+	0xc78, 0x7b010001,
+	0xc78, 0x7b020001,
+	0xc78, 0x7b030001,
+	0xc78, 0x7b040001,
+	0xc78, 0x7b050001,
+	0xc78, 0x7b060001,
+	0xc78, 0x7a070001,
+	0xc78, 0x79080001,
+	0xc78, 0x78090001,
+	0xc78, 0x770a0001,
+	0xc78, 0x760b0001,
+	0xc78, 0x750c0001,
+	0xc78, 0x740d0001,
+	0xc78, 0x730e0001,
+	0xc78, 0x720f0001,
+	0xc78, 0x71100001,
+	0xc78, 0x70110001,
+	0xc78, 0x6f120001,
+	0xc78, 0x6e130001,
+	0xc78, 0x6d140001,
+	0xc78, 0x6c150001,
+	0xc78, 0x6b160001,
+	0xc78, 0x6a170001,
+	0xc78, 0x69180001,
+	0xc78, 0x68190001,
+	0xc78, 0x671a0001,
+	0xc78, 0x661b0001,
+	0xc78, 0x651c0001,
+	0xc78, 0x641d0001,
+	0xc78, 0x631e0001,
+	0xc78, 0x621f0001,
+	0xc78, 0x61200001,
+	0xc78, 0x60210001,
+	0xc78, 0x49220001,
+	0xc78, 0x48230001,
+	0xc78, 0x47240001,
+	0xc78, 0x46250001,
+	0xc78, 0x45260001,
+	0xc78, 0x44270001,
+	0xc78, 0x43280001,
+	0xc78, 0x42290001,
+	0xc78, 0x412a0001,
+	0xc78, 0x402b0001,
+	0xc78, 0x262c0001,
+	0xc78, 0x252d0001,
+	0xc78, 0x242e0001,
+	0xc78, 0x232f0001,
+	0xc78, 0x22300001,
+	0xc78, 0x21310001,
+	0xc78, 0x20320001,
+	0xc78, 0x06330001,
+	0xc78, 0x05340001,
+	0xc78, 0x04350001,
+	0xc78, 0x03360001,
+	0xc78, 0x02370001,
+	0xc78, 0x01380001,
+	0xc78, 0x00390001,
+	0xc78, 0x003a0001,
+	0xc78, 0x003b0001,
+	0xc78, 0x003c0001,
+	0xc78, 0x003d0001,
+	0xc78, 0x003e0001,
+	0xc78, 0x003f0001,
+	0xc78, 0x7b400001,
+	0xc78, 0x7b410001,
+	0xc78, 0x7a420001,
+	0xc78, 0x79430001,
+	0xc78, 0x78440001,
+	0xc78, 0x77450001,
+	0xc78, 0x76460001,
+	0xc78, 0x75470001,
+	0xc78, 0x74480001,
+	0xc78, 0x73490001,
+	0xc78, 0x724a0001,
+	0xc78, 0x714b0001,
+	0xc78, 0x704c0001,
+	0xc78, 0x6f4d0001,
+	0xc78, 0x6e4e0001,
+	0xc78, 0x6d4f0001,
+	0xc78, 0x6c500001,
+	0xc78, 0x6b510001,
+	0xc78, 0x6a520001,
+	0xc78, 0x69530001,
+	0xc78, 0x68540001,
+	0xc78, 0x67550001,
+	0xc78, 0x66560001,
+	0xc78, 0x65570001,
+	0xc78, 0x64580001,
+	0xc78, 0x63590001,
+	0xc78, 0x625a0001,
+	0xc78, 0x615b0001,
+	0xc78, 0x605c0001,
+	0xc78, 0x485d0001,
+	0xc78, 0x475e0001,
+	0xc78, 0x465f0001,
+	0xc78, 0x45600001,
+	0xc78, 0x44610001,
+	0xc78, 0x43620001,
+	0xc78, 0x42630001,
+	0xc78, 0x41640001,
+	0xc78, 0x40650001,
+	0xc78, 0x27660001,
+	0xc78, 0x26670001,
+	0xc78, 0x25680001,
+	0xc78, 0x24690001,
+	0xc78, 0x236a0001,
+	0xc78, 0x226b0001,
+	0xc78, 0x216c0001,
+	0xc78, 0x206d0001,
+	0xc78, 0x206e0001,
+	0xc78, 0x206f0001,
+	0xc78, 0x20700001,
+	0xc78, 0x20710001,
+	0xc78, 0x20720001,
+	0xc78, 0x20730001,
+	0xc78, 0x20740001,
+	0xc78, 0x20750001,
+	0xc78, 0x20760001,
+	0xc78, 0x20770001,
+	0xc78, 0x20780001,
+	0xc78, 0x20790001,
+	0xc78, 0x207a0001,
+	0xc78, 0x207b0001,
+	0xc78, 0x207c0001,
+	0xc78, 0x207d0001,
+	0xc78, 0x207e0001,
+	0xc78, 0x207f0001,
+	0xc78, 0x38000002,
+	0xc78, 0x38010002,
+	0xc78, 0x38020002,
+	0xc78, 0x38030002,
+	0xc78, 0x38040002,
+	0xc78, 0x38050002,
+	0xc78, 0x38060002,
+	0xc78, 0x38070002,
+	0xc78, 0x38080002,
+	0xc78, 0x3c090002,
+	0xc78, 0x3e0a0002,
+	0xc78, 0x400b0002,
+	0xc78, 0x440c0002,
+	0xc78, 0x480d0002,
+	0xc78, 0x4c0e0002,
+	0xc78, 0x500f0002,
+	0xc78, 0x52100002,
+	0xc78, 0x56110002,
+	0xc78, 0x5a120002,
+	0xc78, 0x5e130002,
+	0xc78, 0x60140002,
+	0xc78, 0x60150002,
+	0xc78, 0x60160002,
+	0xc78, 0x62170002,
+	0xc78, 0x62180002,
+	0xc78, 0x62190002,
+	0xc78, 0x621a0002,
+	0xc78, 0x621b0002,
+	0xc78, 0x621c0002,
+	0xc78, 0x621d0002,
+	0xc78, 0x621e0002,
+	0xc78, 0x621f0002,
+	0xc78, 0x32000044,
+	0xc78, 0x32010044,
+	0xc78, 0x32020044,
+	0xc78, 0x32030044,
+	0xc78, 0x32040044,
+	0xc78, 0x32050044,
+	0xc78, 0x32060044,
+	0xc78, 0x34070044,
+	0xc78, 0x35080044,
+	0xc78, 0x36090044,
+	0xc78, 0x370a0044,
+	0xc78, 0x380b0044,
+	0xc78, 0x390c0044,
+	0xc78, 0x3a0d0044,
+	0xc78, 0x3e0e0044,
+	0xc78, 0x420f0044,
+	0xc78, 0x44100044,
+	0xc78, 0x46110044,
+	0xc78, 0x4a120044,
+	0xc78, 0x4e130044,
+	0xc78, 0x50140044,
+	0xc78, 0x55150044,
+	0xc78, 0x5a160044,
+	0xc78, 0x5e170044,
+	0xc78, 0x64180044,
+	0xc78, 0x6e190044,
+	0xc78, 0x6e1a0044,
+	0xc78, 0x6e1b0044,
+	0xc78, 0x6e1c0044,
+	0xc78, 0x6e1d0044,
+	0xc78, 0x6e1e0044,
+	0xc78, 0x6e1f0044,
+	0xc78, 0x6e1f0000,
 };
-
+	
 const u32 Rtl8192DUAGCTAB_5GArray[Rtl8192DUAGCTAB_5GArrayLength] = {
-0xc78,0x7b000001,
-0xc78,0x7b010001,
-0xc78,0x7a020001,
-0xc78,0x79030001,
-0xc78,0x78040001,
-0xc78,0x77050001,
-0xc78,0x76060001,
-0xc78,0x75070001,
-0xc78,0x74080001,
-0xc78,0x73090001,
-0xc78,0x720a0001,
-0xc78,0x710b0001,
-0xc78,0x700c0001,
-0xc78,0x6f0d0001,
-0xc78,0x6e0e0001,
-0xc78,0x6d0f0001,
-0xc78,0x6c100001,
-0xc78,0x6b110001,
-0xc78,0x6a120001,
-0xc78,0x69130001,
-0xc78,0x68140001,
-0xc78,0x67150001,
-0xc78,0x66160001,
-0xc78,0x65170001,
-0xc78,0x64180001,
-0xc78,0x63190001,
-0xc78,0x621a0001,
-0xc78,0x611b0001,
-0xc78,0x601c0001,
-0xc78,0x481d0001,
-0xc78,0x471e0001,
-0xc78,0x461f0001,
-0xc78,0x45200001,
-0xc78,0x44210001,
-0xc78,0x43220001,
-0xc78,0x42230001,
-0xc78,0x41240001,
-0xc78,0x40250001,
-0xc78,0x27260001,
-0xc78,0x26270001,
-0xc78,0x25280001,
-0xc78,0x24290001,
-0xc78,0x232a0001,
-0xc78,0x222b0001,
-0xc78,0x212c0001,
-0xc78,0x202d0001,
-0xc78,0x202e0001,
-0xc78,0x202f0001,
-0xc78,0x20300001,
-0xc78,0x20310001,
-0xc78,0x20320001,
-0xc78,0x20330001,
-0xc78,0x20340001,
-0xc78,0x20350001,
-0xc78,0x20360001,
-0xc78,0x20370001,
-0xc78,0x20380001,
-0xc78,0x20390001,
-0xc78,0x203a0001,
-0xc78,0x203b0001,
-0xc78,0x203c0001,
-0xc78,0x203d0001,
-0xc78,0x203e0001,
-0xc78,0x203f0001,
-0xc78,0x32000044,
-0xc78,0x32010044,
-0xc78,0x32020044,
-0xc78,0x32030044,
-0xc78,0x32040044,
-0xc78,0x32050044,
-0xc78,0x32060044,
-0xc78,0x34070044,
-0xc78,0x35080044,
-0xc78,0x36090044,
-0xc78,0x370a0044,
-0xc78,0x380b0044,
-0xc78,0x390c0044,
-0xc78,0x3a0d0044,
-0xc78,0x3e0e0044,
-0xc78,0x420f0044,
-0xc78,0x44100044,
-0xc78,0x46110044,
-0xc78,0x4a120044,
-0xc78,0x4e130044,
-0xc78,0x50140044,
-0xc78,0x55150044,
-0xc78,0x5a160044,
-0xc78,0x5e170044,
-0xc78,0x64180044,
-0xc78,0x6e190044,
-0xc78,0x6e1a0044,
-0xc78,0x6e1b0044,
-0xc78,0x6e1c0044,
-0xc78,0x6e1d0044,
-0xc78,0x6e1e0044,
-0xc78,0x6e1f0044,
-0xc78,0x6e1f0000,
+	0xc78, 0x7b000001,
+	0xc78, 0x7b010001,
+	0xc78, 0x7a020001,
+	0xc78, 0x79030001,
+	0xc78, 0x78040001,
+	0xc78, 0x77050001,
+	0xc78, 0x76060001,
+	0xc78, 0x75070001,
+	0xc78, 0x74080001,
+	0xc78, 0x73090001,
+	0xc78, 0x720a0001,
+	0xc78, 0x710b0001,
+	0xc78, 0x700c0001,
+	0xc78, 0x6f0d0001,
+	0xc78, 0x6e0e0001,
+	0xc78, 0x6d0f0001,
+	0xc78, 0x6c100001,
+	0xc78, 0x6b110001,
+	0xc78, 0x6a120001,
+	0xc78, 0x69130001,
+	0xc78, 0x68140001,
+	0xc78, 0x67150001,
+	0xc78, 0x66160001,
+	0xc78, 0x65170001,
+	0xc78, 0x64180001,
+	0xc78, 0x63190001,
+	0xc78, 0x621a0001,
+	0xc78, 0x611b0001,
+	0xc78, 0x601c0001,
+	0xc78, 0x481d0001,
+	0xc78, 0x471e0001,
+	0xc78, 0x461f0001,
+	0xc78, 0x45200001,
+	0xc78, 0x44210001,
+	0xc78, 0x43220001,
+	0xc78, 0x42230001,
+	0xc78, 0x41240001,
+	0xc78, 0x40250001,
+	0xc78, 0x27260001,
+	0xc78, 0x26270001,
+	0xc78, 0x25280001,
+	0xc78, 0x24290001,
+	0xc78, 0x232a0001,
+	0xc78, 0x222b0001,
+	0xc78, 0x212c0001,
+	0xc78, 0x202d0001,
+	0xc78, 0x202e0001,
+	0xc78, 0x202f0001,
+	0xc78, 0x20300001,
+	0xc78, 0x20310001,
+	0xc78, 0x20320001,
+	0xc78, 0x20330001,
+	0xc78, 0x20340001,
+	0xc78, 0x20350001,
+	0xc78, 0x20360001,
+	0xc78, 0x20370001,
+	0xc78, 0x20380001,
+	0xc78, 0x20390001,
+	0xc78, 0x203a0001,
+	0xc78, 0x203b0001,
+	0xc78, 0x203c0001,
+	0xc78, 0x203d0001,
+	0xc78, 0x203e0001,
+	0xc78, 0x203f0001,
+	0xc78, 0x32000044,
+	0xc78, 0x32010044,
+	0xc78, 0x32020044,
+	0xc78, 0x32030044,
+	0xc78, 0x32040044,
+	0xc78, 0x32050044,
+	0xc78, 0x32060044,
+	0xc78, 0x34070044,
+	0xc78, 0x35080044,
+	0xc78, 0x36090044,
+	0xc78, 0x370a0044,
+	0xc78, 0x380b0044,
+	0xc78, 0x390c0044,
+	0xc78, 0x3a0d0044,
+	0xc78, 0x3e0e0044,
+	0xc78, 0x420f0044,
+	0xc78, 0x44100044,
+	0xc78, 0x46110044,
+	0xc78, 0x4a120044,
+	0xc78, 0x4e130044,
+	0xc78, 0x50140044,
+	0xc78, 0x55150044,
+	0xc78, 0x5a160044,
+	0xc78, 0x5e170044,
+	0xc78, 0x64180044,
+	0xc78, 0x6e190044,
+	0xc78, 0x6e1a0044,
+	0xc78, 0x6e1b0044,
+	0xc78, 0x6e1c0044,
+	0xc78, 0x6e1d0044,
+	0xc78, 0x6e1e0044,
+	0xc78, 0x6e1f0044,
+	0xc78, 0x6e1f0000,
 };
-
+	
 const u32 Rtl8192DUAGCTAB_2GArray[Rtl8192DUAGCTAB_2GArrayLength] = {
-0xc78,0x7b000001,
-0xc78,0x7b010001,
-0xc78,0x7b020001,
-0xc78,0x7b030001,
-0xc78,0x7b040001,
-0xc78,0x7b050001,
-0xc78,0x7b060001,
-0xc78,0x7a070001,
-0xc78,0x79080001,
-0xc78,0x78090001,
-0xc78,0x770a0001,
-0xc78,0x760b0001,
-0xc78,0x750c0001,
-0xc78,0x740d0001,
-0xc78,0x730e0001,
-0xc78,0x720f0001,
-0xc78,0x71100001,
-0xc78,0x70110001,
-0xc78,0x6f120001,
-0xc78,0x6e130001,
-0xc78,0x6d140001,
-0xc78,0x6c150001,
-0xc78,0x6b160001,
-0xc78,0x6a170001,
-0xc78,0x69180001,
-0xc78,0x68190001,
-0xc78,0x671a0001,
-0xc78,0x661b0001,
-0xc78,0x651c0001,
-0xc78,0x641d0001,
-0xc78,0x631e0001,
-0xc78,0x621f0001,
-0xc78,0x61200001,
-0xc78,0x60210001,
-0xc78,0x49220001,
-0xc78,0x48230001,
-0xc78,0x47240001,
-0xc78,0x46250001,
-0xc78,0x45260001,
-0xc78,0x44270001,
-0xc78,0x43280001,
-0xc78,0x42290001,
-0xc78,0x412a0001,
-0xc78,0x402b0001,
-0xc78,0x262c0001,
-0xc78,0x252d0001,
-0xc78,0x242e0001,
-0xc78,0x232f0001,
-0xc78,0x22300001,
-0xc78,0x21310001,
-0xc78,0x20320001,
-0xc78,0x06330001,
-0xc78,0x05340001,
-0xc78,0x04350001,
-0xc78,0x03360001,
-0xc78,0x02370001,
-0xc78,0x01380001,
-0xc78,0x00390001,
-0xc78,0x003a0001,
-0xc78,0x003b0001,
-0xc78,0x003c0001,
-0xc78,0x003d0001,
-0xc78,0x003e0001,
-0xc78,0x003f0001,
-0xc78,0x38000002,
-0xc78,0x38010002,
-0xc78,0x38020002,
-0xc78,0x38030002,
-0xc78,0x38040002,
-0xc78,0x38050002,
-0xc78,0x38060002,
-0xc78,0x38070002,
-0xc78,0x38080002,
-0xc78,0x3c090002,
-0xc78,0x3e0a0002,
-0xc78,0x400b0002,
-0xc78,0x440c0002,
-0xc78,0x480d0002,
-0xc78,0x4c0e0002,
-0xc78,0x500f0002,
-0xc78,0x52100002,
-0xc78,0x56110002,
-0xc78,0x5a120002,
-0xc78,0x5e130002,
-0xc78,0x60140002,
-0xc78,0x60150002,
-0xc78,0x60160002,
-0xc78,0x62170002,
-0xc78,0x62180002,
-0xc78,0x62190002,
-0xc78,0x621a0002,
-0xc78,0x621b0002,
-0xc78,0x621c0002,
-0xc78,0x621d0002,
-0xc78,0x621e0002,
-0xc78,0x621f0002,
-0xc78,0x6e1f0000,
+	0xc78, 0x7b000001,
+	0xc78, 0x7b010001,
+	0xc78, 0x7b020001,
+	0xc78, 0x7b030001,
+	0xc78, 0x7b040001,
+	0xc78, 0x7b050001,
+	0xc78, 0x7b060001,
+	0xc78, 0x7a070001,
+	0xc78, 0x79080001,
+	0xc78, 0x78090001,
+	0xc78, 0x770a0001,
+	0xc78, 0x760b0001,
+	0xc78, 0x750c0001,
+	0xc78, 0x740d0001,
+	0xc78, 0x730e0001,
+	0xc78, 0x720f0001,
+	0xc78, 0x71100001,
+	0xc78, 0x70110001,
+	0xc78, 0x6f120001,
+	0xc78, 0x6e130001,
+	0xc78, 0x6d140001,
+	0xc78, 0x6c150001,
+	0xc78, 0x6b160001,
+	0xc78, 0x6a170001,
+	0xc78, 0x69180001,
+	0xc78, 0x68190001,
+	0xc78, 0x671a0001,
+	0xc78, 0x661b0001,
+	0xc78, 0x651c0001,
+	0xc78, 0x641d0001,
+	0xc78, 0x631e0001,
+	0xc78, 0x621f0001,
+	0xc78, 0x61200001,
+	0xc78, 0x60210001,
+	0xc78, 0x49220001,
+	0xc78, 0x48230001,
+	0xc78, 0x47240001,
+	0xc78, 0x46250001,
+	0xc78, 0x45260001,
+	0xc78, 0x44270001,
+	0xc78, 0x43280001,
+	0xc78, 0x42290001,
+	0xc78, 0x412a0001,
+	0xc78, 0x402b0001,
+	0xc78, 0x262c0001,
+	0xc78, 0x252d0001,
+	0xc78, 0x242e0001,
+	0xc78, 0x232f0001,
+	0xc78, 0x22300001,
+	0xc78, 0x21310001,
+	0xc78, 0x20320001,
+	0xc78, 0x06330001,
+	0xc78, 0x05340001,
+	0xc78, 0x04350001,
+	0xc78, 0x03360001,
+	0xc78, 0x02370001,
+	0xc78, 0x01380001,
+	0xc78, 0x00390001,
+	0xc78, 0x003a0001,
+	0xc78, 0x003b0001,
+	0xc78, 0x003c0001,
+	0xc78, 0x003d0001,
+	0xc78, 0x003e0001,
+	0xc78, 0x003f0001,
+	0xc78, 0x38000002,
+	0xc78, 0x38010002,
+	0xc78, 0x38020002,
+	0xc78, 0x38030002,
+	0xc78, 0x38040002,
+	0xc78, 0x38050002,
+	0xc78, 0x38060002,
+	0xc78, 0x38070002,
+	0xc78, 0x38080002,
+	0xc78, 0x3c090002,
+	0xc78, 0x3e0a0002,
+	0xc78, 0x400b0002,
+	0xc78, 0x440c0002,
+	0xc78, 0x480d0002,
+	0xc78, 0x4c0e0002,
+	0xc78, 0x500f0002,
+	0xc78, 0x52100002,
+	0xc78, 0x56110002,
+	0xc78, 0x5a120002,
+	0xc78, 0x5e130002,
+	0xc78, 0x60140002,
+	0xc78, 0x60150002,
+	0xc78, 0x60160002,
+	0xc78, 0x62170002,
+	0xc78, 0x62180002,
+	0xc78, 0x62190002,
+	0xc78, 0x621a0002,
+	0xc78, 0x621b0002,
+	0xc78, 0x621c0002,
+	0xc78, 0x621d0002,
+	0xc78, 0x621e0002,
+	0xc78, 0x621f0002,
+	0xc78, 0x6e1f0000,
 };
-
+	
 const u32 Rtl8192DUAGCTAB_2TArray[Rtl8192DUAGCTAB_2TArrayLength] = {
-0x0, };
-
+	0x0,
+};
+	
 const u32 Rtl8192DUAGCTAB_1TArray[Rtl8192DUAGCTAB_1TArrayLength] = {
-0x0, };
+	0x0,
+};
--- a/drivers/staging/rtl8192du/hal/rtl8192d_hal_init.c
+++ b/drivers/staging/rtl8192du/hal/rtl8192d_hal_init.c
@@ -23,6 +23,7 @@
 #include <usb_hal.h>
 #include <rtl8192d_hal.h>
 #include <linux/vmalloc.h>
+#include <linux/firmware.h>
 
 atomic_t GlobalMutexForGlobaladapterList = ATOMIC_INIT(0);
 atomic_t GlobalMutexForMac0_2G_Mac1_5G = ATOMIC_INIT(0);
@@ -34,10 +35,7 @@ atomic_t GlobalCounterForMutex = ATOMIC_
 bool GlobalFirstConfigurationForNormalChip = true;
 #endif
 
-static bool
-_IsFWDownloaded(
-	struct rtw_adapter *			adapter
-	)
+static bool _IsFWDownloaded(struct rtw_adapter *adapter)
 {
 	return ((rtw_read32(adapter, REG_MCUFWDL) & MCUFWDL_RDY) ? true : false);
 }
@@ -50,7 +48,7 @@ static void _FWDownloadEnable(struct rtw
 		#ifdef DBG_SHOW_MCUFWDL_BEFORE_51_ENABLE
 		{
 			u8 val;
-			if ((val=rtw_read8(adapter, REG_MCUFWDL)))
+			if ((val = rtw_read8(adapter, REG_MCUFWDL)))
 				DBG_8192D("DBG_SHOW_MCUFWDL_BEFORE_51_ENABLE %s:%d REG_MCUFWDL:0x%02x\n", __func__, __LINE__, val);
 		}
 		#endif
@@ -80,13 +78,13 @@ static int _BlockWrite_92d(struct rtw_ad
 	u32			blockSize = 64;
 	u8*			bufferPtr = (u8*)buffer;
 	u32*		pu4BytePtr = (u32*)buffer;
-	u32			i, offset, blockCount, remainSize,remain8,remain4,blockCount8,blockCount4;
+	u32			i, offset, blockCount, remainSize, remain8, remain4, blockCount8, blockCount4;
 
 	blockCount = size / blockSize;
 	remain8 = size % blockSize;
-	for (i = 0 ; i < blockCount ; i++) {
+	for (i = 0; i < blockCount; i++) {
 		offset = i * blockSize;
-		ret = rtw_writeN(adapter, (FW_8192D_START_ADDRESS + offset), 64,(bufferPtr + offset));
+		ret = rtw_writeN(adapter, (FW_8192D_START_ADDRESS + offset), 64, (bufferPtr + offset));
 
 		if (ret == _FAIL)
 			goto exit;
@@ -95,21 +93,21 @@ static int _BlockWrite_92d(struct rtw_ad
 	if (remain8) {
 		offset = blockCount * blockSize;
 
-		blockCount8=remain8/blockSize8;
-		remain4=remain8%blockSize8;
-		for (i = 0 ; i < blockCount8 ; i++) {
-			ret = rtw_writeN(adapter, (FW_8192D_START_ADDRESS + offset+i*blockSize8), 8,(bufferPtr + offset+i*blockSize8));
+		blockCount8 = remain8/blockSize8;
+		remain4 = remain8%blockSize8;
+		for (i = 0; i < blockCount8; i++) {
+			ret = rtw_writeN(adapter, (FW_8192D_START_ADDRESS + offset+i*blockSize8), 8, (bufferPtr + offset+i*blockSize8));
 
 			if (ret == _FAIL)
 				goto exit;
 		}
 
 		if (remain4) {
-			offset=blockCount * blockSize+blockCount8*blockSize8;
-			blockCount4=remain4/blocksize4;
-			remainSize=remain8%blocksize4;
+			offset = blockCount * blockSize+blockCount8*blockSize8;
+			blockCount4 = remain4/blocksize4;
+			remainSize = remain8%blocksize4;
 
-			for (i = 0 ; i < blockCount4 ; i++) {
+			for (i = 0; i < blockCount4; i++) {
 				ret = rtw_write32(adapter, (FW_8192D_START_ADDRESS + offset+i*blocksize4), le32_to_cpu(*(__le32 *)(pu4BytePtr+ offset/4+i)));
 
 				if (ret == _FAIL)
@@ -117,8 +115,8 @@ static int _BlockWrite_92d(struct rtw_ad
 			}
 
 			if (remainSize) {
-				offset=blockCount * blockSize+blockCount8*blockSize8+blockCount4*blocksize4;
-				for (i = 0 ; i < remainSize ; i++) {
+				offset = blockCount * blockSize+blockCount8*blockSize8+blockCount4*blocksize4;
+				for (i = 0; i < remainSize; i++) {
 					ret = rtw_write8(adapter, (FW_8192D_START_ADDRESS + offset + i), *(bufferPtr +offset+ i));
 
 					if (ret == _FAIL)
@@ -138,10 +136,10 @@ static int _PageWrite(struct rtw_adapter
 		      void *buffer, u32 size)
 {
 	u8 value8;
-	u8 u8page = (u8)(page & 0x07) ;
+	u8 u8page = (u8)(page & 0x07);
 
-	value8 = (rtw_read8(adapter, REG_MCUFWDL+2)& 0xF8) | u8page ;
-	rtw_write8(adapter, REG_MCUFWDL+2,value8);
+	value8 = (rtw_read8(adapter, REG_MCUFWDL+2)& 0xF8) | u8page;
+	rtw_write8(adapter, REG_MCUFWDL+2, value8);
 	return _BlockWrite_92d(adapter, buffer, size);
 }
 
@@ -152,16 +150,16 @@ static int _WriteFW(struct rtw_adapter *
 	 *  we call this function to get chip version.
 	 *  We can remove _ReadChipVersion from ReadadapterInfo8192C later.
 	 */
-	u32 pageNums,remainSize ;
-	u32 page,offset;
+	u32 pageNums, remainSize;
+	u32 page, offset;
 	u8 *bufferPtr = (u8*)buffer;
 
-	pageNums = size / MAX_PAGE_SIZE ;
+	pageNums = size / MAX_PAGE_SIZE;
 	remainSize = size % MAX_PAGE_SIZE;
 
 	for (page = 0; page < pageNums;  page++) {
 		offset = page *MAX_PAGE_SIZE;
-		ret = _PageWrite(adapter,page, (bufferPtr+offset),MAX_PAGE_SIZE);
+		ret = _PageWrite(adapter, page, (bufferPtr+offset), MAX_PAGE_SIZE);
 
 		if (ret == _FAIL)
 			goto exit;
@@ -169,7 +167,7 @@ static int _WriteFW(struct rtw_adapter *
 	if (remainSize) {
 		offset = pageNums *MAX_PAGE_SIZE;
 		page = pageNums;
-		ret = _PageWrite(adapter,page, (bufferPtr+offset),remainSize);
+		ret = _PageWrite(adapter, page, (bufferPtr+offset), remainSize);
 
 		if (ret == _FAIL)
 			goto exit;
@@ -188,13 +186,13 @@ static int _FWFreeToGo_92D(struct rtw_ad
 	do {
 		value32 = rtw_read32(adapter, REG_MCUFWDL);
 	} while ((counter ++ < POLLING_READY_TIMEOUT_COUNT) &&
-		 (!(value32 & FWDL_ChkSum_rpt )));
+		 (!(value32 & FWDL_ChkSum_rpt)));
 
 	if (counter >= POLLING_READY_TIMEOUT_COUNT) {
-		DBG_8192D("chksum report faill ! REG_MCUFWDL:0x%08x .\n",value32);
+		DBG_8192D("chksum report faill ! REG_MCUFWDL:0x%08x .\n", value32);
 		return _FAIL;
 	}
-	DBG_8192D("Checksum report OK ! REG_MCUFWDL:0x%08x .\n",value32);
+	DBG_8192D("Checksum report OK ! REG_MCUFWDL:0x%08x .\n", value32);
 
 	value32 = rtw_read32(adapter, REG_MCUFWDL);
 	value32 |= MCUFWDL_RDY;
@@ -213,7 +211,7 @@ void rtl8192d_FirmwareSelfReset(struct r
 	/*  close mask to prevent incorrect FW write operation. */
 	rtw_write8(adapter, REG_FTIMR, 0x00);
 
-	/* 0x1cf=0x20. Inform 8051 to reset. 2009.12.25. tynli_test */
+	/* 0x1cf = 0x20. Inform 8051 to reset. 2009.12.25. tynli_test */
 	rtw_write8(adapter, REG_HMETFR+3, 0x20);
 
 	u1bTmp = rtw_read8(adapter, REG_SYS_FUNC_EN+1);
@@ -228,7 +226,7 @@ void rtl8192d_FirmwareSelfReset(struct r
 	if ((u1bTmp&BIT2) && (Delay == 0)) {
 		rtw_write8(adapter, REG_FWIMR, 0x00);
 		/* debug reset fail */
-		pr_info("FirmwareDownload92C(): Fail! 0x1c = %x, 0x130=>%08x, 0x134=>%08x, 0x138=>%08x, 0x1c4=>%08x\n, 0x1cc=>%08x, , 0x80=>%08x , 0x1c0=>%08x\n",
+		pr_info("FirmwareDownload92C(): Fail! 0x1c = %x, 0x130 =>%08x, 0x134 =>%08x, 0x138 =>%08x, 0x1c4 =>%08x\n, 0x1cc =>%08x, , 0x80 =>%08x , 0x1c0 =>%08x\n",
 		        rtw_read32(adapter, 0x1c), rtw_read32(adapter, 0x130),
 			rtw_read32(adapter, 0x134), rtw_read32(adapter, 0x138),
 			rtw_read32(adapter, 0x1c4), rtw_read32(adapter, 0x1cc),
@@ -242,7 +240,7 @@ static int _FWInit(struct rtw_adapter *a
 	struct hal_data_8192du *pHalData = GET_HAL_DATA(adapter);
 	u32 counter = 0;
 
-	DBG_8192D("FW already have download ;\n");
+	DBG_8192D("FW already have download\n");
 
 	/*  polling for FW ready */
 	counter = 0;
@@ -265,7 +263,7 @@ static int _FWInit(struct rtw_adapter *a
 
 	} while (counter++ < POLLING_READY_TIMEOUT_COUNT);
 
-	if (pHalData->interfaceIndex==0) {
+	if (pHalData->interfaceIndex == 0) {
 		DBG_8192D("Polling FW ready fail!! MAC0 FW init not ready:0x%x\n",
 			  rtw_read8(adapter, FW_MAC0_ready));
 	} else {
@@ -278,6 +276,51 @@ static int _FWInit(struct rtw_adapter *a
 	return _FAIL;
 }
 
+static int get_fw_from_file(struct rtw_adapter *adapter)
+{
+	struct dvobj_priv *dvobj = adapter_to_dvobj(adapter);
+	struct device *device = dvobj_to_dev(dvobj);
+	const struct firmware *fw;
+	int rtstatus = _SUCCESS;
+#ifdef CONFIG_WOWLAN
+	const char *fw_name = "rtlwifi/rtl8192dufw_wol.bin";
+#else
+	const char *fw_name = "rtlwifi/rtl8192dufw.bin";
+#endif /* CONFIG_WOWLAN */
+
+	if (request_firmware(&fw, fw_name, device))
+		return _FAIL;
+	if (!fw) {
+		pr_err("Firmware %s not available\n", fw_name);
+		return _FAIL;
+	}
+	if (fw->size > 0x8000) {
+		rtstatus = _FAIL;
+		pr_err("Firmware size exceeds 0x8000. Check it.\n");
+		goto exit;
+	}
+
+	adapter->firmware = kmalloc(sizeof(struct rt_firmware_92d), GFP_KERNEL);
+	if (!adapter->firmware) {
+		rtstatus = _FAIL;
+		goto exit;
+	}
+	adapter->firmware->buffer = vzalloc(fw->size);
+	if (!adapter->firmware->buffer) {
+		kfree(adapter->firmware);
+		adapter->firmware = NULL;
+		rtstatus = _FAIL;
+		goto exit;
+	}
+	memcpy(adapter->firmware->buffer, fw->data, fw->size);
+	adapter->firmware->length = fw->size;
+	pr_info("r8192du: Loaded firmware file %s of %d bytes\n",
+		fw_name, adapter->firmware->length);
+exit:
+	release_firmware(fw);
+	return rtstatus;
+}
+
 /*	Description: Download 8192D firmware code. */
 int FirmwareDownload92D(struct rtw_adapter *adapter, bool bUsedWoWLANFw)
 {
@@ -292,7 +335,6 @@ int FirmwareDownload92D(struct rtw_adapt
 	u8 *FwImageWoWLAN;
 	u32 FwImageWoWLANLen;
 #endif /* CONFIG_WOWLAN */
-	struct RT_FIRMWARE_92D	*pFirmware = NULL;
 	struct rt_8192d_firmware_hdr *pFwHdr = NULL;
 	u8 *pFirmwareBuf;
 	u32 FirmwareLen;
@@ -303,94 +345,30 @@ int FirmwareDownload92D(struct rtw_adapt
 	if (adapter->bSurpriseRemoved)
 		return _FAIL;
 
-	pFirmware = (struct RT_FIRMWARE_92D *)vzalloc(sizeof(struct RT_FIRMWARE_92D));
-	if (!pFirmware) {
-		rtStatus = _FAIL;
-		goto Exit;
-	}
-
-	FwImage = (u8 *)Rtl8192D_FwImageArray;
-	FwImageLen = Rtl8192D_FwImageArrayLength;
-#ifdef CONFIG_WOWLAN
-	FwImageWoWLAN= Rtl8192D_FwWWImageArray;
-	FwImageWoWLANLen =DUWWImgArrayLength ;
-#endif /* CONFIG_WOWLAN */
-	DBG_8192D(" ===> FirmwareDownload92D() fw:Rtl8192D_FwImageArray\n");
-
-	#ifdef CONFIG_FILE_FWIMG
-	if (rtw_is_file_readable(rtw_fw_file_path) == true)
-	{
-		DBG_8192D("%s accquire FW from file:%s\n", __func__, rtw_fw_file_path);
-		pFirmware->eFWSource = FW_SOURCE_IMG_FILE; /*  We should decided by Reg. */
-	}
-	else
-	#endif /* CONFIG_FILE_FWIMG */
-	{
-		DBG_8192D("%s accquire FW from embedded image\n", __func__);
-		pFirmware->eFWSource = FW_SOURCE_HEADER_FILE;
-	}
-
-	switch (pFirmware->eFWSource)
-	{
-		case FW_SOURCE_IMG_FILE:
-
-			#ifdef CONFIG_FILE_FWIMG
-			rtStatus = rtw_retrive_from_file(rtw_fw_file_path, FwBuffer8192D, FW_8192D_SIZE);
-
-			pFirmware->ulFwLength = rtStatus>=0?rtStatus:0;
-			pFirmware->szFwBuffer = FwBuffer8192D;
-			#endif /* CONFIG_FILE_FWIMG */
-
-			if (pFirmware->ulFwLength <= 0)
-			{
-				rtStatus = _FAIL;
-				goto Exit;
-			}
-			break;
-		case FW_SOURCE_HEADER_FILE:
-			pFirmware->szFwBuffer = FwImage;
-			pFirmware->ulFwLength = FwImageLen;
-#ifdef CONFIG_WOWLAN
-			if (bUsedWoWLANFw)
-			{
-				pFirmware->szWoWLANFwBuffer=FwImageWoWLAN;
-				pFirmware->ulWoWLANFwLength = FwImageWoWLANLen;
-			}
-#endif /* CONFIG_WOWLAN */
-			break;
-	}
-
-#ifdef CONFIG_WOWLAN
-	if (bUsedWoWLANFw)	{
-		pFirmwareBuf = pFirmware->szWoWLANFwBuffer;
-		FirmwareLen = pFirmware->ulWoWLANFwLength;
-		pFwHdr = (struct rt_8192d_firmware_hdr *)pFirmware->szWoWLANFwBuffer;
+	if (!adapter->firmware) {
+		if (get_fw_from_file(adapter)) {
+			rtStatus = _FAIL;
+			adapter->firmware = NULL;
+			goto Exit;
+		}
 	}
-	else
-#endif /* CONFIG_WOWLAN */
-	{
-	pFirmwareBuf = pFirmware->szFwBuffer;
-	FirmwareLen = pFirmware->ulFwLength;
+	pFirmwareBuf = adapter->firmware->buffer;
+	FirmwareLen = adapter->firmware->length;
 
 	/*  To Check Fw header. Added by tynli. 2009.12.04. */
-	pFwHdr = (struct rt_8192d_firmware_hdr *)pFirmware->szFwBuffer;
-	}
+	pFwHdr = (struct rt_8192d_firmware_hdr *)adapter->firmware->buffer;
 
 	pHalData->FirmwareVersion =  le16_to_cpu(pFwHdr->Version);
 	pHalData->FirmwareSubVersion = pFwHdr->Subversion;
 
-	DBG_8192D(" FirmwareVersion(%#x), Signature(%#x)\n", pHalData->FirmwareVersion, le16_to_cpu(pFwHdr->Signature));
-
-	if (IS_FW_HEADER_EXIST(pFwHdr))
-	{
+	if (IS_FW_HEADER_EXIST(pFwHdr)) {
 		pFirmwareBuf = pFirmwareBuf + 32;
 		FirmwareLen = FirmwareLen -32;
 	}
 
 #ifdef CONFIG_WOWLAN
 	/* write 0x5 BIT(3), don't suspend to reset MAC */
-	if (bUsedWoWLANFw)
-	{
+	if (bUsedWoWLANFw) {
 		u8 test;
 		test = rtw_read8(adapter, REG_APS_FSMCO+1);
 		test &= ~BIT(3);
@@ -400,117 +378,99 @@ int FirmwareDownload92D(struct rtw_adapt
 #endif /* CONFIG_WOWLAN */
 	ACQUIRE_GLOBAL_MUTEX(GlobalMutexForFwDownload);
 	if (pHalData->MacPhyMode92D == DUALMAC_DUALPHY ||
-		pHalData->MacPhyMode92D == DUALMAC_SINGLEPHY)
-	{
-
-	bFwDownloaded = _IsFWDownloaded(adapter);
-	if ((rtw_read8(adapter, 0x1f)&BIT5) == BIT5)
-		bFwDownloadInProcess = true;
-	else
-		bFwDownloadInProcess = false;
-	}
+	    pHalData->MacPhyMode92D == DUALMAC_SINGLEPHY) {
+		bFwDownloaded = _IsFWDownloaded(adapter);
+		if ((rtw_read8(adapter, 0x1f)&BIT5) == BIT5)
+			bFwDownloadInProcess = true;
+		else
+			bFwDownloadInProcess = false;
 
-	if (bFwDownloaded)
-	{
-		RELEASE_GLOBAL_MUTEX(GlobalMutexForFwDownload);
-		goto Exit;
-	}
-	else if (bFwDownloadInProcess)
-	{
-		RELEASE_GLOBAL_MUTEX(GlobalMutexForFwDownload);
-		for (count=0;count<5000;count++)
-		{
-			rtw_udelay_os(500);
+		if (bFwDownloaded) {
+			RELEASE_GLOBAL_MUTEX(GlobalMutexForFwDownload);
+			goto Exit;
+		} else if (bFwDownloadInProcess) {
+			RELEASE_GLOBAL_MUTEX(GlobalMutexForFwDownload);
+			for (count = 0; count < 5000; count++) {
+				rtw_udelay_os(500);
+				ACQUIRE_GLOBAL_MUTEX(GlobalMutexForFwDownload);
+				bFwDownloaded = _IsFWDownloaded(adapter);
+				if ((rtw_read8(adapter, 0x1f)&BIT5) == BIT5)
+					bFwDownloadInProcess = true;
+				else
+					bFwDownloadInProcess = false;
+				RELEASE_GLOBAL_MUTEX(GlobalMutexForFwDownload);
+				if (bFwDownloaded)
+					goto Exit;
+				else if (!bFwDownloadInProcess)
+					break;
+				else
+					DBG_8192D("Wait for another mac download fw\n");
+			}
 			ACQUIRE_GLOBAL_MUTEX(GlobalMutexForFwDownload);
-			bFwDownloaded = _IsFWDownloaded(adapter);
-			if ((rtw_read8(adapter, 0x1f)&BIT5) == BIT5)
-				bFwDownloadInProcess = true;
-			else
-				bFwDownloadInProcess = false;
+			value = rtw_read8(adapter, 0x1f);
+			value|= BIT5;
+			rtw_write8(adapter, 0x1f, value);
 			RELEASE_GLOBAL_MUTEX(GlobalMutexForFwDownload);
-			if (bFwDownloaded)
-				goto Exit;
-			else if (!bFwDownloadInProcess)
+		} else {
+			value = rtw_read8(adapter, 0x1f);
+			value|= BIT5;
+			rtw_write8(adapter, 0x1f, value);
+			RELEASE_GLOBAL_MUTEX(GlobalMutexForFwDownload);
+		}
+
+		/*  Suggested by Filen. If 8051 is running in RAM code, driver should inform Fw to reset by itself, */
+		/*  or it will cause download Fw fail. 2010.02.01. by tynli. */
+		if (rtw_read8(adapter, REG_MCUFWDL)&BIT7) /* 8051 RAM code */
+		{
+			DBG_8192D("Firmware self reset\n");
+			rtl8192d_FirmwareSelfReset(adapter);
+			rtw_write8(adapter, REG_MCUFWDL, 0x00);
+		}
+
+		_FWDownloadEnable(adapter, true);
+		fwdl_start_time = rtw_get_current_time();
+		while (1) {
+			/* reset the FWDL chksum */
+			rtw_write8(adapter, REG_MCUFWDL, rtw_read8(adapter, REG_MCUFWDL)|FWDL_ChkSum_rpt);
+
+			rtStatus = _WriteFW(adapter, pFirmwareBuf, FirmwareLen);
+
+			if (rtStatus == _SUCCESS ||
+			    (rtw_get_passing_time_ms(fwdl_start_time) > 500 &&
+			    writeFW_retry++ >= 3))
 				break;
-			else
-				DBG_8192D("Wait for another mac download fw\n");
+
+			DBG_8192D("%s writeFW_retry:%u, time after fwdl_start_time:%ums\n",
+				  __func__, writeFW_retry,
+				  rtw_get_passing_time_ms(fwdl_start_time));
+		}
+		_FWDownloadEnable(adapter, false);
+		if (_SUCCESS != rtStatus) {
+			DBG_8192D("DL Firmware failed!\n");
+			goto Exit;
 		}
+
 		ACQUIRE_GLOBAL_MUTEX(GlobalMutexForFwDownload);
-		value=rtw_read8(adapter, 0x1f);
-		value|=BIT5;
-		rtw_write8(adapter, 0x1f,value);
-		RELEASE_GLOBAL_MUTEX(GlobalMutexForFwDownload);
-	}
-	else
-	{
-		value=rtw_read8(adapter, 0x1f);
-		value|=BIT5;
-		rtw_write8(adapter, 0x1f,value);
+		rtStatus = _FWFreeToGo_92D(adapter);
+		/*  download fw over, clear 0x1f[5] */
+		value = rtw_read8(adapter, 0x1f);
+		value&= (~BIT5);
+		rtw_write8(adapter, 0x1f, value);
 		RELEASE_GLOBAL_MUTEX(GlobalMutexForFwDownload);
-	}
-
-	/*  Suggested by Filen. If 8051 is running in RAM code, driver should inform Fw to reset by itself, */
-	/*  or it will cause download Fw fail. 2010.02.01. by tynli. */
-	if (rtw_read8(adapter, REG_MCUFWDL)&BIT7) /* 8051 RAM code */
-	{
-		DBG_8192D("Firmware self reset\n");
-		rtl8192d_FirmwareSelfReset(adapter);
-		rtw_write8(adapter, REG_MCUFWDL, 0x00);
-	}
-
-	_FWDownloadEnable(adapter, true);
-	fwdl_start_time = rtw_get_current_time();
-	while (1) {
-		/* reset the FWDL chksum */
-		rtw_write8(adapter, REG_MCUFWDL, rtw_read8(adapter, REG_MCUFWDL)|FWDL_ChkSum_rpt);
-
-		rtStatus = _WriteFW(adapter, pFirmwareBuf, FirmwareLen);
-
-		if (rtStatus == _SUCCESS
-			||(rtw_get_passing_time_ms(fwdl_start_time) > 500 && writeFW_retry++ >= 3)
-		)
-			break;
 
-		DBG_8192D("%s writeFW_retry:%u, time after fwdl_start_time:%ums\n", __func__
-			, writeFW_retry
-			, rtw_get_passing_time_ms(fwdl_start_time)
-		);
-	}
-	_FWDownloadEnable(adapter, false);
-	if (_SUCCESS != rtStatus) {
-		DBG_8192D("DL Firmware failed!\n");
-		goto Exit;
-	}
-
-	ACQUIRE_GLOBAL_MUTEX(GlobalMutexForFwDownload);
-	rtStatus=_FWFreeToGo_92D(adapter);
-	/*  download fw over,clear 0x1f[5] */
-	value=rtw_read8(adapter, 0x1f);
-	value&=(~BIT5);
-	rtw_write8(adapter, 0x1f,value);
-	RELEASE_GLOBAL_MUTEX(GlobalMutexForFwDownload);
-
-	if (_SUCCESS != rtStatus) {
-		DBG_8192D("Firmware is not ready to run!\n");
-		goto Exit;
+		if (_SUCCESS != rtStatus) {
+			DBG_8192D("Firmware is not ready to run!\n");
+			goto Exit;
+		}
 	}
 
 Exit:
-
-	rtStatus =_FWInit(adapter);
-
-	if (pFirmware) {
-		vfree(pFirmware);
-	}
-
+	rtStatus = _FWInit(adapter);
 	return rtStatus;
 }
 
 #ifdef CONFIG_WOWLAN
-void
-InitializeFirmwareVars92D(
-	struct rtw_adapter *		adapter
-)
+void InitializeFirmwareVars92D(struct rtw_adapter *adapter)
 {
 	struct hal_data_8192du *pHalData = GET_HAL_DATA(adapter);
 	struct pwrctrl_priv *pwrpriv;
@@ -524,39 +484,24 @@ InitializeFirmwareVars92D(
 	pHalData->LastHMEBoxNum = 0;
 }
 
-/*  */
-
-/*  */
-/*  Description: Prepare some information to Fw for WoWLAN. */
-/*			(1) Download wowlan Fw. */
-/*			(2) Download RSVD page packets. */
-/*			(3) Enable AP offload if needed. */
-/*  */
-/*  2011.04.12 by tynli. */
-/*  */
-void
-SetFwRelatedForWoWLAN8192DU(
-	struct rtw_adapter *			padapter,
-	u8			bHostIsGoingtoSleep
-)
+/*  Description: Prepare some information to Fw for WoWLAN.
+ *			(1) Download wowlan Fw.
+ *			(2) Download RSVD page packets.
+ *			(3) Enable AP offload if needed.
+ */
+void SetFwRelatedForWoWLAN8192DU(struct rtw_adapter *padapter, u8 bHostIsGoingtoSleep)
 {
-	int	status=_FAIL;
+	int	status = _FAIL;
 	struct hal_data_8192du *pHalData = GET_HAL_DATA(padapter);
 	u8	 bRecover = false;
 
-	if (bHostIsGoingtoSleep)
-	{
-		/*  */
+	if (bHostIsGoingtoSleep) {
 		/*  1. Before WoWLAN we need to re-download WoWLAN Fw. */
-		/*  */
 		status = FirmwareDownload92D(padapter, bHostIsGoingtoSleep);
-		if (status != _SUCCESS)
-		{
+		if (status != _SUCCESS) {
 			DBG_8192D("ConfigFwRelatedForWoWLAN8192DU(): Re-Download Firmware failed!!\n");
 			return;
-		}
-		else
-		{
+		} else {
 			DBG_8192D("ConfigFwRelatedForWoWLAN8192DU(): Re-Download Firmware Success !!\n");
 		}
 
@@ -564,7 +509,6 @@ SetFwRelatedForWoWLAN8192DU(
 		/*  2. Re-Init the variables about Fw related setting. */
 		/*  */
 		InitializeFirmwareVars92D(padapter);
-
 	}
 }
 #endif /* CONFIG_WOWLAN */
@@ -573,14 +517,14 @@ SetFwRelatedForWoWLAN8192DU(
 /* channel_info[chnl]" is a real channel. */
 static u8 Hal_GetChnlGroupfromArray(u8 chnl)
 {
-	u8	group=0;
-	u8	channel_info[59] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,149,151,153,155,157,159,161,163,165};
+	u8	group = 0;
+	u8	channel_info[59] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 149, 151, 153, 155, 157, 159, 161, 163, 165};
 
 	if (channel_info[chnl] <= 3)			/*  Chanel 1-3 */
 		group = 0;
 	else if (channel_info[chnl] <= 9)		/*  Channel 4-9 */
 		group = 1;
-	else	if (channel_info[chnl] <=14)				/*  Channel 10-14 */
+	else	if (channel_info[chnl] <= 14)				/*  Channel 10-14 */
 		group = 2;
 	/*  For TX_POWER_FOR_5G_BAND */
 	else if (channel_info[chnl] <= 44)
@@ -622,7 +566,7 @@ rtl8192d_ReadChipVersion(
 	/* Decide TestChip or NormalChip here. */
 	/* 92D's RF_type will be decided when the reg0x2c is filled. */
 	if (!(value32 & 0x000f0000))
-	{ /* Test or Normal Chip:  hardward id 0xf0[19:16] =0 test chip */
+	{ /* Test or Normal Chip:  hardward id 0xf0[19:16] = 0 test chip */
 		ChipVersion = VERSION_TEST_CHIP_92D_SINGLEPHY;
 		DBG_8192D("TEST CHIP!!!\n");
 	}
@@ -673,22 +617,19 @@ hal_ReadPowerValueFromPROM92D(
 	bool			AutoLoadFail
 	)
 {
-	u32	rfPath, eeAddr, group, offset1,offset2=0;
+	u32	rfPath, eeAddr, group, offset1, offset2 = 0;
 	u8	i = 0;
 	struct hal_data_8192du *pHalData = GET_HAL_DATA(adapter);
 
 	memset(pwrInfo, 0, sizeof(struct tx_power_info));
 
 	if (AutoLoadFail) {
-		for (group = 0 ; group < CHANNEL_GROUP_MAX ; group++) {
-			for (rfPath = 0 ; rfPath < RF_PATH_MAX ; rfPath++) {
-				if (group< CHANNEL_GROUP_MAX_2G)
-				{
+		for (group = 0; group < CHANNEL_GROUP_MAX; group++) {
+			for (rfPath = 0; rfPath < RF_PATH_MAX; rfPath++) {
+				if (group < CHANNEL_GROUP_MAX_2G) {
 					pwrInfo->CCKIndex[rfPath][group]		= EEPROM_Default_TxPowerLevel_2G;
 					pwrInfo->HT40_1SIndex[rfPath][group]		= EEPROM_Default_TxPowerLevel_2G;
-				}
-				else
-				{
+				} else {
 					pwrInfo->HT40_1SIndex[rfPath][group]		= EEPROM_Default_TxPowerLevel_5G;
 				}
 				pwrInfo->HT40_2SIndexDiff[rfPath][group]	= EEPROM_Default_HT40_2SDiff;
@@ -708,10 +649,10 @@ hal_ReadPowerValueFromPROM92D(
 		return;
 	}
 
-	/* Maybe autoload OK,buf the tx power index vlaue is not filled. */
-	/* If we find it,we set it default value. */
-	for (rfPath = 0 ; rfPath < RF_PATH_MAX ; rfPath++) {
-		for (group = 0 ; group < CHANNEL_GROUP_MAX_2G; group++) {
+	/* Maybe autoload OK, buf the tx power index vlaue is not filled. */
+	/* If we find it, we set it default value. */
+	for (rfPath = 0; rfPath < RF_PATH_MAX; rfPath++) {
+		for (group = 0; group < CHANNEL_GROUP_MAX_2G; group++) {
 			eeAddr = EEPROM_CCK_TX_PWR_INX_2G + (rfPath * 3) + group;
 			pwrInfo->CCKIndex[rfPath][group] =
 				(PROMContent[eeAddr] == 0xFF)?(eeAddr>0x7B?EEPROM_Default_TxPowerLevel_5G:EEPROM_Default_TxPowerLevel_2G):PROMContent[eeAddr];
@@ -719,8 +660,8 @@ hal_ReadPowerValueFromPROM92D(
 				pHalData->bNOPG = true;
 		}
 	}
-	for (rfPath = 0 ; rfPath < RF_PATH_MAX ; rfPath++) {
-		for (group = 0 ; group < CHANNEL_GROUP_MAX ; group++) {
+	for (rfPath = 0; rfPath < RF_PATH_MAX; rfPath++) {
+		for (group = 0; group < CHANNEL_GROUP_MAX; group++) {
 			offset1 = group / 3;
 			offset2 = group % 3;
 			eeAddr = EEPROM_HT40_1S_TX_PWR_INX_2G+ (rfPath * 3) + offset2 + offset1*21;
@@ -730,8 +671,8 @@ hal_ReadPowerValueFromPROM92D(
 	}
 
 	/* These just for 92D efuse offset. */
-	for (group = 0 ; group < CHANNEL_GROUP_MAX ; group++) {
-		for (rfPath = 0 ; rfPath < RF_PATH_MAX ; rfPath++) {
+	for (group = 0; group < CHANNEL_GROUP_MAX; group++) {
+		for (rfPath = 0; rfPath < RF_PATH_MAX; rfPath++) {
 			offset1 = group / 3;
 			offset2 = group % 3;
 
@@ -787,7 +728,7 @@ hal_ReadPowerValueFromPROM92D(
 		/* 5GH */
 		pwrInfo->TSSI_A_5G[2] = (PROMContent[EEPROM_TSSI_AB_5G+1] & 0xF0) >> 4 |
 							(PROMContent[EEPROM_TSSI_AB_5G+2] & 0x03) << 4;
-		pwrInfo->TSSI_B_5G[2] = (PROMContent[EEPROM_TSSI_AB_5G+2] & 0xFC) >> 2 ;
+		pwrInfo->TSSI_B_5G[2] = (PROMContent[EEPROM_TSSI_AB_5G+2] & 0xFC) >> 2;
 	}
 	else
 	{
@@ -810,7 +751,7 @@ rtl8192d_ReadTxPowerInfo(
 	struct dm_priv	*pdmpriv = &pHalData->dmpriv;
 	struct tx_power_info pwrInfo;
 	u32			rfPath, ch, group;
-	u8			pwr, diff,tempval[2], i;
+	u8			pwr, diff, tempval[2], i;
 
 	hal_ReadPowerValueFromPROM92D(adapter, &pwrInfo, PROMContent, AutoLoadFail);
 
@@ -826,7 +767,7 @@ rtl8192d_ReadTxPowerInfo(
 		{
 			pHalData->InternalPA5G[0] = !((PROMContent[EEPROM_TSSI_A_5G] & BIT6) >> 6);
 			pHalData->InternalPA5G[1] = !((PROMContent[EEPROM_TSSI_B_5G] & BIT6) >> 6);
-			DBG_8192D("Is D/E cut,Internal PA0 %d Internal PA1 %d\n",pHalData->InternalPA5G[0],pHalData->InternalPA5G[1]);
+			DBG_8192D("Is D/E cut, Internal PA0 %d Internal PA1 %d\n", pHalData->InternalPA5G[0], pHalData->InternalPA5G[1]);
 		}
 		pHalData->EEPROMC9 = PROMContent[EEPROM_RF_OPT6];
 		pHalData->EEPROMCC = PROMContent[EEPROM_RF_OPT7];
@@ -919,8 +860,8 @@ rtl8192d_ReadTxPowerInfo(
 	if (pHalData->EEPROMC9 == 0xFF)
 		pHalData->EEPROMC9 = 0x00;
 
-	for (rfPath = 0 ; rfPath < RF_PATH_MAX ; rfPath++) {
-		for (ch = 0 ; ch < CHANNEL_MAX_NUMBER ; ch++) {
+	for (rfPath = 0; rfPath < RF_PATH_MAX; rfPath++) {
+		for (ch = 0; ch < CHANNEL_MAX_NUMBER; ch++) {
 			group = Hal_GetChnlGroupfromArray((u8)ch);
 
 			if (ch < CHANNEL_MAX_NUMBER_2G)
@@ -941,8 +882,8 @@ rtl8192d_ReadTxPowerInfo(
 
 #if DBG
 
-	for (rfPath = 0 ; rfPath < RF_PATH_MAX ; rfPath++) {
-		for (ch = 0 ; ch < CHANNEL_MAX_NUMBER ; ch++) {
+	for (rfPath = 0; rfPath < RF_PATH_MAX; rfPath++) {
+		for (ch = 0; ch < CHANNEL_MAX_NUMBER; ch++) {
 			if (ch < CHANNEL_MAX_NUMBER_2G)
 			{
 				DBG_8192D("RF(%d)-Ch(%d) [CCK / HT40_1S / HT40_2S] = [0x%x / 0x%x / 0x%x]\n",
@@ -961,19 +902,19 @@ rtl8192d_ReadTxPowerInfo(
 		}
 	}
 
-	for (ch = 0 ; ch < CHANNEL_MAX_NUMBER ; ch++) {
+	for (ch = 0; ch < CHANNEL_MAX_NUMBER; ch++) {
 		DBG_8192D("RF-A Ht20 to HT40 Diff[%d] = 0x%x\n", ch, pHalData->TxPwrHt20Diff[RF_PATH_A][ch]);
 	}
 
-	for (ch = 0 ; ch < CHANNEL_MAX_NUMBER ; ch++) {
+	for (ch = 0; ch < CHANNEL_MAX_NUMBER; ch++) {
 		DBG_8192D("RF-A Legacy to Ht40 Diff[%d] = 0x%x\n", ch, pHalData->TxPwrLegacyHtDiff[RF_PATH_A][ch]);
 	}
 
-	for (ch = 0 ; ch < CHANNEL_MAX_NUMBER ; ch++) {
+	for (ch = 0; ch < CHANNEL_MAX_NUMBER; ch++) {
 		DBG_8192D("RF-B Ht20 to HT40 Diff[%d] = 0x%x\n", ch, pHalData->TxPwrHt20Diff[RF_PATH_B][ch]);
 	}
 
-	for (ch = 0 ; ch < CHANNEL_MAX_NUMBER ; ch++) {
+	for (ch = 0; ch < CHANNEL_MAX_NUMBER; ch++) {
 		DBG_8192D("RF-B Legacy to HT40 Diff[%d] = 0x%x\n", ch, pHalData->TxPwrLegacyHtDiff[RF_PATH_B][ch]);
 	}
 
@@ -1000,7 +941,7 @@ u8 GetEEPROMSize8192D(struct rtw_adapter
 	curRCR = rtw_read16(adapter, REG_9346CR);
 	size = (curRCR & BOOT_FROM_EEPROM) ? 6 : 4; /*  6: EEPROM used is 93C46, 4: boot from E-Fuse. */
 
-	MSG_8192D("EEPROM type is %s\n", size==4 ? "E-FUSE" : "93C46");
+	pr_info("r8192du: EEPROM type is %s", size == 4 ? "E-FUSE" : "93C46");
 
 	return size;
 }
@@ -1016,7 +957,7 @@ PHY_CheckPowerOffFor8192D(
 	u8 u1bTmp;
 	struct hal_data_8192du *pHalData = GET_HAL_DATA(adapter);
 
-	if (pHalData->MacPhyMode92D==SINGLEMAC_SINGLEPHY) {
+	if (pHalData->MacPhyMode92D == SINGLEMAC_SINGLEPHY) {
 		u1bTmp = rtw_read8(adapter, REG_MAC0);
 		rtw_write8(adapter, REG_MAC0, u1bTmp&(~MAC0_ON));
 		return true;
@@ -1027,13 +968,13 @@ PHY_CheckPowerOffFor8192D(
 		u1bTmp = rtw_read8(adapter, REG_MAC0);
 		rtw_write8(adapter, REG_MAC0, u1bTmp&(~MAC0_ON));
 		u1bTmp = rtw_read8(adapter, REG_MAC1);
-		u1bTmp &=MAC1_ON;
+		u1bTmp &= MAC1_ON;
 
 	} else {
 		u1bTmp = rtw_read8(adapter, REG_MAC1);
 		rtw_write8(adapter, REG_MAC1, u1bTmp&(~MAC1_ON));
 		u1bTmp = rtw_read8(adapter, REG_MAC0);
-		u1bTmp &=MAC0_ON;
+		u1bTmp &= MAC0_ON;
 	}
 
 	if (u1bTmp)
@@ -1042,8 +983,8 @@ PHY_CheckPowerOffFor8192D(
 		return false;
 	}
 
-	u1bTmp=rtw_read8(adapter, REG_POWER_OFF_IN_PROCESS);
-	u1bTmp|=BIT7;
+	u1bTmp = rtw_read8(adapter, REG_POWER_OFF_IN_PROCESS);
+	u1bTmp|= BIT7;
 	rtw_write8(adapter, REG_POWER_OFF_IN_PROCESS, u1bTmp);
 
 	RELEASE_GLOBAL_MUTEX(GlobalMutexForPowerOnAndPowerOff);
@@ -1063,20 +1004,20 @@ PHY_SetPowerOnFor8192D(
 	u16	i;
 
 	/*  notice fw know band status  0x81[1]/0x53[1] = 0: 5G, 1: 2G */
-	if (pHalData->CurrentBandType92D==BAND_ON_2_4G)
+	if (pHalData->CurrentBandType92D == BAND_ON_2_4G)
 	{
-		value8 = rtw_read8(adapter, (pHalData->interfaceIndex==0?REG_MAC0:REG_MAC1));
+		value8 = rtw_read8(adapter, (pHalData->interfaceIndex == 0?REG_MAC0:REG_MAC1));
 		value8 |= BIT1;
-		rtw_write8(adapter, (pHalData->interfaceIndex==0?REG_MAC0:REG_MAC1),value8);
+		rtw_write8(adapter, (pHalData->interfaceIndex == 0?REG_MAC0:REG_MAC1), value8);
 	}
 	else
 	{
-		value8 = rtw_read8(adapter, (pHalData->interfaceIndex==0?REG_MAC0:REG_MAC1));
+		value8 = rtw_read8(adapter, (pHalData->interfaceIndex == 0?REG_MAC0:REG_MAC1));
 		value8 &= (~BIT1);
-		rtw_write8(adapter, (pHalData->interfaceIndex==0?REG_MAC0:REG_MAC1),value8);
+		rtw_write8(adapter, (pHalData->interfaceIndex == 0?REG_MAC0:REG_MAC1), value8);
 	}
 
-	if (pHalData->MacPhyMode92D ==SINGLEMAC_SINGLEPHY)
+	if (pHalData->MacPhyMode92D == SINGLEMAC_SINGLEPHY)
 	{
 		value8 = rtw_read8(adapter, REG_MAC0);
 		rtw_write8(adapter, REG_MAC0, value8|MAC0_ON);
@@ -1097,7 +1038,7 @@ PHY_SetPowerOnFor8192D(
 		value8 = rtw_read8(adapter, REG_POWER_OFF_IN_PROCESS);
 		RELEASE_GLOBAL_MUTEX(GlobalMutexForPowerOnAndPowerOff);
 
-		for (i=0;i<200;i++)
+		for (i = 0;i<200;i++)
 		{
 			if ((value8&BIT7) == 0)
 			{
@@ -1112,7 +1053,7 @@ PHY_SetPowerOnFor8192D(
 			}
 		}
 
-		if (i==200)
+		if (i == 200)
 			DBG_8192D("Another mac power off over time\n");
 	}
 }
@@ -1137,28 +1078,24 @@ enum{
 		LDOE25_SHIFT						= 28 ,
 	};
 
-static void
-rtl8192d_EfusePowerSwitch(
-	struct rtw_adapter *	adapter,
-	u8		bWrite,
-	u8		PwrState)
+static void rtl8192d_EfusePowerSwitch(struct rtw_adapter *adapter, u8 bWrite,
+				      u8 PwrState)
 {
 	u8	tempval;
 	u16	tmpV16;
 
-	if (PwrState == true)
-	{
+	if (PwrState) {
 		/*  1.2V Power: From VDDON with Power Cut(0x0000h[15]), defualt valid */
 		tmpV16 = rtw_read16(adapter, REG_SYS_ISO_CTRL);
 		if (!(tmpV16 & PWC_EV12V)) {
-			tmpV16 |= PWC_EV12V ;
+			tmpV16 |= PWC_EV12V;
 			 rtw_write16(adapter, REG_SYS_ISO_CTRL, tmpV16);
 		}
 		/*  Reset: 0x0000h[28], default valid */
 		tmpV16 = rtw_read16(adapter, REG_SYS_FUNC_EN);
 		if (!(tmpV16 & FEN_ELDR)) {
-			tmpV16 |= FEN_ELDR ;
-			rtw_write16(adapter,REG_SYS_FUNC_EN,tmpV16);
+			tmpV16 |= FEN_ELDR;
+			rtw_write16(adapter, REG_SYS_FUNC_EN, tmpV16);
 		}
 
 		/*  Clock: Gated(0x0008h[5]) 8M(0x0008h[1]) clock from ANA, default valid */
@@ -1175,9 +1112,7 @@ rtl8192d_EfusePowerSwitch(
 			tempval |= (VOLTAGE_V25 << 4);
 			rtw_write8(adapter, EFUSE_TEST+3, (tempval | 0x80));
 		}
-	}
-	else
-	{
+	} else {
 		if (bWrite == true) {
 			/*  Disable LDO 2.5V after read/write action */
 			tempval = rtw_read8(adapter, EFUSE_TEST+3);
@@ -1186,15 +1121,9 @@ rtl8192d_EfusePowerSwitch(
 	}
 }
 
-static void
-ReadEFuse_RTL8192D(
-	struct rtw_adapter *	adapter,
-	u8			efuseType,
-	u16			_offset,
-	u16			_size_byte,
-	u8			*pbuf,
-	bool	bPseudoTest
-	)
+static void ReadEFuse_RTL8192D(struct rtw_adapter *adapter, u8 efuseType,
+			       u16 _offset, u16 _size_byte, u8 *pbuf,
+			       bool bPseudoTest)
 {
 	u8	efuseTbl[EFUSE_MAP_LEN];
 	u8	rtemp8[1];
@@ -1205,12 +1134,10 @@ ReadEFuse_RTL8192D(
 	u16	efuse_utilized = 0;
 	u8	u1temp = 0;
 
-	/*  */
 	/*  Do NOT excess total size of EFuse table. Added by Roger, 2008.11.10. */
-	/*  */
-	if ((_offset + _size_byte)>EFUSE_MAP_LEN)
-	{/*  total E-Fuse table is 128bytes */
-		DBG_8192D("ReadEFuse(): Invalid offset(%#x) with read bytes(%#x)!!\n",_offset, _size_byte);
+	if ((_offset + _size_byte)>EFUSE_MAP_LEN) {
+		/*  total E-Fuse table is 128bytes */
+		DBG_8192D("ReadEFuse(): Invalid offset(%#x) with read bytes(%#x)!!\n", _offset, _size_byte);
 		return;
 	}
 
@@ -1218,184 +1145,135 @@ ReadEFuse_RTL8192D(
 	for (i = 0; i < EFUSE_MAX_SECTION; i++)
 		for (j = 0; j < EFUSE_MAX_WORD_UNIT; j++)
 			eFuseWord[i][j] = 0xFFFF;
-
-	/*  */
 	/*  1. Read the first byte to check if efuse is empty!!! */
-	/*  */
-	/*  */
 	ReadEFuseByte(adapter, eFuse_Addr, rtemp8, bPseudoTest);
-	if (*rtemp8 != 0xFF)
-	{
+	if (*rtemp8 != 0xFF) {
 		efuse_utilized++;
 		eFuse_Addr++;
-	}
-	else
-	{
+	} else {
 		return;
 	}
 
-	/*  */
 	/*  2. Read real efuse content. Filter PG header and every section data. */
-	/*  */
-	while ((*rtemp8 != 0xFF) && (eFuse_Addr < EFUSE_REAL_CONTENT_LEN))
-	{
+	while ((*rtemp8 != 0xFF) && (eFuse_Addr < EFUSE_REAL_CONTENT_LEN)) {
 		/*  Check PG header for section num. */
-		if ((*rtemp8 & 0x1F) == 0x0F)		/* extended header */
-		{
-
-			u1temp =((*rtemp8 & 0xE0) >> 5);
+		if ((*rtemp8 & 0x1F) == 0x0F) {		/* extended header */
+			u1temp = ((*rtemp8 & 0xE0) >> 5);
 
 			ReadEFuseByte(adapter, eFuse_Addr, rtemp8, bPseudoTest);
 
-			if ((*rtemp8 & 0x0F) == 0x0F)
-			{
+			if ((*rtemp8 & 0x0F) == 0x0F) {
 				eFuse_Addr++;
 				ReadEFuseByte(adapter, eFuse_Addr, rtemp8, bPseudoTest);
 
 				if (*rtemp8 != 0xFF && (eFuse_Addr < EFUSE_REAL_CONTENT_LEN))
-				{
 					eFuse_Addr++;
-				}
 				continue;
-			}
-			else
-			{
+			} else {
 				offset = ((*rtemp8 & 0xF0) >> 1) | u1temp;
 				wren = (*rtemp8 & 0x0F);
 				eFuse_Addr++;
 			}
-		}
-		else
-		{
+		} else {
 			offset = ((*rtemp8 >> 4) & 0x0f);
 			wren = (*rtemp8 & 0x0f);
 		}
 
-		if (offset < EFUSE_MAX_SECTION)
-		{
+		if (offset < EFUSE_MAX_SECTION) {
 			/*  Get word enable value from PG header */
 
-			for (i=0; i<EFUSE_MAX_WORD_UNIT; i++)
-			{
+			for (i = 0; i<EFUSE_MAX_WORD_UNIT; i++) {
 				/*  Check word enable condition in the section */
-				if (!(wren & 0x01))
-				{
+				if (!(wren & 0x01)) {
 					ReadEFuseByte(adapter, eFuse_Addr, rtemp8, bPseudoTest);
 					eFuse_Addr++;
 					efuse_utilized++;
 					eFuseWord[offset][i] = (*rtemp8 & 0xff);
-
 					if (eFuse_Addr >= EFUSE_REAL_CONTENT_LEN)
 						break;
-
 					ReadEFuseByte(adapter, eFuse_Addr, rtemp8, bPseudoTest);
 					eFuse_Addr++;
-
 					efuse_utilized++;
 					eFuseWord[offset][i] |= (((u16)*rtemp8 << 8) & 0xff00);
 
 					if (eFuse_Addr >= EFUSE_REAL_CONTENT_LEN)
 						break;
 				}
-
 				wren >>= 1;
-
 			}
 		}
 
 		/*  Read next PG header */
 		ReadEFuseByte(adapter, eFuse_Addr, rtemp8, bPseudoTest);
 
-		if (*rtemp8 != 0xFF && (eFuse_Addr < EFUSE_REAL_CONTENT_LEN))
-		{
+		if (*rtemp8 != 0xFF && (eFuse_Addr < EFUSE_REAL_CONTENT_LEN)) {
 			efuse_utilized++;
 			eFuse_Addr++;
 		}
 	}
 
-	/*  */
 	/*  3. Collect 16 sections and 4 word unit into Efuse map. */
-	/*  */
-	for (i=0; i<EFUSE_MAX_SECTION; i++)
-	{
-		for (j=0; j<EFUSE_MAX_WORD_UNIT; j++)
-		{
-			efuseTbl[(i*8)+(j*2)]=(eFuseWord[i][j] & 0xff);
-			efuseTbl[(i*8)+((j*2)+1)]=((eFuseWord[i][j] >> 8) & 0xff);
+	for (i = 0; i<EFUSE_MAX_SECTION; i++) {
+		for (j = 0; j<EFUSE_MAX_WORD_UNIT; j++) {
+			efuseTbl[(i*8)+(j*2)]= (eFuseWord[i][j] & 0xff);
+			efuseTbl[(i*8)+((j*2)+1)]= ((eFuseWord[i][j] >> 8) & 0xff);
 		}
 	}
-
-	/*  */
 	/*  4. Copy from Efuse map to output pointer memory!!! */
-	/*  */
-	for (i=0; i<_size_byte; i++)
-	{
+	for (i = 0; i<_size_byte; i++)
 		pbuf[i] = efuseTbl[_offset+i];
-	}
-
-	/*  */
 	/*  5. Calculate Efuse utilization. */
-	/*  */
 	rtw_hal_set_hwreg(adapter, HW_VAR_EFUSE_BYTES, (u8*)&efuse_utilized);
 }
 
-static void
-hal_EfuseUpdateNormalChipVersion_92D(
-	struct rtw_adapter *	adapter
-)
+static void hal_EfuseUpdateNormalChipVersion_92D(struct rtw_adapter *adapter)
 {
 	struct hal_data_8192du *pHalData = GET_HAL_DATA(adapter);
 	enum VERSION_8192D	ChipVer = pHalData->VersionID;
 	u8	CutValue[2];
-	u16	ChipValue=0;
+	u16	ChipValue = 0;
 
-	ReadEFuseByte(adapter,EEPROME_CHIP_VERSION_H,&CutValue[1], false);
-	ReadEFuseByte(adapter,EEPROME_CHIP_VERSION_L,&CutValue[0], false);
+	ReadEFuseByte(adapter, EEPROME_CHIP_VERSION_H, &CutValue[1], false);
+	ReadEFuseByte(adapter, EEPROME_CHIP_VERSION_L, &CutValue[0], false);
 
-	ChipValue= (CutValue[1]<<8)|CutValue[0];
+	ChipValue = (CutValue[1] << 8) | CutValue[0];
 	switch (ChipValue) {
-		case 0xAA55:
-			ChipVer = (enum VERSION_8192D)(ChipVer | C_CUT_VERSION);
-			MSG_8192D("C-CUT!!!\n");
-			break;
-		case 0x9966:
-			ChipVer = (enum VERSION_8192D)(ChipVer | D_CUT_VERSION);
-			MSG_8192D("D-CUT!!!\n");
-			break;
-		case 0xCC33:
-			ChipVer = (enum VERSION_8192D)(ChipVer | E_CUT_VERSION);
-			MSG_8192D("E-CUT!!!\n");
-			break;
-		default:
-			ChipVer = (enum VERSION_8192D)(ChipVer | D_CUT_VERSION);
-			MSG_8192D("Unkown CUT!\n");
-			break;
+	case 0xAA55:
+		ChipVer = (enum VERSION_8192D)(ChipVer | C_CUT_VERSION);
+		pr_cont(", C-CUT chip\n");
+		break;
+	case 0x9966:
+		ChipVer = (enum VERSION_8192D)(ChipVer | D_CUT_VERSION);
+		pr_cont(", D-CUT chip\n");
+		break;
+	case 0xCC33:
+		ChipVer = (enum VERSION_8192D)(ChipVer | E_CUT_VERSION);
+		pr_cont(", E-CUT chip\n");
+		break;
+	default:
+		ChipVer = (enum VERSION_8192D)(ChipVer | D_CUT_VERSION);
+		pr_cont(", Unknown CUT chip\n");
+		break;
 	}
-
 	pHalData->VersionID = ChipVer;
 }
 
-static bool
-hal_EfuseMacMode_ISVS_92D(
-         struct rtw_adapter *     adapter
-)
+static bool hal_EfuseMacMode_ISVS_92D(struct rtw_adapter *adapter)
 {
 	struct hal_data_8192du *pHalData = GET_HAL_DATA(adapter);
 	u8	PartNo;
 	bool bResult = false;
+
 	/*  92D VS not support dual mac mode */
-	if (IS_NORMAL_CHIP92D(pHalData->VersionID))
-	{
-		ReadEFuseByte(adapter,EEPROM_DEF_PART_NO,&PartNo, false);
+	if (IS_NORMAL_CHIP92D(pHalData->VersionID)) {
+		ReadEFuseByte(adapter, EEPROM_DEF_PART_NO, &PartNo, false);
 
 		if ((((PartNo & 0xc0) ==  PARTNO_92D_NIC)&&((PartNo & 0x0c) == PARTNO_SINGLE_BAND_VS))||
 			(((PartNo & 0xF0) == PARTNO_92D_NIC_REMARK) &&((PartNo & 0x0F) == PARTNO_SINGLE_BAND_VS_REMARK)))
 		{
 			bResult = true;
-		}
-		else if (PartNo == 0x00)
-		{
-			ReadEFuseByte(adapter,EEPROM_DEF_PART_NO+1,&PartNo, false);
+		} else if (PartNo == 0x00) {
+			ReadEFuseByte(adapter, EEPROM_DEF_PART_NO+1, &PartNo, false);
 			if ((((PartNo & 0xc0) ==  PARTNO_92D_NIC)&&((PartNo & 0x0c) == PARTNO_SINGLE_BAND_VS))||
 				(((PartNo & 0xF0) == PARTNO_92D_NIC_REMARK) &&((PartNo & 0x0F) == PARTNO_SINGLE_BAND_VS_REMARK)))
 			{
@@ -1403,19 +1281,12 @@ hal_EfuseMacMode_ISVS_92D(
 			}
 		}
 	}
-
 	return bResult;
 }
 
-static void
-rtl8192d_ReadEFuse(
-	struct rtw_adapter *	adapter,
-	u8			efuseType,
-	u16			_offset,
-	u16			_size_byte,
-	u8			*pbuf,
-	bool	bPseudoTest
-	)
+static void rtl8192d_ReadEFuse(struct rtw_adapter *adapter, u8 efuseType,
+			       u16 _offset, u16 _size_byte, u8 *pbuf,
+			       bool bPseudoTest)
 {
 	struct hal_data_8192du *pHalData = GET_HAL_DATA(adapter);
 
@@ -1425,118 +1296,95 @@ rtl8192d_ReadEFuse(
 	pHalData->bIsVS = hal_EfuseMacMode_ISVS_92D(adapter);
 }
 
-static void
-rtl8192d_EFUSE_GetEfuseDefinition(
-		struct rtw_adapter *	adapter,
-		u8		efuseType,
-		u8		type,
-		void *		*pOut,
-		bool		bPseudoTest
-	)
+static void rtl8192d_EFUSE_GetEfuseDefinition(struct rtw_adapter *adapter,
+					      u8 efuseType, u8 type,
+					      void **pOut, bool bPseudoTest)
 {
-	switch (type)
-	{
-		case TYPE_EFUSE_MAX_SECTION:
-			{
-				u8	*pMax_section;
-				pMax_section = (u8 *)pOut;
-				*pMax_section = EFUSE_MAX_SECTION;
-			}
-			break;
-		case TYPE_EFUSE_REAL_CONTENT_LEN:
-			{
-				u16 *pu2Tmp;
-				pu2Tmp = (u16 *)pOut;
-				*pu2Tmp = EFUSE_REAL_CONTENT_LEN;
-			}
-			break;
-		case TYPE_AVAILABLE_EFUSE_BYTES_BANK:
-			{
-				u16	*pu2Tmp;
-				pu2Tmp = (u16 *)pOut;
-				*pu2Tmp = (u16)(EFUSE_REAL_CONTENT_LEN-EFUSE_OOB_PROTECT_BYTES);
-			}
-			break;
-		case TYPE_AVAILABLE_EFUSE_BYTES_TOTAL:
-			{
-				u16 *pu2Tmp;
-				pu2Tmp = (u16 *)pOut;
-				*pu2Tmp = (u16)(EFUSE_REAL_CONTENT_LEN-EFUSE_OOB_PROTECT_BYTES);
-			}
-			break;
-		case TYPE_EFUSE_MAP_LEN:
-			{
-				u16 *pu2Tmp;
-				pu2Tmp = (u16 *)pOut;
-				*pu2Tmp = (u16)EFUSE_MAP_LEN;
-			}
-			break;
-		case TYPE_EFUSE_PROTECT_BYTES_BANK:
-			{
-				u8 *pu1Tmp;
-				pu1Tmp = (u8 *)pOut;
-				*pu1Tmp = (u8)(EFUSE_OOB_PROTECT_BYTES);
-			}
-			break;
-		default:
-			{
-				u8 *pu1Tmp;
-				pu1Tmp = (u8 *)pOut;
-				*pu1Tmp = 0;
-			}
-			break;
+	switch (type) {
+	case TYPE_EFUSE_MAX_SECTION:
+		{
+			u8	*pMax_section;
+			pMax_section = (u8 *)pOut;
+			*pMax_section = EFUSE_MAX_SECTION;
+		}
+		break;
+	case TYPE_EFUSE_REAL_CONTENT_LEN:
+		{
+			u16 *pu2Tmp;
+			pu2Tmp = (u16 *)pOut;
+			*pu2Tmp = EFUSE_REAL_CONTENT_LEN;
+		}
+		break;
+	case TYPE_AVAILABLE_EFUSE_BYTES_BANK:
+		{
+			u16	*pu2Tmp;
+			pu2Tmp = (u16 *)pOut;
+			*pu2Tmp = (u16)(EFUSE_REAL_CONTENT_LEN-EFUSE_OOB_PROTECT_BYTES);
+		}
+		break;
+	case TYPE_AVAILABLE_EFUSE_BYTES_TOTAL:
+		{
+			u16 *pu2Tmp;
+			pu2Tmp = (u16 *)pOut;
+			*pu2Tmp = (u16)(EFUSE_REAL_CONTENT_LEN-EFUSE_OOB_PROTECT_BYTES);
+		}
+		break;
+	case TYPE_EFUSE_MAP_LEN:
+		{
+			u16 *pu2Tmp;
+			pu2Tmp = (u16 *)pOut;
+			*pu2Tmp = (u16)EFUSE_MAP_LEN;
+		}
+		break;
+	case TYPE_EFUSE_PROTECT_BYTES_BANK:
+		{
+			u8 *pu1Tmp;
+			pu1Tmp = (u8 *)pOut;
+			*pu1Tmp = (u8)(EFUSE_OOB_PROTECT_BYTES);
+		}
+		break;
+	default: {
+		u8 *pu1Tmp;
+		pu1Tmp = (u8 *)pOut;
+		*pu1Tmp = 0;
+		break; }
 	}
 }
 
-static u16
-rtl8192d_EfuseGetCurrentSize(
-	struct rtw_adapter *	adapter,
-	u8			efuseType,
-	bool		bPseudoTest)
+static u16 rtl8192d_EfuseGetCurrentSize(struct rtw_adapter *adapter,
+					u8 efuseType, bool bPseudoTest)
 {
 	int	bContinual = true;
-
 	u16	efuse_addr = 0;
-	u8	hoffset=0,hworden=0;
-	u8	efuse_data,word_cnts=0;
+	u8	hoffset = 0, hworden = 0;
+	u8	efuse_data, word_cnts = 0;
 
-	while (	bContinual &&
-			efuse_OneByteRead(adapter, efuse_addr ,&efuse_data, bPseudoTest) &&
-			(efuse_addr  < EFUSE_REAL_CONTENT_LEN))
-	{
-		if (efuse_data!=0xFF)
-		{
-			if ((efuse_data&0x1F) == 0x0F)		/* extended header */
-			{
+	while (bContinual &&
+	       efuse_OneByteRead(adapter, efuse_addr, &efuse_data, bPseudoTest) &&
+	       (efuse_addr  < EFUSE_REAL_CONTENT_LEN)) {
+		if (efuse_data!= 0xFF) {
+			if ((efuse_data&0x1F) == 0x0F) {		/* extended header */
 				hoffset = efuse_data;
 				efuse_addr++;
-				efuse_OneByteRead(adapter, efuse_addr ,&efuse_data, bPseudoTest);
-				if ((efuse_data & 0x0F) == 0x0F)
-				{
+				efuse_OneByteRead(adapter, efuse_addr, &efuse_data, bPseudoTest);
+				if ((efuse_data & 0x0F) == 0x0F) {
 					efuse_addr++;
 					continue;
-				}
-				else
-				{
+				} else {
 					hoffset = ((hoffset & 0xE0) >> 5) | ((efuse_data & 0xF0) >> 1);
 					hworden = efuse_data & 0x0F;
 				}
-			}
-			else
-			{
+			} else {
 				hoffset = (efuse_data>>4) & 0x0F;
 				hworden =  efuse_data & 0x0F;
 			}
 			word_cnts = Efuse_CalculateWordCnts(hworden);
 			/* read next header */
 			efuse_addr = efuse_addr + (word_cnts*2)+1;
-		}
-		else
-		{
-			bContinual = false ;
+		} else {
+			bContinual = false;
 		}
 	}
-
 	return efuse_addr;
 }
 
@@ -1547,98 +1395,83 @@ rtl8192d_Efuse_PgPacketRead(	struct rtw_
 					bool		bPseudoTest)
 {
 	u8	ReadState = PG_STATE_HEADER;
-
 	int	bContinual = true;
-	int	bDataEmpty = true ;
-
-	u8	efuse_data,word_cnts=0;
+	int	bDataEmpty = true;
+	u8	efuse_data, word_cnts = 0;
 	u16	efuse_addr = 0;
-	u8	hoffset=0,hworden=0;
-	u8	tmpidx=0;
+	u8	hoffset = 0, hworden = 0;
+	u8	tmpidx = 0;
 	u8	tmpdata[8];
 	u8	tmp_header = 0;
 
-	if (data==NULL)	return false;
-	if (offset>=EFUSE_MAX_SECTION)		return false;
+	if (data == NULL)
+		return false;
+	if (offset >= EFUSE_MAX_SECTION)
+		return false;
 
 	memset((void *)data, 0xff, sizeof(u8)*PGPKT_DATA_SIZE);
 	memset((void *)tmpdata, 0xff, sizeof(u8)*PGPKT_DATA_SIZE);
 
-	/*  */
 	/*  <Roger_TODO> Efuse has been pre-programmed dummy 5Bytes at the end of Efuse by CP. */
 	/*  Skip dummy parts to prevent unexpected data read from Efuse. */
 	/*  By pass right now. 2009.02.19. */
-	/*  */
-	while (bContinual && (efuse_addr  < EFUSE_REAL_CONTENT_LEN))
-	{
+	while (bContinual && (efuse_addr  < EFUSE_REAL_CONTENT_LEN)) {
 		/*   Header Read ------------- */
-		if (ReadState & PG_STATE_HEADER)
-		{
-			if (efuse_OneByteRead(adapter, efuse_addr ,&efuse_data, bPseudoTest)&&(efuse_data!=0xFF))
-			{
-				if ((efuse_data & 0x1F) == 0x0F)
-				{
+		if (ReadState & PG_STATE_HEADER) {
+			if (efuse_OneByteRead(adapter, efuse_addr, &efuse_data, bPseudoTest) &&
+			    (efuse_data!= 0xFF)) {
+				if ((efuse_data & 0x1F) == 0x0F) {
 					tmp_header = efuse_data;
 					efuse_addr++;
-					efuse_OneByteRead(adapter, efuse_addr ,&efuse_data, bPseudoTest);
-					if ((efuse_data & 0x0F) != 0x0F)
-					{
-						hoffset = ((tmp_header & 0xE0) >> 5) | ((efuse_data & 0xF0) >> 1);
+					efuse_OneByteRead(adapter, efuse_addr, &efuse_data, bPseudoTest);
+					if ((efuse_data & 0x0F) != 0x0F) {
+						hoffset = ((tmp_header & 0xE0) >> 5) |
+							  ((efuse_data & 0xF0) >> 1);
 						hworden = efuse_data & 0x0F;
-					}
-					else
-					{
+					} else {
 						efuse_addr++;
 						continue;
 					}
-
-				}
-				else
-				{
+				} else {
 					hoffset = (efuse_data>>4) & 0x0F;
 					hworden =  efuse_data & 0x0F;
 				}
 				word_cnts = Efuse_CalculateWordCnts(hworden);
-				bDataEmpty = true ;
+				bDataEmpty = true;
 
-				if (hoffset==offset) {
-					for (tmpidx = 0;tmpidx< word_cnts*2 ;tmpidx++) {
-						if (efuse_OneByteRead(adapter, efuse_addr+1+tmpidx ,&efuse_data, bPseudoTest)) {
+				if (hoffset == offset) {
+					for (tmpidx = 0; tmpidx < word_cnts*2; tmpidx++) {
+						if (efuse_OneByteRead(adapter, efuse_addr+1+tmpidx, &efuse_data, bPseudoTest)) {
 							tmpdata[tmpidx] = efuse_data;
-							if (efuse_data!=0xff) {
+							if (efuse_data!= 0xff)
 								bDataEmpty = false;
-							}
 						}
 					}
-					if (bDataEmpty==false) {
+					if (bDataEmpty == false) {
 						ReadState = PG_STATE_DATA;
 					} else {/* read next header */
 						efuse_addr = efuse_addr + (word_cnts*2)+1;
 						ReadState = PG_STATE_HEADER;
 					}
-				}
-				else {/* read next header */
+				} else {/* read next header */
 					efuse_addr = efuse_addr + (word_cnts*2)+1;
 					ReadState = PG_STATE_HEADER;
 				}
 
-			}
-			else {
-				bContinual = false ;
+			} else {
+				bContinual = false;
 			}
 		}
 		/*   Data section Read ------------- */
-		else if (ReadState & PG_STATE_DATA)
-		{
-			efuse_WordEnableDataRead(hworden,tmpdata,data);
+		else if (ReadState & PG_STATE_DATA) {
+			efuse_WordEnableDataRead(hworden, tmpdata, data);
 			efuse_addr = efuse_addr + (word_cnts*2)+1;
 			ReadState = PG_STATE_HEADER;
 		}
-
 	}
 
-	if (	(data[0]==0xff) &&(data[1]==0xff) && (data[2]==0xff)  && (data[3]==0xff) &&
-		(data[4]==0xff) &&(data[5]==0xff) && (data[6]==0xff)  && (data[7]==0xff))
+	if ((data[0]== 0xff) &&(data[1]== 0xff) && (data[2]== 0xff)  && (data[3]== 0xff) &&
+	    (data[4]== 0xff) &&(data[5]== 0xff) && (data[6]== 0xff)  && (data[7]== 0xff))
 		return false;
 	else
 		return true;
@@ -1652,31 +1485,24 @@ rtl8192d_Efuse_PgPacketWrite(struct rtw_
 					bool		bPseudoTest)
 {
 	u8	WriteState = PG_STATE_HEADER;
-
-	int	bContinual = true,bDataEmpty=true, bResult = true;
+	int	bContinual = true, bDataEmpty = true, bResult = true;
 	u16	efuse_addr = 0;
 	u8	efuse_data;
-
 	u8	pg_header = 0, pg_header_temp = 0;
-
-	u8	tmp_word_cnts=0,target_word_cnts=0;
-	u8	tmp_header,match_word_en,tmp_word_en;
-
+	u8	tmp_word_cnts = 0, target_word_cnts = 0;
+	u8	tmp_header, match_word_en, tmp_word_en;
 	struct pg_pkt_struct_a target_pkt;
 	struct pg_pkt_struct_a tmp_pkt = {
-		.offset=0,
-		.word_en=0,
-		.data={0,0,0,0,0,0,0,0},
-		.word_cnts=0
+		.offset = 0,
+		.word_en = 0,
+		.data ={0, 0, 0, 0, 0, 0, 0, 0},
+		.word_cnts = 0
 	};
-
 	u8	originaldata[sizeof(u8)*8];
-	u8	tmpindex = 0,badworden = 0x0F;
-
-	static int	repeat_times = 0;
-
+	u8	tmpindex = 0, badworden = 0x0F;
+	static int	repeat_times;
 	bool		bExtendedHeader = false;
-	u8	efuseType=EFUSE_WIFI;
+	u8	efuseType = EFUSE_WIFI;
 
 	/*  */
 	/*  <Roger_Notes> Efuse has been pre-programmed dummy 5Bytes at the end of Efuse by CP. */
@@ -1686,54 +1512,40 @@ rtl8192d_Efuse_PgPacketWrite(struct rtw_
 	/*  2009.02.19. */
 	/*  */
 	if (Efuse_GetCurrentSize(adapter, efuseType, bPseudoTest) >= (EFUSE_REAL_CONTENT_LEN-EFUSE_OOB_PROTECT_BYTES))
-	{
 		return false;
-	}
 
 	/*  Init the 8 bytes content as 0xff */
 	target_pkt.offset = offset;
-	target_pkt.word_en= word_en;
+	target_pkt.word_en = word_en;
 
 	memset((void *)target_pkt.data, 0xFF, sizeof(u8)*8);
 
 	efuse_WordEnableDataRead(word_en, data, target_pkt.data);
 	target_word_cnts = Efuse_CalculateWordCnts(target_pkt.word_en);
 
-	/*  */
 	/*  <Roger_Notes> Efuse has been pre-programmed dummy 5Bytes at the end of Efuse by CP. */
 	/*  So we have to prevent unexpected data string connection, which will cause */
 	/*  incorrect data auto-load from HW. Dummy 1bytes is additional. */
-	/*  2009.02.19. */
-	/*  */
-	while (bContinual && (efuse_addr  < (EFUSE_REAL_CONTENT_LEN-EFUSE_OOB_PROTECT_BYTES)))
-	{
+	while (bContinual && (efuse_addr  < (EFUSE_REAL_CONTENT_LEN-EFUSE_OOB_PROTECT_BYTES))) {
 
-		if (WriteState==PG_STATE_HEADER)
-		{
-			bDataEmpty=true;
+		if (WriteState == PG_STATE_HEADER) {
+			bDataEmpty = true;
 			badworden = 0x0F;
 			/*   so ******************* */
-			if (	efuse_OneByteRead(adapter, efuse_addr ,&efuse_data, bPseudoTest) &&
-				(efuse_data!=0xFF))
-			{
-				if ((efuse_data&0x1F) == 0x0F)		/* extended header */
-				{
+			if (efuse_OneByteRead(adapter, efuse_addr, &efuse_data, bPseudoTest) &&
+			    (efuse_data!= 0xFF)) {
+				if ((efuse_data&0x1F) == 0x0F) {		/* extended header */
 					tmp_header = efuse_data;
 					efuse_addr++;
-					efuse_OneByteRead(adapter, efuse_addr ,&efuse_data, bPseudoTest);
-					if ((efuse_data & 0x0F) == 0x0F)	/* wren fail */
-					{
+					efuse_OneByteRead(adapter, efuse_addr, &efuse_data, bPseudoTest);
+					if ((efuse_data & 0x0F) == 0x0F) {	/* wren fail */
 						efuse_addr++;
 						continue;
-					}
-					else
-					{
+					} else {
 						tmp_pkt.offset = ((tmp_header & 0xE0) >> 5) | ((efuse_data & 0xF0) >> 1);
 						tmp_pkt.word_en = efuse_data & 0x0F;
 					}
-				}
-				else
-				{
+				} else {
 					tmp_header  =  efuse_data;
 					tmp_pkt.offset	= (tmp_header>>4) & 0x0F;
 					tmp_pkt.word_en = tmp_header & 0x0F;
@@ -1741,131 +1553,96 @@ rtl8192d_Efuse_PgPacketWrite(struct rtw_
 				tmp_word_cnts =  Efuse_CalculateWordCnts(tmp_pkt.word_en);
 
 				/*   so-1 ******************* */
-				if (tmp_pkt.offset  != target_pkt.offset)
-				{
+				if (tmp_pkt.offset  != target_pkt.offset) {
 					efuse_addr = efuse_addr + (tmp_word_cnts*2) +1; /* Next pg_packet */
 #if (EFUSE_ERROE_HANDLE == 1)
 					WriteState = PG_STATE_HEADER;
 #endif
-				}
-				else		/* write the same offset */
-				{
+				} else {		/* write the same offset */
 					/*   so-2 ******************* */
-					for (tmpindex=0 ; tmpindex<(tmp_word_cnts*2) ; tmpindex++)
-					{
-						if (efuse_OneByteRead(adapter, (efuse_addr+1+tmpindex) ,&efuse_data, bPseudoTest)&&(efuse_data != 0xFF)) {
+					for (tmpindex = 0; tmpindex < (tmp_word_cnts*2); tmpindex++) {
+						if (efuse_OneByteRead(adapter, (efuse_addr+1+tmpindex), &efuse_data, bPseudoTest) &&
+						    (efuse_data != 0xFF))
 							bDataEmpty = false;
-						}
 					}
 					/*   so-2-1 ******************* */
-					if (bDataEmpty == false)
-					{
+					if (!bDataEmpty) {
 						efuse_addr = efuse_addr + (tmp_word_cnts*2) +1; /* Next pg_packet */
 #if (EFUSE_ERROE_HANDLE == 1)
-						WriteState=PG_STATE_HEADER;
+						WriteState = PG_STATE_HEADER;
 #endif
-					}
-					else
-					{/*   so-2-2 ******************* */
+					} else {/*   so-2-2 ******************* */
 
 						match_word_en = 0x0F;			/* same bit as original wren */
-						if (  !((target_pkt.word_en&BIT0)|(tmp_pkt.word_en&BIT0) ))
-						{
+						if (!((target_pkt.word_en&BIT0)|(tmp_pkt.word_en&BIT0)))
 							 match_word_en &= (~BIT0);
-						}
-						if (  !((target_pkt.word_en&BIT1)|(tmp_pkt.word_en&BIT1) ))
-						{
+						if (!((target_pkt.word_en&BIT1)|(tmp_pkt.word_en&BIT1)))
 							 match_word_en &= (~BIT1);
-						}
-						if (  !((target_pkt.word_en&BIT2)|(tmp_pkt.word_en&BIT2) ))
-						{
+						if (!((target_pkt.word_en&BIT2)|(tmp_pkt.word_en&BIT2)))
 							 match_word_en &= (~BIT2);
-						}
-						if (  !((target_pkt.word_en&BIT3)|(tmp_pkt.word_en&BIT3) ))
-						{
+						if (!((target_pkt.word_en&BIT3)|(tmp_pkt.word_en&BIT3)))
 							 match_word_en &= (~BIT3);
-						}
 
 						/*   so-2-2-A ******************* */
-						if ((match_word_en&0x0F)!=0x0F)
-						{
-							badworden = Efuse_WordEnableDataWrite(adapter,efuse_addr+1, tmp_pkt.word_en ,target_pkt.data, bPseudoTest);
+						if ((match_word_en&0x0F)!= 0x0F) {
+							badworden = Efuse_WordEnableDataWrite(adapter, efuse_addr+1, tmp_pkt.word_en , target_pkt.data, bPseudoTest);
 
 							/*   so-2-2-A-1 ******************* */
-							/*  */
-							if (0x0F != (badworden&0x0F))
-							{
+							if (0x0F != (badworden&0x0F)) {
 								u8	reorg_offset = offset;
-								u8	reorg_worden=badworden;
+								u8	reorg_worden = badworden;
 								Efuse_PgPacketWrite(adapter, reorg_offset, reorg_worden, target_pkt.data, bPseudoTest);
 							}
-							/*  */
 
 							tmp_word_en = 0x0F;		/* not the same bit as original wren */
-							if ( (target_pkt.word_en&BIT0)^(match_word_en&BIT0) )
-							{
+							if ((target_pkt.word_en&BIT0)^(match_word_en&BIT0))
 								tmp_word_en &= (~BIT0);
-							}
-							if (  (target_pkt.word_en&BIT1)^(match_word_en&BIT1))
-							{
+							if ((target_pkt.word_en&BIT1)^(match_word_en&BIT1))
 								tmp_word_en &=  (~BIT1);
-							}
-							if (  (target_pkt.word_en&BIT2)^(match_word_en&BIT2))
-							{
+							if ((target_pkt.word_en&BIT2)^(match_word_en&BIT2))
 								tmp_word_en &= (~BIT2);
-							}
-							if (  (target_pkt.word_en&BIT3)^(match_word_en&BIT3))
-							{
-								tmp_word_en &=(~BIT3);
-							}
+							if ((target_pkt.word_en&BIT3)^(match_word_en&BIT3))
+								tmp_word_en &= (~BIT3);
 
 							/*   so-2-2-A-2 ******************* */
-							if ((tmp_word_en&0x0F)!=0x0F) {
+							if ((tmp_word_en&0x0F)!= 0x0F) {
 								/* reorganize other pg packet */
 								efuse_addr = Efuse_GetCurrentSize(adapter, efuseType, bPseudoTest);
-								/*  */
 								target_pkt.offset = offset;
-								target_pkt.word_en= tmp_word_en;
-								/*  */
+								target_pkt.word_en = tmp_word_en;
 							} else {
 								bContinual = false;
 							}
 #if (EFUSE_ERROE_HANDLE == 1)
-							WriteState=PG_STATE_HEADER;
+							WriteState = PG_STATE_HEADER;
 							repeat_times++;
 							if (repeat_times>EFUSE_REPEAT_THRESHOLD_) {
 								bContinual = false;
 								bResult = false;
 							}
 #endif
-						}
-						else {/*   so-2-2-B ******************* */
+						} else {/*   so-2-2-B ******************* */
 							/* reorganize other pg packet */
 							efuse_addr = efuse_addr + (2*tmp_word_cnts) +1;/* next pg packet addr */
-							/*  */
 							target_pkt.offset = offset;
-							target_pkt.word_en= target_pkt.word_en;
-							/*  */
+							target_pkt.word_en = target_pkt.word_en;
 #if (EFUSE_ERROE_HANDLE == 1)
-							WriteState=PG_STATE_HEADER;
+							WriteState = PG_STATE_HEADER;
 #endif
 						}
 					}
 				}
-			}
-			else		/*   s1: header == oxff  ******************* */
+			} else		/*   s1: header == oxff  ******************* */
 			{
 				bExtendedHeader = false;
 
-				if (target_pkt.offset >= EFUSE_MAX_SECTION_BASE)
-				{
+				if (target_pkt.offset >= EFUSE_MAX_SECTION_BASE) {
 					pg_header = ((target_pkt.offset &0x07) << 5) | 0x0F;
 
-					efuse_OneByteWrite(adapter,efuse_addr, pg_header, bPseudoTest);
-					efuse_OneByteRead(adapter,efuse_addr, &tmp_header, bPseudoTest);
+					efuse_OneByteWrite(adapter, efuse_addr, pg_header, bPseudoTest);
+					efuse_OneByteRead(adapter, efuse_addr, &tmp_header, bPseudoTest);
 
-					while (tmp_header == 0xFF)
-					{
+					while (tmp_header == 0xFF) {
 						repeat_times++;
 
 						if (repeat_times>EFUSE_REPEAT_THRESHOLD_) {
@@ -1874,33 +1651,31 @@ rtl8192d_Efuse_PgPacketWrite(struct rtw_
 							efuse_addr++;
 							break;
 						}
-						efuse_OneByteWrite(adapter,efuse_addr, pg_header, bPseudoTest);
-						efuse_OneByteRead(adapter,efuse_addr, &tmp_header, bPseudoTest);
+						efuse_OneByteWrite(adapter, efuse_addr, pg_header, bPseudoTest);
+						efuse_OneByteRead(adapter, efuse_addr, &tmp_header, bPseudoTest);
 					}
 
 					if (!bContinual)
 						break;
 
-					if (tmp_header == pg_header)
-					{
+					if (tmp_header == pg_header) {
 						efuse_addr++;
 						pg_header_temp = pg_header;
 						pg_header = ((target_pkt.offset & 0x78) << 1) | target_pkt.word_en;
 
-						efuse_OneByteWrite(adapter,efuse_addr, pg_header, bPseudoTest);
-						efuse_OneByteRead(adapter,efuse_addr, &tmp_header, bPseudoTest);
+						efuse_OneByteWrite(adapter, efuse_addr, pg_header, bPseudoTest);
+						efuse_OneByteRead(adapter, efuse_addr, &tmp_header, bPseudoTest);
 
-						while (tmp_header == 0xFF)
-						{
+						while (tmp_header == 0xFF) {
 							repeat_times++;
 
-							if (repeat_times>EFUSE_REPEAT_THRESHOLD_) {
+							if (repeat_times > EFUSE_REPEAT_THRESHOLD_) {
 								bContinual = false;
 								bResult = false;
 								break;
 							}
-							efuse_OneByteWrite(adapter,efuse_addr, pg_header, bPseudoTest);
-							efuse_OneByteRead(adapter,efuse_addr, &tmp_header, bPseudoTest);
+							efuse_OneByteWrite(adapter, efuse_addr, pg_header, bPseudoTest);
+							efuse_OneByteRead(adapter, efuse_addr, &tmp_header, bPseudoTest);
 						}
 
 						if (!bContinual)
@@ -1914,36 +1689,30 @@ rtl8192d_Efuse_PgPacketWrite(struct rtw_
 								bContinual = false;
 								bResult = false;
 								break;
-							}
-							else
-							{
+							} else {
 								efuse_addr++;
 								continue;
 							}
-						}
-						else if (pg_header != tmp_header)	/* offset PG fail */
+						} else if (pg_header != tmp_header)	/* offset PG fail */
 						{
 							bExtendedHeader = true;
 							tmp_pkt.offset = ((pg_header_temp & 0xE0) >> 5) | ((tmp_header & 0xF0) >> 1);
-							tmp_pkt.word_en=  tmp_header & 0x0F;
+							tmp_pkt.word_en =  tmp_header & 0x0F;
 							tmp_word_cnts =  Efuse_CalculateWordCnts(tmp_pkt.word_en);
 						}
-					}
-					else if ((tmp_header & 0x1F) == 0x0F)		/* wrong extended header */
+					} else if ((tmp_header & 0x1F) == 0x0F)		/* wrong extended header */
 					{
-						efuse_addr+=2;
+						efuse_addr+= 2;
 						continue;
 					}
-				}
-				else
-				{
+				} else {
 					pg_header = ((target_pkt.offset << 4)&0xf0) |target_pkt.word_en;
-					efuse_OneByteWrite(adapter,efuse_addr, pg_header, bPseudoTest);
-					efuse_OneByteRead(adapter,efuse_addr, &tmp_header, bPseudoTest);
+					efuse_OneByteWrite(adapter, efuse_addr, pg_header, bPseudoTest);
+					efuse_OneByteRead(adapter, efuse_addr, &tmp_header, bPseudoTest);
 				}
 
-				if (tmp_header == pg_header)
-				{ /*   s1-1******************* */
+				if (tmp_header == pg_header) {
+					/*   s1-1******************* */
 					WriteState = PG_STATE_DATA;
 				}
 #if (EFUSE_ERROE_HANDLE == 1)
@@ -1957,42 +1726,36 @@ rtl8192d_Efuse_PgPacketWrite(struct rtw_
 					}
 				}
 #endif
-				else
-				{/*   s1-2 : fixed the header procedure ******************* */
-					if (!bExtendedHeader)
-					{
+				else {/*   s1-2 : fixed the header procedure ******************* */
+					if (!bExtendedHeader) {
 						tmp_pkt.offset = (tmp_header>>4) & 0x0F;
-						tmp_pkt.word_en=  tmp_header & 0x0F;
+						tmp_pkt.word_en =  tmp_header & 0x0F;
 						tmp_word_cnts =  Efuse_CalculateWordCnts(tmp_pkt.word_en);
 					}
 
 					/*   s1-2-A :cover the exist data ******************* */
 					memset((void *)originaldata, 0xff, sizeof(u8)*8);
 
-					if (Efuse_PgPacketRead(adapter, tmp_pkt.offset,originaldata, bPseudoTest))
+					if (Efuse_PgPacketRead(adapter, tmp_pkt.offset, originaldata, bPseudoTest))
 					{	/* check if data exist */
-						badworden = Efuse_WordEnableDataWrite(adapter,efuse_addr+1,tmp_pkt.word_en,originaldata, bPseudoTest);
+						badworden = Efuse_WordEnableDataWrite(adapter, efuse_addr+1, tmp_pkt.word_en, originaldata, bPseudoTest);
 						/*  */
-						if (0x0F != (badworden&0x0F))
-						{
+						if (0x0F != (badworden&0x0F)) {
 							u8	reorg_offset = tmp_pkt.offset;
-							u8	reorg_worden=badworden;
-							Efuse_PgPacketWrite(adapter,reorg_offset,reorg_worden,originaldata, bPseudoTest);
+							u8	reorg_worden = badworden;
+							Efuse_PgPacketWrite(adapter, reorg_offset, reorg_worden, originaldata, bPseudoTest);
 							efuse_addr = Efuse_GetCurrentSize(adapter, efuseType, bPseudoTest);
-						}
-						/*  */
-						else {
+						} else {
 							efuse_addr = efuse_addr + (tmp_word_cnts*2) +1; /* Next pg_packet */
 						}
 					}
 					 /*   s1-2-B: wrong address******************* */
-					else
-					{
+					else {
 						efuse_addr = efuse_addr + (tmp_word_cnts*2) +1; /* Next pg_packet */
 					}
 
 #if (EFUSE_ERROE_HANDLE == 1)
-					WriteState=PG_STATE_HEADER;
+					WriteState = PG_STATE_HEADER;
 					repeat_times++;
 					if (repeat_times>EFUSE_REPEAT_THRESHOLD_) {
 						bContinual = false;
@@ -2000,30 +1763,25 @@ rtl8192d_Efuse_PgPacketWrite(struct rtw_
 					}
 #endif
 				}
-
 			}
-
 		}
 		/* write data state */
-		else if (WriteState==PG_STATE_DATA)
-		{	/*   s1-1  ******************* */
+		else if (WriteState == PG_STATE_DATA) {
+			/*   s1-1  ******************* */
 			badworden = 0x0f;
-			badworden = Efuse_WordEnableDataWrite(adapter,efuse_addr+1,target_pkt.word_en,target_pkt.data , bPseudoTest);
-			if ((badworden&0x0F)==0x0F)
-			{ /*   s1-1-A ******************* */
+			badworden = Efuse_WordEnableDataWrite(adapter, efuse_addr+1, target_pkt.word_en, target_pkt.data , bPseudoTest);
+			if ((badworden&0x0F) == 0x0F) {
+				/*   s1-1-A ******************* */
 				bContinual = false;
-			}
-			else
-			{/* reorganize other pg packet ************  s1-1-B ******************* */
+			} else {
+				/* reorganize other pg packet **  s1-1-B **/
 				efuse_addr = efuse_addr + (2*target_word_cnts) +1;/* next pg packet addr */
 
-				/*  */
 				target_pkt.offset = offset;
-				target_pkt.word_en= badworden;
+				target_pkt.word_en = badworden;
 				target_word_cnts =  Efuse_CalculateWordCnts(target_pkt.word_en);
-				/*  */
 #if (EFUSE_ERROE_HANDLE == 1)
-				WriteState=PG_STATE_HEADER;
+				WriteState = PG_STATE_HEADER;
 				repeat_times++;
 				if (repeat_times>EFUSE_REPEAT_THRESHOLD_) {
 					bContinual = false;
@@ -2036,12 +1794,9 @@ rtl8192d_Efuse_PgPacketWrite(struct rtw_
 	return bResult;
 }
 
-static u8
-rtl8192d_Efuse_WordEnableDataWrite(	struct rtw_adapter *	adapter,
-							u16		efuse_addr,
-							u8		word_en,
-							u8		*data,
-							bool		bPseudoTest)
+static u8 rtl8192d_Efuse_WordEnableDataWrite(struct rtw_adapter *adapter,
+					     u16 efuse_addr, u8 word_en,
+					     u8 *data, bool bPseudoTest)
 {
 	u16	tmpaddr = 0;
 	u16	start_addr = efuse_addr;
@@ -2049,53 +1804,46 @@ rtl8192d_Efuse_WordEnableDataWrite(	stru
 	u8	tmpdata[8];
 
 	memset((void *)tmpdata, 0xff, PGPKT_DATA_SIZE);
-	if (!(word_en&BIT0))
-	{
+	if (!(word_en&BIT0)) {
 		tmpaddr = start_addr;
-		efuse_OneByteWrite(adapter,start_addr++, data[0], bPseudoTest);
-		efuse_OneByteWrite(adapter,start_addr++, data[1], bPseudoTest);
+		efuse_OneByteWrite(adapter, start_addr++, data[0], bPseudoTest);
+		efuse_OneByteWrite(adapter, start_addr++, data[1], bPseudoTest);
 
-		efuse_OneByteRead(adapter,tmpaddr, &tmpdata[0], bPseudoTest);
-		efuse_OneByteRead(adapter,tmpaddr+1, &tmpdata[1], bPseudoTest);
-		if ((data[0]!=tmpdata[0])||(data[1]!=tmpdata[1])) {
+		efuse_OneByteRead(adapter, tmpaddr, &tmpdata[0], bPseudoTest);
+		efuse_OneByteRead(adapter, tmpaddr+1, &tmpdata[1], bPseudoTest);
+		if ((data[0]!= tmpdata[0])||(data[1]!= tmpdata[1])) {
 			badworden &= (~BIT0);
 		}
 	}
-	if (!(word_en&BIT1))
-	{
+	if (!(word_en&BIT1)) {
 		tmpaddr = start_addr;
-		efuse_OneByteWrite(adapter,start_addr++, data[2], bPseudoTest);
-		efuse_OneByteWrite(adapter,start_addr++, data[3], bPseudoTest);
+		efuse_OneByteWrite(adapter, start_addr++, data[2], bPseudoTest);
+		efuse_OneByteWrite(adapter, start_addr++, data[3], bPseudoTest);
 
-		efuse_OneByteRead(adapter,tmpaddr    , &tmpdata[2], bPseudoTest);
-		efuse_OneByteRead(adapter,tmpaddr+1, &tmpdata[3], bPseudoTest);
-		if ((data[2]!=tmpdata[2])||(data[3]!=tmpdata[3])) {
-			badworden &=(~BIT1);
-		}
+		efuse_OneByteRead(adapter, tmpaddr    , &tmpdata[2], bPseudoTest);
+		efuse_OneByteRead(adapter, tmpaddr+1, &tmpdata[3], bPseudoTest);
+		if ((data[2]!= tmpdata[2])||(data[3]!= tmpdata[3]))
+			badworden &= (~BIT1);
 	}
-	if (!(word_en&BIT2))
-	{
+	if (!(word_en&BIT2)) {
 		tmpaddr = start_addr;
-		efuse_OneByteWrite(adapter,start_addr++, data[4], bPseudoTest);
-		efuse_OneByteWrite(adapter,start_addr++, data[5], bPseudoTest);
+		efuse_OneByteWrite(adapter, start_addr++, data[4], bPseudoTest);
+		efuse_OneByteWrite(adapter, start_addr++, data[5], bPseudoTest);
 
-		efuse_OneByteRead(adapter,tmpaddr, &tmpdata[4], bPseudoTest);
-		efuse_OneByteRead(adapter,tmpaddr+1, &tmpdata[5], bPseudoTest);
-		if ((data[4]!=tmpdata[4])||(data[5]!=tmpdata[5])) {
-			badworden &=(~BIT2);
-		}
+		efuse_OneByteRead(adapter, tmpaddr, &tmpdata[4], bPseudoTest);
+		efuse_OneByteRead(adapter, tmpaddr+1, &tmpdata[5], bPseudoTest);
+		if ((data[4]!= tmpdata[4])||(data[5]!= tmpdata[5]))
+			badworden &= (~BIT2);
 	}
-	if (!(word_en&BIT3))
-	{
+	if (!(word_en&BIT3)) {
 		tmpaddr = start_addr;
-		efuse_OneByteWrite(adapter,start_addr++, data[6], bPseudoTest);
-		efuse_OneByteWrite(adapter,start_addr++, data[7], bPseudoTest);
+		efuse_OneByteWrite(adapter, start_addr++, data[6], bPseudoTest);
+		efuse_OneByteWrite(adapter, start_addr++, data[7], bPseudoTest);
 
-		efuse_OneByteRead(adapter,tmpaddr, &tmpdata[6], bPseudoTest);
-		efuse_OneByteRead(adapter,tmpaddr+1, &tmpdata[7], bPseudoTest);
-		if ((data[6]!=tmpdata[6])||(data[7]!=tmpdata[7])) {
-			badworden &=(~BIT3);
-		}
+		efuse_OneByteRead(adapter, tmpaddr, &tmpdata[6], bPseudoTest);
+		efuse_OneByteRead(adapter, tmpaddr+1, &tmpdata[7], bPseudoTest);
+		if ((data[6]!= tmpdata[6])||(data[7]!= tmpdata[7]))
+			badworden &= (~BIT3);
 	}
 	return badworden;
 }
--- a/drivers/staging/rtl8192du/hal/rtl8192d_phycfg.c
+++ b/drivers/staging/rtl8192du/hal/rtl8192d_phycfg.c
@@ -6128,18 +6128,18 @@ void PHY_ConfigMacPhyMode92D(
 	temp = rtw_read8(adapter, offset);
 	temp &= ~(BIT(0)|BIT(1)|BIT(2));
 	switch (pHalData->MacPhyMode92D) {
-		case DUALMAC_DUALPHY:
-			MSG_8192D("MacPhyMode: DUALMAC_DUALPHY\n");
-			rtw_write8(adapter, offset, temp | BIT(0)|BIT(1));
-			break;
-		case SINGLEMAC_SINGLEPHY:
-			MSG_8192D("MacPhyMode: SINGLEMAC_SINGLEPHY\n");
-			rtw_write8(adapter, offset, temp | BIT(2));
-			break;
-		case DUALMAC_SINGLEPHY:
-			MSG_8192D("MacPhyMode: DUALMAC_SINGLEPHY\n");
-			rtw_write8(adapter, offset, temp | BIT(0));
-			break;
+	case DUALMAC_DUALPHY:
+		pr_info("r8192du: MacPhyMode: DUALMAC_DUALPHY\n");
+		rtw_write8(adapter, offset, temp | BIT(0)|BIT(1));
+		break;
+	case SINGLEMAC_SINGLEPHY:
+		pr_info("r8192du: MacPhyMode: SINGLEMAC_SINGLEPHY\n");
+		rtw_write8(adapter, offset, temp | BIT(2));
+		break;
+	case DUALMAC_SINGLEPHY:
+		pr_info("r8192du: MacPhyMode: DUALMAC_SINGLEPHY\n");
+		rtw_write8(adapter, offset, temp | BIT(0));
+		break;
 	}
 }
 
--- a/drivers/staging/rtl8192du/include/Hal8192DUHWImg.h
+++ b/drivers/staging/rtl8192du/include/Hal8192DUHWImg.h
@@ -21,7 +21,6 @@
 /*Created on  2011/11/11,  8: 8*/
 
 #define Rtl8192DUImgArrayLength 32302
-extern const u8 Rtl8192DUFwImgArray[Rtl8192DUImgArrayLength];
 #define Rtl8192DUMainArrayLength 1
 extern const u8 Rtl8192DUFwMainArray[Rtl8192DUMainArrayLength];
 #define Rtl8192DUDataArrayLength 1
--- a/drivers/staging/rtl8192du/include/Hal8192DUHWImg_wowlan.h
+++ /dev/null
@@ -1,25 +0,0 @@
-/******************************************************************************
- *
- * Copyright(c) 2007 - 2011 Realtek Corporation. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify it
- * under the terms of version 2 of the GNU General Public License as
- * published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
- * more details.
- *
- *
- ******************************************************************************/
-#ifndef __INC_HAL8192DU_FW_IMG_WOWLAN_H
-#define __INC_HAL8192DU_FW_IMG_WOWLAN_H
-
-/*Created on  2011/11/ 8, 14:15*/
-
-
-#define DUWWImgArrayLength 24818
-extern u8 Rtl8192DUFwWWImgArray[DUWWImgArrayLength];
-
-#endif /* __INC_HAL8192DU_FW_IMG_WOWLAN_H */
--- a/drivers/staging/rtl8192du/include/autoconf.h
+++ b/drivers/staging/rtl8192du/include/autoconf.h
@@ -18,8 +18,7 @@
  * Public  General Config
  */
 #define AUTOCONF_INCLUDED
-#define RTL871X_MODULE_NAME "92DU"
-#define DRV_NAME "rtl8192du"
+#define DRV_NAME "r8192du"
 #define DRIVERVERSION	"v4.2.1_7122.20130408"
 
 /* define CONFIG_IOCTL_CFG80211 1 */
--- a/drivers/staging/rtl8192du/include/drv_types.h
+++ b/drivers/staging/rtl8192du/include/drv_types.h
@@ -287,7 +287,10 @@ enum DRIVER_STATE {
 	DRIVER_REPLACE_DONGLE = 2,
 };
 
+struct rt_firmware_92d;
+
 struct rtw_adapter {
+	struct rt_firmware_92d *firmware;
 	int	DriverState;/*  for disable driver using module, use dongle to replace module. */
 	int	pid[3];/* process id from UI, 0:wps, 1:hostapd, 2:dhcpcd */
 	int	bDongle;/* build-in module or external dongle */
--- a/drivers/staging/rtl8192du/include/rtl8192d_hal.h
+++ b/drivers/staging/rtl8192du/include/rtl8192d_hal.h
@@ -195,8 +195,6 @@ static u32 TargetChnl_2G[TARGET_CHNL_NUM
 /* 		RTL8192DU From header */
 /*  */
 
-	/*  Fw Array */
-	#define Rtl8192D_FwImageArray					Rtl8192DUFwImgArray
 #ifdef CONFIG_WOWLAN
 	#define Rtl8192D_FwWWImageArray				Rtl8192DUFwWWImgArray
 #endif /* CONFIG_WOWLAN */
@@ -257,18 +255,12 @@ static u32 TargetChnl_2G[TARGET_CHNL_NUM
 
 #define MAX_PAGE_SIZE				4096	/*  @ page : 4k bytes */
 
-enum FIRMWARE_SOURCE {
-	FW_SOURCE_IMG_FILE = 0,
-	FW_SOURCE_HEADER_FILE = 1,              /* from header file */
-};
-
-struct RT_FIRMWARE_92D {
-	enum FIRMWARE_SOURCE	eFWSource;
-	u8*			szFwBuffer;
-	u32			ulFwLength;
+struct rt_firmware_92d {
+	u8 *buffer;
+	u32 length;
 #ifdef CONFIG_WOWLAN
-	u8*			szWoWLANFwBuffer;
-	u32			ulWoWLANFwLength;
+	u8 *wowbuffer;
+	u32 wowlength;
 #endif /* CONFIG_WOWLAN */
 };
 
--- a/drivers/staging/rtl8192du/include/rtw_debug.h
+++ b/drivers/staging/rtl8192du/include/rtw_debug.h
@@ -30,6 +30,7 @@
 #define _drv_info_			6
 #define	_drv_debug_			7
 
+#define RTL871X_MODULE_NAME "r8192du"
 
 #define _module_rtl871x_xmit_c_		BIT(0)
 #define _module_xmit_osdep_c_		BIT(1)
--- a/drivers/staging/rtl8192du/os_dep/os_intfs.c
+++ b/drivers/staging/rtl8192du/os_dep/os_intfs.c
@@ -23,8 +23,9 @@
 #include <recv_osdep.h>
 #include <hal_intf.h>
 #include <rtw_ioctl.h>
-
 #include <usb_osintf.h>
+#include <rtl8192d_hal.h>
+#include <linux/vmalloc.h>
 
 #ifdef CONFIG_BR_EXT
 #include <rtw_br_ext.h>
@@ -2355,8 +2356,7 @@ static int netdev_close(struct net_devic
 
 	RT_TRACE(_module_os_intfs_c_, _drv_info_, ("+871x_drv - drv_close\n"));
 
-	if (padapter->pwrctrlpriv.bInternalAutoSuspend == true)
-	{
+	if (padapter->pwrctrlpriv.bInternalAutoSuspend) {
 		if (padapter->pwrctrlpriv.rf_pwrstate == rf_off)
 			padapter->pwrctrlpriv.ps_flag = true;
 	}
@@ -2366,8 +2366,7 @@ static int netdev_close(struct net_devic
 		DBG_8192D("(2)871x_drv - drv_close, bup =%d, hw_init_completed =%d\n", padapter->bup, padapter->hw_init_completed);
 
 		/* s1. */
-		if (pnetdev)
-		{
+		if (pnetdev) {
 			if (!rtw_netif_queue_stopped(pnetdev))
 				rtw_netif_stop_queue(pnetdev);
 		}
@@ -2408,6 +2407,11 @@ static int netdev_close(struct net_devic
 	RT_TRACE(_module_os_intfs_c_, _drv_info_, ("-871x_drv - drv_close\n"));
 	DBG_8192D("-871x_drv - drv_close, bup =%d\n", padapter->bup);
 
+	if (padapter->firmware) {
+		vfree(padapter->firmware->buffer);
+		kfree(padapter->firmware);
+		padapter->firmware = NULL;
+	}
 	return 0;
 }
 
--- a/drivers/staging/rtl8192du/os_dep/usb_intf.c
+++ b/drivers/staging/rtl8192du/os_dep/usb_intf.c
@@ -1177,8 +1177,6 @@ static int rtw_drv_init(struct usb_inter
 	int i;
 #endif /* CONFIG_MULTI_VIR_IFACES */
 
-	RT_TRACE(_module_hci_intfs_c_, _drv_err_, ("+rtw_drv_init\n"));
-
 	/* step 0. */
 	process_spec_devid(did);
 
@@ -1200,10 +1198,8 @@ static int rtw_drv_init(struct usb_inter
 		goto free_if1;
 	}
 #ifdef CONFIG_MULTI_VIR_IFACES
-	for (i=0; i<if1->registrypriv.ext_iface_num;i++)
-	{
-		if (rtw_drv_add_vir_if (if1, "wlan%d", usb_set_intf_ops) == NULL)
-		{
+	for (i=0; i<if1->registrypriv.ext_iface_num;i++) {
+		if (rtw_drv_add_vir_if (if1, "wlan%d", usb_set_intf_ops) == NULL) {
 			DBG_8192D("rtw_drv_add_iface failed! (%d)\n", i);
 			break;
 		}
@@ -1211,19 +1207,16 @@ static int rtw_drv_init(struct usb_inter
 #endif /* CONFIG_MULTI_VIR_IFACES */
 #endif
 
-	RT_TRACE(_module_hci_intfs_c_,_drv_err_,("-871x_drv - drv_init, success!\n"));
-
 	status = _SUCCESS;
 
 free_if1:
-	if (status != _SUCCESS && if1) {
+	if (status != _SUCCESS && if1)
 		rtw_usb_if1_deinit(if1);
-	}
 free_dvobj:
 	if (status != _SUCCESS)
 		usb_dvobj_deinit(pusb_intf);
 exit:
-	return status == _SUCCESS?0:-ENODEV;
+	return status == _SUCCESS ? 0 : -ENODEV;
 }
 
 /*
@@ -1236,12 +1229,9 @@ static void rtw_dev_remove(struct usb_in
 	struct rtw_adapter *padapter = dvobj->if1;
 
 	DBG_8192D("+rtw_dev_remove\n");
-	RT_TRACE(_module_hci_intfs_c_,_drv_err_,("+dev_remove()\n"));
 
-	if (usb_drv->drv_registered == true)
-	{
+	if (usb_drv->drv_registered )
 		padapter->bSurpriseRemoved = true;
-	}
 
 #if defined(CONFIG_HAS_EARLYSUSPEND) || defined(CONFIG_ANDROID_POWER)
 	rtw_unregister_early_suspend(&padapter->pwrctrlpriv);
@@ -1282,13 +1272,7 @@ extern int console_suspend_enabled;
 
 static int __init rtw_drv_entry(void)
 {
-	RT_TRACE(_module_hci_intfs_c_,_drv_err_,("+rtw_drv_entry\n"));
-
-	DBG_8192D(DRV_NAME " driver version=%s\n", DRIVERVERSION);
-	DBG_8192D("build time: %s %s\n", __DATE__, __TIME__);
-
 	rtw_suspend_lock_init();
-
 	usb_drv->drv_registered = true;
 	return usb_register(&usb_drv->usbdrv);
 }
