From e44030a5c745f723c2657de970d1ba1e77f450d9 Mon Sep 17 00:00:00 2001
From: Larry Finger <Larry.Finger@lwfinger.net>
Date: Wed, 24 Apr 2013 10:44:43 -0500
Subject: [PATCH 058/390] Remove _*_critical() calls

These are replaced with the spin_lock_irqsave() and spin_unlock_irqrestore()
calls. The typedef for _irqL is also removed.

Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
---
 core/rtw_cmd.c          | 12 ++++++------
 core/rtw_recv.c         | 36 ++++++++++++++++++------------------
 core/rtw_xmit.c         | 24 ++++++++++++------------
 include/osdep_service.h | 13 -------------
 os_dep/usb_ops_linux.c  | 12 ++++++------
 5 files changed, 42 insertions(+), 55 deletions(-)

--- a/drivers/staging/rtl8192du/core/rtw_cmd.c
+++ b/drivers/staging/rtl8192du/core/rtw_cmd.c
@@ -188,18 +188,18 @@ ISR/Call-Back functions can't call this
 
 int	_rtw_enqueue_cmd(_queue *queue, struct cmd_obj *obj)
 {
-	_irqL irqL;
+	long unsigned int irqL;
 
 _func_enter_;
 
 	if (obj == NULL)
 		goto exit;
 
-	_enter_critical(&queue->lock, &irqL);
+	spin_lock_irqsave(&queue->lock, irqL);
 
 	rtw_list_insert_tail(&obj->list, &queue->queue);
 
-	_exit_critical(&queue->lock, &irqL);
+	spin_unlock_irqrestore(&queue->lock, irqL);
 
 exit:
 
@@ -210,12 +210,12 @@ _func_exit_;
 
 struct	cmd_obj	*_rtw_dequeue_cmd(_queue *queue)
 {
-	_irqL irqL;
+	long unsigned int irqL;
 	struct cmd_obj *obj;
 
 _func_enter_;
 
-	_enter_critical(&queue->lock, &irqL);
+	spin_lock_irqsave(&queue->lock, irqL);
 	if (rtw_is_list_empty(&(queue->queue)))
 		obj = NULL;
 	else
@@ -224,7 +224,7 @@ _func_enter_;
 		rtw_list_delete(&obj->list);
 	}
 
-	_exit_critical(&queue->lock, &irqL);
+	spin_unlock_irqrestore(&queue->lock, irqL);
 
 _func_exit_;
 
--- a/drivers/staging/rtl8192du/core/rtw_recv.c
+++ b/drivers/staging/rtl8192du/core/rtw_recv.c
@@ -364,29 +364,29 @@ u32 rtw_free_uc_swdec_pending_queue(_ada
 
 int rtw_enqueue_recvbuf_to_head(struct recv_buf *precvbuf, _queue *queue)
 {
-	_irqL irqL;
+	long unsigned int irqL;
 
-	_enter_critical(&queue->lock, &irqL);
+	spin_lock_irqsave(&queue->lock, irqL);
 
 	rtw_list_delete(&precvbuf->list);
 	rtw_list_insert_head(&precvbuf->list, get_list_head(queue));
 
-	_exit_critical(&queue->lock, &irqL);
+	spin_unlock_irqrestore(&queue->lock, irqL);
 
 	return _SUCCESS;
 }
 
 int rtw_enqueue_recvbuf(struct recv_buf *precvbuf, _queue *queue)
 {
-	_irqL irqL;
+	long unsigned int irqL;
 
-	_enter_critical(&queue->lock, &irqL);
+	spin_lock_irqsave(&queue->lock, irqL);
 
 	rtw_list_delete(&precvbuf->list);
 
 	rtw_list_insert_tail(&precvbuf->list, get_list_head(queue));
 
-	_exit_critical(&queue->lock, &irqL);
+	spin_unlock_irqrestore(&queue->lock, irqL);
 
 
 	return _SUCCESS;
@@ -395,11 +395,11 @@ int rtw_enqueue_recvbuf(struct recv_buf
 
 struct recv_buf *rtw_dequeue_recvbuf (_queue *queue)
 {
-	_irqL irqL;
+	long unsigned int irqL;
 	struct recv_buf *precvbuf;
 	_list	*plist, *phead;
 
-	_enter_critical(&queue->lock, &irqL);
+	spin_lock_irqsave(&queue->lock, irqL);
 
 	if(_rtw_queue_empty(queue) == true)
 	{
@@ -417,7 +417,7 @@ struct recv_buf *rtw_dequeue_recvbuf (_q
 
 	}
 
-	_exit_critical(&queue->lock, &irqL);
+	spin_unlock_irqrestore(&queue->lock, irqL);
 
 
 	return precvbuf;
@@ -2479,7 +2479,7 @@ int enqueue_reorder_recvframe(struct rec
 
 	//DbgPrint("+enqueue_reorder_recvframe()\n");
 
-	//_enter_critical(&ppending_recvframe_queue->lock, &irql);
+	//spin_lock_irqsave(&ppending_recvframe_queue->lock, &irql);
 	//_rtw_spinlock_ex(&ppending_recvframe_queue->lock);
 
 
@@ -2500,7 +2500,7 @@ int enqueue_reorder_recvframe(struct rec
 			//Duplicate entry is found!! Do not insert current entry.
 			//RT_TRACE(COMP_RX_REORDER, DBG_TRACE, ("InsertRxReorderList(): Duplicate packet is dropped!! IndicateSeq: %d, NewSeq: %d\n", pTS->RxIndicateSeq, SeqNum));
 
-			//_exit_critical(&ppending_recvframe_queue->lock, &irql);
+			//spin_unlock_irqrestore(&ppending_recvframe_queue->lock, &irql);
 
 			return false;
 		}
@@ -2514,7 +2514,7 @@ int enqueue_reorder_recvframe(struct rec
 	}
 
 
-	//_enter_critical(&ppending_recvframe_queue->lock, &irql);
+	//spin_lock_irqsave(&ppending_recvframe_queue->lock, &irql);
 	//_rtw_spinlock_ex(&ppending_recvframe_queue->lock);
 
 	rtw_list_delete(&(prframe->u.hdr.list));
@@ -2522,7 +2522,7 @@ int enqueue_reorder_recvframe(struct rec
 	rtw_list_insert_tail(&(prframe->u.hdr.list), plist);
 
 	//_rtw_spinunlock_ex(&ppending_recvframe_queue->lock);
-	//_exit_critical(&ppending_recvframe_queue->lock, &irql);
+	//spin_unlock_irqrestore(&ppending_recvframe_queue->lock, &irql);
 
 
 	//RT_TRACE(COMP_RX_REORDER, DBG_TRACE, ("InsertRxReorderList(): Pkt insert into buffer!! IndicateSeq: %d, NewSeq: %d\n", pTS->RxIndicateSeq, SeqNum));
@@ -2548,7 +2548,7 @@ int recv_indicatepkts_in_order(_adapter
 	{
 		if(rtw_is_list_empty(phead))
 		{
-			// _exit_critical(&ppending_recvframe_queue->lock, &irql);
+			// spin_unlock_irqrestore(&ppending_recvframe_queue->lock, &irql);
 			//_rtw_spinunlock_ex(&ppending_recvframe_queue->lock);
 			return true;
 		}
@@ -2623,7 +2623,7 @@ int recv_indicatepkts_in_order(_adapter
 	}
 
 	//_rtw_spinunlock_ex(&ppending_recvframe_queue->lock);
-	//_exit_critical(&ppending_recvframe_queue->lock, &irql);
+	//spin_unlock_irqrestore(&ppending_recvframe_queue->lock, &irql);
 
 /*
 	//Release the indication lock and set to new indication step.
@@ -2640,7 +2640,7 @@ int recv_indicatepkts_in_order(_adapter
 		//pTS->RxIndicateState = RXTS_INDICATE_IDLE;
 	}
 */
-	//_exit_critical(&ppending_recvframe_queue->lock, &irql);
+	//spin_unlock_irqrestore(&ppending_recvframe_queue->lock, &irql);
 
 	//return true;
 	return bPktInBuf;
@@ -2752,7 +2752,7 @@ int recv_indicatepkt_reorder(_adapter *p
 		//pHTInfo->RxReorderDropCounter++;
 		//ReturnRFDList(Adapter, pRfd);
 		//RT_TRACE(COMP_RX_REORDER, DBG_TRACE, ("RxReorderIndicatePacket() ==> Packet Drop!!\n"));
-		//_exit_critical(&ppending_recvframe_queue->lock, &irql);
+		//spin_unlock_irqrestore(&ppending_recvframe_queue->lock, &irql);
 		//return _FAIL;
 
 		#ifdef DBG_RX_DROP_FRAME
@@ -2766,7 +2766,7 @@ int recv_indicatepkt_reorder(_adapter *p
 	if(!enqueue_reorder_recvframe(preorder_ctrl, prframe))
 	{
 		//DbgPrint("recv_indicatepkt_reorder, enqueue_reorder_recvframe fail!\n");
-		//_exit_critical(&ppending_recvframe_queue->lock, &irql);
+		//spin_unlock_irqrestore(&ppending_recvframe_queue->lock, &irql);
 		//return _FAIL;
 		#ifdef DBG_RX_DROP_FRAME
 		DBG_8192D("DBG_RX_DROP_FRAME %s enqueue_reorder_recvframe fail\n", __FUNCTION__);
--- a/drivers/staging/rtl8192du/core/rtw_xmit.c
+++ b/drivers/staging/rtl8192du/core/rtw_xmit.c
@@ -1846,14 +1846,14 @@ void rtw_count_tx_stats(_adapter *padapt
 
 struct xmit_buf *rtw_alloc_xmitbuf_ext(struct xmit_priv *pxmitpriv)
 {
-	_irqL irqL;
+	long unsigned int irqL;
 	struct xmit_buf *pxmitbuf =  NULL;
 	_list *plist, *phead;
 	_queue *pfree_queue = &pxmitpriv->free_xmit_extbuf_queue;
 
 _func_enter_;
 
-	_enter_critical(&pfree_queue->lock, &irqL);
+	spin_lock_irqsave(&pfree_queue->lock, irqL);
 
 	if(_rtw_queue_empty(pfree_queue) == true) {
 		pxmitbuf = NULL;
@@ -1885,7 +1885,7 @@ _func_enter_;
 
 	}
 
-	_exit_critical(&pfree_queue->lock, &irqL);
+	spin_unlock_irqrestore(&pfree_queue->lock, irqL);
 
 _func_exit_;
 
@@ -1894,7 +1894,7 @@ _func_exit_;
 
 s32 rtw_free_xmitbuf_ext(struct xmit_priv *pxmitpriv, struct xmit_buf *pxmitbuf)
 {
-	_irqL irqL;
+	long unsigned int irqL;
 	_queue *pfree_queue = &pxmitpriv->free_xmit_extbuf_queue;
 
 _func_enter_;
@@ -1904,7 +1904,7 @@ _func_enter_;
 		return _FAIL;
 	}
 
-	_enter_critical(&pfree_queue->lock, &irqL);
+	spin_lock_irqsave(&pfree_queue->lock, irqL);
 
 	rtw_list_delete(&pxmitbuf->list);
 
@@ -1914,7 +1914,7 @@ _func_enter_;
 	DBG_8192D("DBG_XMIT_BUF FREE no=%d, free_xmit_extbuf_cnt=%d\n",pxmitbuf->no ,pxmitpriv->free_xmit_extbuf_cnt);
 	#endif
 
-	_exit_critical(&pfree_queue->lock, &irqL);
+	spin_unlock_irqrestore(&pfree_queue->lock, irqL);
 
 _func_exit_;
 
@@ -1923,7 +1923,7 @@ _func_exit_;
 
 struct xmit_buf *rtw_alloc_xmitbuf(struct xmit_priv *pxmitpriv)
 {
-	_irqL irqL;
+	long unsigned int irqL;
 	struct xmit_buf *pxmitbuf =  NULL;
 	_list *plist, *phead;
 	_queue *pfree_xmitbuf_queue = &pxmitpriv->free_xmitbuf_queue;
@@ -1932,7 +1932,7 @@ _func_enter_;
 
 	//DBG_8192D("+rtw_alloc_xmitbuf\n");
 
-	_enter_critical(&pfree_xmitbuf_queue->lock, &irqL);
+	spin_lock_irqsave(&pfree_xmitbuf_queue->lock, irqL);
 
 	if(_rtw_queue_empty(pfree_xmitbuf_queue) == true) {
 		pxmitbuf = NULL;
@@ -1969,7 +1969,7 @@ _func_enter_;
 	}
 	#endif
 
-	_exit_critical(&pfree_xmitbuf_queue->lock, &irqL);
+	spin_unlock_irqrestore(&pfree_xmitbuf_queue->lock, irqL);
 
 _func_exit_;
 
@@ -1978,7 +1978,7 @@ _func_exit_;
 
 s32 rtw_free_xmitbuf(struct xmit_priv *pxmitpriv, struct xmit_buf *pxmitbuf)
 {
-	_irqL irqL;
+	long unsigned int irqL;
 	_queue *pfree_xmitbuf_queue = &pxmitpriv->free_xmitbuf_queue;
 
 _func_enter_;
@@ -2001,7 +2001,7 @@ _func_enter_;
 	}
 	else
 	{
-		_enter_critical(&pfree_xmitbuf_queue->lock, &irqL);
+		spin_lock_irqsave(&pfree_xmitbuf_queue->lock, irqL);
 
 		rtw_list_delete(&pxmitbuf->list);
 
@@ -2012,7 +2012,7 @@ _func_enter_;
 		#ifdef DBG_XMIT_BUF
 		DBG_8192D("DBG_XMIT_BUF FREE no=%d, free_xmitbuf_cnt=%d\n",pxmitbuf->no ,pxmitpriv->free_xmitbuf_cnt);
 		#endif
-		_exit_critical(&pfree_xmitbuf_queue->lock, &irqL);
+		spin_unlock_irqrestore(&pfree_xmitbuf_queue->lock, irqL);
 	}
 
 _func_exit_;
--- a/drivers/staging/rtl8192du/include/osdep_service.h
+++ b/drivers/staging/rtl8192du/include/osdep_service.h
@@ -111,8 +111,6 @@
 	typedef struct	__queue	_queue;
 	typedef struct	list_head	_list;
 	typedef	int	_OS_STATUS;
-	//typedef u32	_irqL;
-	typedef unsigned long _irqL;
 	typedef	struct	net_device * _nic_hdl;
 
 	typedef void*		_thread_hdl_;
@@ -166,17 +164,6 @@ static inline _list	*get_list_head(_queu
 #define LIST_CONTAINOR(ptr, type, member) \
         ((type *)((char *)(ptr)-(__kernel_size_t)(&((type *)0)->member)))
 
-
-static inline void _enter_critical(_lock *plock, _irqL *pirqL)
-{
-	spin_lock_irqsave(plock, *pirqL);
-}
-
-static inline void _exit_critical(_lock *plock, _irqL *pirqL)
-{
-	spin_unlock_irqrestore(plock, *pirqL);
-}
-
 static inline void _enter_critical_mutex(_mutex *pmutex)
 {
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,37))
--- a/drivers/staging/rtl8192du/os_dep/usb_ops_linux.c
+++ b/drivers/staging/rtl8192du/os_dep/usb_ops_linux.c
@@ -308,7 +308,7 @@ void usb_read_port_cancel(struct intf_hd
 
 static void usb_write_port_complete(struct urb *purb, struct pt_regs *regs)
 {
-	_irqL irqL;
+	long unsigned int irqL;
 	int i;
 	struct xmit_buf *pxmitbuf = (struct xmit_buf *)purb->context;
 	//struct xmit_frame *pxmitframe = (struct xmit_frame *)pxmitbuf->priv_data;
@@ -344,7 +344,7 @@ _func_enter_;
 
 
 /*
-	_enter_critical(&pxmitpriv->lock, &irqL);
+	spin_lock_irqsave(&pxmitpriv->lock, irqL);
 
 	pxmitpriv->txirp_cnt--;
 
@@ -374,7 +374,7 @@ _func_enter_;
 
 	}
 
-	_exit_critical(&pxmitpriv->lock, &irqL);
+	spin_unlock_irqrestore(&pxmitpriv->lock, irqL);
 
 
 	if(pxmitpriv->txirp_cnt==0)
@@ -459,7 +459,7 @@ _func_exit_;
 
 u32 usb_write_port(struct intf_hdl *pintfhdl, u32 addr, u32 cnt, u8 *wmem)
 {
-	_irqL irqL;
+	long unsigned int irqL;
 	unsigned int pipe;
 	int status;
 	u32 ret = _FAIL, bwritezero = false;
@@ -486,7 +486,7 @@ _func_enter_;
 		goto exit;
 	}
 
-	_enter_critical(&pxmitpriv->lock, &irqL);
+	spin_lock_irqsave(&pxmitpriv->lock, irqL);
 
 	switch(addr)
 	{
@@ -514,7 +514,7 @@ _func_enter_;
 			break;
 	}
 
-	_exit_critical(&pxmitpriv->lock, &irqL);
+	spin_unlock_irqrestore(&pxmitpriv->lock, irqL);
 
 	purb	= pxmitbuf->pxmit_urb[0];
 
