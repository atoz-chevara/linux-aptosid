From bd2405e9d7988c820ea9ce65b770c9a61f57bd2b Mon Sep 17 00:00:00 2001
From: Larry Finger <Larry.Finger@lwfinger.net>
Date: Mon, 13 May 2013 12:58:42 -0500
Subject: [PATCH 147/390] Fix checkpatch ERROR and CHECK in core/rtw_iol.c

Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
---
 core/rtw_iol.c    | 104 ++++++++++++++++++++++++++++--------------------------
 include/rtw_iol.h |   2 --
 2 files changed, 53 insertions(+), 53 deletions(-)

--- a/drivers/staging/rtl8192du/core/rtw_iol.c
+++ b/drivers/staging/rtl8192du/core/rtw_iol.c
@@ -28,15 +28,17 @@ struct xmit_frame	*rtw_IOL_accquire_xmit
 	struct pkt_attrib	*pattrib;
 	struct xmit_priv	*pxmitpriv = &(adapter->xmitpriv);
 
-	if ((xmit_frame = rtw_alloc_xmitframe(pxmitpriv)) == NULL) {
+	xmit_frame = rtw_alloc_xmitframe(pxmitpriv);
+	if (xmit_frame == NULL) {
 		DBG_871X("%s rtw_alloc_xmitframe return null\n", __func__);
 		goto exit;
 	}
 
-	if ((xmitbuf = rtw_alloc_xmitbuf(pxmitpriv)) == NULL) {
+	xmitbuf = rtw_alloc_xmitbuf(pxmitpriv);
+	if (xmitbuf == NULL) {
 		DBG_871X("%s rtw_alloc_xmitbuf return null\n", __func__);
 		rtw_free_xmitframe(pxmitpriv, xmit_frame);
-		xmit_frame=NULL;
+		xmit_frame = NULL;
 		goto exit;
 	}
 
@@ -48,13 +50,14 @@ struct xmit_frame	*rtw_IOL_accquire_xmit
 	pattrib = &xmit_frame->attrib;
 	update_mgntframe_attrib(adapter, pattrib);
 	pattrib->qsel = 0x10;
-	pattrib->pktlen = pattrib->last_txcmdsz = 0;
+	pattrib->pktlen = 0;
+	pattrib->last_txcmdsz = 0;
 exit:
 	return xmit_frame;
 }
 
-
-int rtw_IOL_append_cmds(struct xmit_frame *xmit_frame, u8 *IOL_cmds, u32 cmd_len)
+int rtw_IOL_append_cmds(struct xmit_frame *xmit_frame, u8 *IOL_cmds,
+			u32 cmd_len)
 {
 	struct pkt_attrib	*pattrib = &xmit_frame->attrib;
 	u16 buf_offset;
@@ -66,12 +69,13 @@ int rtw_IOL_append_cmds(struct xmit_fram
 
 	/* check if the io_buf can accommodate new cmds */
 	if (ori_len + cmd_len + 8 > MAX_XMITBUF_SZ) {
-		DBG_871X("%s %u is large than MAX_XMITBUF_SZ:%u, can't accommodate new cmds\n", __func__
-			, ori_len + cmd_len + 8, MAX_XMITBUF_SZ);
+		DBG_871X("%s %u is large than MAX_XMITBUF_SZ:%u, can't accommodate new cmds\n",
+			 __func__, ori_len + cmd_len + 8, MAX_XMITBUF_SZ);
 		return _FAIL;
 	}
 
-	memcpy(xmit_frame->buf_addr + buf_offset + pattrib->pktlen, IOL_cmds, cmd_len);
+	memcpy(xmit_frame->buf_addr + buf_offset + pattrib->pktlen,
+	       IOL_cmds, cmd_len);
 	pattrib->pktlen += cmd_len;
 	pattrib->last_txcmdsz += cmd_len;
 	return _SUCCESS;
@@ -81,63 +85,69 @@ int rtw_IOL_append_LLT_cmd(struct xmit_f
 {
 	IOL_CMD cmd = {0x0, IOL_CMD_LLT, 0x0, 0x0};
 
-	RTW_PUT_BE32((u8*)&cmd.value, (u32)page_boundary);
+	RTW_PUT_BE32((u8 *)&cmd.value, (u32)page_boundary);
 
-	return rtw_IOL_append_cmds(xmit_frame, (u8*)&cmd, 8);
+	return rtw_IOL_append_cmds(xmit_frame, (u8 *)&cmd, 8);
 }
 
 int _rtw_IOL_append_WB_cmd(struct xmit_frame *xmit_frame, u16 addr, u8 value)
 {
 	IOL_CMD cmd = {0x0, IOL_CMD_WB_REG, 0x0, 0x0};
 
-	RTW_PUT_BE16((u8*)&cmd.address, (u16)addr);
-	RTW_PUT_BE32((u8*)&cmd.value, (u32)value);
+	RTW_PUT_BE16((u8 *)&cmd.address, (u16)addr);
+	RTW_PUT_BE32((u8 *)&cmd.value, (u32)value);
 
-	return rtw_IOL_append_cmds(xmit_frame, (u8*)&cmd, 8);
+	return rtw_IOL_append_cmds(xmit_frame, (u8 *)&cmd, 8);
 }
 
 int _rtw_IOL_append_WW_cmd(struct xmit_frame *xmit_frame, u16 addr, u16 value)
 {
 	IOL_CMD cmd = {0x0, IOL_CMD_WW_REG, 0x0, 0x0};
 
-	RTW_PUT_BE16((u8*)&cmd.address, (u16)addr);
-	RTW_PUT_BE32((u8*)&cmd.value, (u32)value);
+	RTW_PUT_BE16((u8 *)&cmd.address, (u16)addr);
+	RTW_PUT_BE32((u8 *)&cmd.value, (u32)value);
 
-	return rtw_IOL_append_cmds(xmit_frame, (u8*)&cmd, 8);
+	return rtw_IOL_append_cmds(xmit_frame, (u8i *)&cmd, 8);
 }
 
 int _rtw_IOL_append_WD_cmd(struct xmit_frame *xmit_frame, u16 addr, u32 value)
 {
 	IOL_CMD cmd = {0x0, IOL_CMD_WD_REG, 0x0, 0x0};
-	u8* pos = (u8 *)&cmd;
+	u8 *pos = (u8 *)&cmd;
 
-	RTW_PUT_BE16((u8*)&cmd.address, (u16)addr);
-	RTW_PUT_BE32((u8*)&cmd.value, (u32)value);
+	RTW_PUT_BE16((u8 *)&cmd.address, (u16)addr);
+	RTW_PUT_BE32((u8 *)&cmd.value, (u32)value);
 
-	return rtw_IOL_append_cmds(xmit_frame, (u8*)&cmd, 8);
+	return rtw_IOL_append_cmds(xmit_frame, (u8 *)&cmd, 8);
 }
 
 #ifdef DBG_IO
-int dbg_rtw_IOL_append_WB_cmd(struct xmit_frame *xmit_frame, u16 addr, u8 value, const char *caller, const int line)
+int dbg_rtw_IOL_append_WB_cmd(struct xmit_frame *xmit_frame, u16 addr, u8 value,
+			      const char *caller, const int line)
 {
 	if (match_write_sniff_ranges(addr, 1))
-		DBG_871X("DBG_IO %s:%d IOL_WB(0x%04x, 0x%02x)\n", caller, line, addr, value);
+		DBG_871X("DBG_IO %s:%d IOL_WB(0x%04x, 0x%02x)\n", caller,
+			 line, addr, value);
 
 	return _rtw_IOL_append_WB_cmd(xmit_frame, addr, value);
 }
 
-int dbg_rtw_IOL_append_WW_cmd(struct xmit_frame *xmit_frame, u16 addr, u16 value, const char *caller, const int line)
+int dbg_rtw_IOL_append_WW_cmd(struct xmit_frame *xmit_frame, u16 addr,
+			      u16 value, const char *caller, const int line)
 {
 	if (match_write_sniff_ranges(addr, 2))
-		DBG_871X("DBG_IO %s:%d IOL_WW(0x%04x, 0x%04x)\n", caller, line, addr, value);
+		DBG_871X("DBG_IO %s:%d IOL_WW(0x%04x, 0x%04x)\n",
+			 caller, line, addr, value);
 
 	return _rtw_IOL_append_WW_cmd(xmit_frame, addr, value);
 }
 
-int dbg_rtw_IOL_append_WD_cmd(struct xmit_frame *xmit_frame, u16 addr, u32 value, const char *caller, const int line)
+int dbg_rtw_IOL_append_WD_cmd(struct xmit_frame *xmit_frame, u16 addr,
+			      u32 value, const char *caller, const int line)
 {
 	if (match_write_sniff_ranges(addr, 4))
-		DBG_871X("DBG_IO %s:%d IOL_WD(0x%04x, 0x%08x)\n", caller, line, addr, value);
+		DBG_871X("DBG_IO %s:%d IOL_WD(0x%04x, 0x%08x)\n", caller,
+			 line, addr, value);
 
 	return _rtw_IOL_append_WD_cmd(xmit_frame, addr, value);
 }
@@ -147,22 +157,18 @@ int rtw_IOL_append_DELAY_US_cmd(struct x
 {
 	IOL_CMD cmd = {0x0, IOL_CMD_DELAY_US, 0x0, 0x0};
 
-	RTW_PUT_BE32((u8*)&cmd.value, (u32)us);
-
-	/* DBG_871X("%s %u\n", __func__, us); */
+	RTW_PUT_BE32((u8 *)&cmd.value, (u32)us);
 
-	return rtw_IOL_append_cmds(xmit_frame, (u8*)&cmd, 8);
+	return rtw_IOL_append_cmds(xmit_frame, (u8 *)&cmd, 8);
 }
 
 int rtw_IOL_append_DELAY_MS_cmd(struct xmit_frame *xmit_frame, u16 ms)
 {
 	IOL_CMD cmd = {0x0, IOL_CMD_DELAY_MS, 0x0, 0x0};
 
-	RTW_PUT_BE32((u8*)&cmd.value, (u32)ms);
-
-	/* DBG_871X("%s %u\n", __func__, ms); */
+	RTW_PUT_BE32((u8 *)&cmd.value, (u32)ms);
 
-	return rtw_IOL_append_cmds(xmit_frame, (u8*)&cmd, 8);
+	return rtw_IOL_append_cmds(xmit_frame, (u8 *)&cmd, 8);
 }
 
 int rtw_IOL_append_END_cmd(struct xmit_frame *xmit_frame)
@@ -178,28 +184,32 @@ int rtw_IOL_append_END_cmd(struct xmit_f
 
 	/* check if the io_buf can accommodate new cmds */
 	if (ori_len + 8 > MAX_XMITBUF_SZ) {
-		DBG_871X("%s %u is large than MAX_XMITBUF_SZ:%u, can't accommodate end cmd\n", __func__
-			, ori_len + 8, MAX_XMITBUF_SZ);
+		DBG_871X("%s %u is large than MAX_XMITBUF_SZ:%u, can't accommodate end cmd\n",
+			 __func__, ori_len + 8, MAX_XMITBUF_SZ);
 		return _FAIL;
 	}
 
-	memcpy(xmit_frame->buf_addr + buf_offset + pattrib->pktlen, (u8*)&end_cmd, 8);
+	memcpy(xmit_frame->buf_addr + buf_offset + pattrib->pktlen,
+	       (u8 *)&end_cmd, 8);
 	pattrib->pktlen += 8;
 	pattrib->last_txcmdsz += 8;
 
 	return _SUCCESS;
 }
 
-int rtw_IOL_exec_cmds_sync(ADAPTER *adapter, struct xmit_frame *xmit_frame, u32 max_wating_ms)
+int rtw_IOL_exec_cmds_sync(ADAPTER *adapter, struct xmit_frame *xmit_frame,
+			   u32 max_wating_ms)
 {
 	return rtw_hal_iol_cmd(adapter, xmit_frame, max_wating_ms);
 }
 
-int rtw_IOL_exec_cmd_array_sync(PADAPTER adapter, u8 *IOL_cmds, u32 cmd_num, u32 max_wating_ms)
+int rtw_IOL_exec_cmd_array_sync(PADAPTER adapter, u8 *IOL_cmds, u32 cmd_num,
+				u32 max_wating_ms)
 {
 	struct xmit_frame	*xmit_frame;
 
-	if ((xmit_frame=rtw_IOL_accquire_xmit_frame(adapter)) == NULL)
+	xmit_frame = rtw_IOL_accquire_xmit_frame(adapter);
+	if (xmit_frame == NULL)
 		return _FAIL;
 
 	if (rtw_IOL_append_cmds(xmit_frame, IOL_cmds, cmd_num<<3) == _FAIL)
@@ -211,16 +221,8 @@ int rtw_IOL_exec_cmd_array_sync(PADAPTER
 int rtw_IOL_exec_empty_cmds_sync(ADAPTER *adapter, u32 max_wating_ms)
 {
 	IOL_CMD end_cmd = {0x0, IOL_CMD_END, 0x0, 0x0};
-	return rtw_IOL_exec_cmd_array_sync(adapter, (u8*)&end_cmd, 1, max_wating_ms);
-}
-
-bool rtw_IOL_applied(ADAPTER *adapter)
-{
-	if (adapter->registrypriv.force_iol)
-		return true;
-	if (!adapter_to_dvobj(adapter)->ishighspeed)
-		return true;
-	return false;
+	return rtw_IOL_exec_cmd_array_sync(adapter, (u8 *)&end_cmd, 1,
+					   max_wating_ms);
 }
 
 #endif /* CONFIG_IOL */
--- a/drivers/staging/rtl8192du/include/rtw_iol.h
+++ b/drivers/staging/rtl8192du/include/rtw_iol.h
@@ -74,6 +74,4 @@ int dbg_rtw_IOL_append_WD_cmd(struct xmi
 #define rtw_IOL_append_WD_cmd(xmit_frame, addr, value) _rtw_IOL_append_WD_cmd((xmit_frame), (addr), (value))
 #endif
 
-bool rtw_IOL_applied(struct rtw_adapter *adapter);
-
 #endif //__RTW_IOL_H_
