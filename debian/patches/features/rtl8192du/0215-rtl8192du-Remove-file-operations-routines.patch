From b4498065839e3793af1b2af0cd03acd39ba6de49 Mon Sep 17 00:00:00 2001
From: Larry Finger <Larry.Finger@lwfinger.net>
Date: Wed, 19 Feb 2014 21:36:03 -0600
Subject: [PATCH 215/390] rtl8192du: Remove file operations routines

Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
---
 include/osdep_service.h |   5 --
 os_dep/osdep_service.c  | 209 ------------------------------------------------
 2 files changed, 214 deletions(-)

--- a/drivers/staging/rtl8192du/include/osdep_service.h
+++ b/drivers/staging/rtl8192du/include/osdep_service.h
@@ -342,11 +342,6 @@ void rtw_suspend_lock_uninit(void);
 void rtw_lock_suspend(void);
 void rtw_unlock_suspend(void);
 
-/* File operation APIs, just for linux now */
-int rtw_is_file_readable(char *path);
-int rtw_retrive_from_file(char *path, u8 __user *buf, u32 sz);
-int rtw_store_to_file(char *path, u8 __user *buf, u32 sz);
-
 struct rtw_netdev_priv_indicator {
 	void *priv;
 	u32 sizeof_priv;
--- a/drivers/staging/rtl8192du/os_dep/osdep_service.c
+++ b/drivers/staging/rtl8192du/os_dep/osdep_service.c
@@ -281,215 +281,6 @@ inline void rtw_unlock_suspend(void)
 	#endif
 }
 
-/* Open a file with the specific @param path, @param flag, @param mode
- * @param fpp the pointer of struct file pointer to get struct file pointer
- *   while file opening is success
- * @param path the path of the file to open
- * @param flag file operation flags, please refer to linux document
- * @param mode please refer to linux document
- * @return Linux specific error code
- */
-static int openFile(struct file **fpp, char *path, int flag, int mode)
-{
-	struct file *fp;
-
-	fp=filp_open(path, flag, mode);
-	if (IS_ERR(fp)) {
-		*fpp=NULL;
-		return PTR_ERR(fp);
-	}
-	else {
-		*fpp=fp;
-		return 0;
-	}
-}
-
-/*
-* Close the file with the specific @param fp
-* @param fp the pointer of struct file to close
-* @return always 0
-*/
-static int closeFile(struct file *fp)
-{
-	filp_close(fp,NULL);
-	return 0;
-}
-
-static int readFile(struct file *fp,char __user *buf,int len)
-{
-	int rlen=0, sum=0;
-
-	if (!fp->f_op || !fp->f_op->read)
-		return -EPERM;
-
-	while (sum<len) {
-		rlen=fp->f_op->read(fp,buf+sum,len-sum, &fp->f_pos);
-		if (rlen>0)
-			sum+=rlen;
-		else if (0 != rlen)
-			return rlen;
-		else
-			break;
-	}
-
-	return  sum;
-}
-
-static int writeFile(struct file *fp,char __user *buf,int len)
-{
-	int wlen=0, sum=0;
-
-	if (!fp->f_op || !fp->f_op->write)
-		return -EPERM;
-
-	while (sum<len) {
-		wlen=fp->f_op->write(fp, buf+sum, len-sum, &fp->f_pos);
-		if (wlen>0)
-			sum+=wlen;
-		else if (0 != wlen)
-			return wlen;
-		else
-			break;
-	}
-
-	return sum;
-}
-
-/*
-* Test if the specifi @param path is a file and readable
-* @param path the path of the file to test
-* @return Linux specific error code
-*/
-static int isFileReadable(char *path)
-{
-	struct file *fp;
-	int ret = 0;
-	mm_segment_t oldfs;
-	char __user buf;
-
-	fp=filp_open(path, O_RDONLY, 0);
-	if (IS_ERR(fp)) {
-		ret = PTR_ERR(fp);
-	}
-	else {
-		oldfs = get_fs(); set_fs(get_ds());
-
-		if (1!=readFile(fp, &buf, 1))
-			ret = PTR_ERR(fp);
-
-		set_fs(oldfs);
-		filp_close(fp,NULL);
-	}
-	return ret;
-}
-
-/*
-* Open the file with @param path and retrive the file content into memory starting from @param buf for @param sz at most
-* @param path the path of the file to open and read
-* @param buf the starting address of the buffer to store file content
-* @param sz how many bytes to read at most
-* @return the byte we've read, or Linux specific error code
-*/
-static int retriveFromFile(char *path, u8 __user *buf, u32 sz)
-{
-	int ret =-1;
-	mm_segment_t oldfs;
-	struct file *fp;
-
-	if (path && buf) {
-		if (0 == (ret=openFile(&fp,path, O_RDONLY, 0))) {
-			DBG_8192D("%s openFile path:%s fp=%p\n",__func__, path ,fp);
-
-			oldfs = get_fs(); set_fs(get_ds());
-			ret=readFile(fp, buf, sz);
-			set_fs(oldfs);
-			closeFile(fp);
-
-			DBG_8192D("%s readFile, ret:%d\n",__func__, ret);
-
-		} else {
-			DBG_8192D("%s openFile path:%s Fail, ret:%d\n",__func__, path, ret);
-		}
-	} else {
-		DBG_8192D("%s NULL pointer\n",__func__);
-		ret =  -EINVAL;
-	}
-	return ret;
-}
-
-/*
-* Open the file with @param path and wirte @param sz byte of data starting from @param buf into the file
-* @param path the path of the file to open and write
-* @param buf the starting address of the data to write into file
-* @param sz how many bytes to write at most
-* @return the byte we've written, or Linux specific error code
-*/
-static int storeToFile(char *path, u8 __user *buf, u32 sz)
-{
-	int ret =0;
-	mm_segment_t oldfs;
-	struct file *fp;
-
-	if (path && buf) {
-		if (0 == (ret=openFile(&fp, path, O_CREAT|O_WRONLY, 0666))) {
-			DBG_8192D("%s openFile path:%s fp=%p\n",__func__, path ,fp);
-
-			oldfs = get_fs(); set_fs(get_ds());
-			ret=writeFile(fp, buf, sz);
-			set_fs(oldfs);
-			closeFile(fp);
-
-			DBG_8192D("%s writeFile, ret:%d\n",__func__, ret);
-
-		} else {
-			DBG_8192D("%s openFile path:%s Fail, ret:%d\n",__func__, path, ret);
-		}
-	} else {
-		DBG_8192D("%s NULL pointer\n",__func__);
-		ret =  -EINVAL;
-	}
-	return ret;
-}
-
-/*
-* Test if the specifi @param path is a file and readable
-* @param path the path of the file to test
-* @return true or false
-*/
-int rtw_is_file_readable(char *path)
-{
-	if (isFileReadable(path) == 0)
-		return true;
-	else
-		return false;
-}
-
-/*
-* Open the file with @param path and retrive the file content into memory starting from @param buf for @param sz at most
-* @param path the path of the file to open and read
-* @param buf the starting address of the buffer to store file content
-* @param sz how many bytes to read at most
-* @return the byte we've read
-*/
-int rtw_retrive_from_file(char *path, u8 __user *buf, u32 sz)
-{
-	int ret =retriveFromFile(path, buf, sz);
-	return ret>=0?ret:0;
-}
-
-/*
-* Open the file with @param path and wirte @param sz byte of data starting from @param buf into the file
-* @param path the path of the file to open and write
-* @param buf the starting address of the data to write into file
-* @param sz how many bytes to write at most
-* @return the byte we've written
-*/
-int rtw_store_to_file(char *path, u8 __user *buf, u32 sz)
-{
-	int ret =storeToFile(path, buf, sz);
-	return ret>=0?ret:0;
-}
-
 struct net_device *rtw_alloc_etherdev_with_old_priv(int sizeof_priv, void *old_priv)
 {
 	struct net_device *pnetdev;
