From d1afdc0128c5e70da8848a725ea59fa16fd1aadc Mon Sep 17 00:00:00 2001
From: Larry Finger <Larry.Finger@lwfinger.net>
Date: Wed, 17 Apr 2013 20:49:16 -0500
Subject: [PATCH 033/390] Cleanup hal/hal_com.c

Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
---
 hal/hal_com.c        | 489 +++++++++++++++++++++++++++------------------------
 hal/rtl8192du_xmit.c |   6 +-
 hal/usb_halinit.c    |   4 +-
 include/hal_com.h    |  53 +++---
 4 files changed, 287 insertions(+), 265 deletions(-)

--- a/drivers/staging/rtl8192du/hal/hal_com.c
+++ b/drivers/staging/rtl8192du/hal/hal_com.c
@@ -27,264 +27,292 @@
 
 #define _HAL_COM_C_
 
-//============================================================
-// Global var
-//============================================================
+/*  */
+/*  Global var */
+/*  */
 u32 OFDMSwingTable[OFDM_TABLE_SIZE_92D] = {
-	0x7f8001fe, // 0, +6.0dB
-	0x788001e2, // 1, +5.5dB
-	0x71c001c7, // 2, +5.0dB
-	0x6b8001ae, // 3, +4.5dB
-	0x65400195, // 4, +4.0dB
-	0x5fc0017f, // 5, +3.5dB
-	0x5a400169, // 6, +3.0dB
-	0x55400155, // 7, +2.5dB
-	0x50800142, // 8, +2.0dB
-	0x4c000130, // 9, +1.5dB
-	0x47c0011f, // 10, +1.0dB
-	0x43c0010f, // 11, +0.5dB
-	0x40000100, // 12, +0dB
-	0x3c8000f2, // 13, -0.5dB
-	0x390000e4, // 14, -1.0dB
-	0x35c000d7, // 15, -1.5dB
-	0x32c000cb, // 16, -2.0dB
-	0x300000c0, // 17, -2.5dB
-	0x2d4000b5, // 18, -3.0dB
-	0x2ac000ab, // 19, -3.5dB
-	0x288000a2, // 20, -4.0dB
-	0x26000098, // 21, -4.5dB
-	0x24000090, // 22, -5.0dB
-	0x22000088, // 23, -5.5dB
-	0x20000080, // 24, -6.0dB
-	0x1e400079, // 25, -6.5dB
-	0x1c800072, // 26, -7.0dB
-	0x1b00006c, // 27. -7.5dB
-	0x19800066, // 28, -8.0dB
-	0x18000060, // 29, -8.5dB
-	0x16c0005b, // 30, -9.0dB
-	0x15800056, // 31, -9.5dB
-	0x14400051, // 32, -10.0dB
-	0x1300004c, // 33, -10.5dB
-	0x12000048, // 34, -11.0dB
-	0x11000044, // 35, -11.5dB
-	0x10000040, // 36, -12.0dB
-	0x0f00003c,// 37, -12.5dB
-	0x0e400039,// 38, -13.0dB
-	0x0d800036,// 39, -13.5dB
-	0x0cc00033,// 40, -14.0dB
-	0x0c000030,// 41, -14.5dB
-	0x0b40002d,// 42, -15.0dB
+	0x7f8001fe, /*  0, +6.0dB */
+	0x788001e2, /*  1, +5.5dB */
+	0x71c001c7, /*  2, +5.0dB */
+	0x6b8001ae, /*  3, +4.5dB */
+	0x65400195, /*  4, +4.0dB */
+	0x5fc0017f, /*  5, +3.5dB */
+	0x5a400169, /*  6, +3.0dB */
+	0x55400155, /*  7, +2.5dB */
+	0x50800142, /*  8, +2.0dB */
+	0x4c000130, /*  9, +1.5dB */
+	0x47c0011f, /*  10, +1.0dB */
+	0x43c0010f, /*  11, +0.5dB */
+	0x40000100, /*  12, +0dB */
+	0x3c8000f2, /*  13, -0.5dB */
+	0x390000e4, /*  14, -1.0dB */
+	0x35c000d7, /*  15, -1.5dB */
+	0x32c000cb, /*  16, -2.0dB */
+	0x300000c0, /*  17, -2.5dB */
+	0x2d4000b5, /*  18, -3.0dB */
+	0x2ac000ab, /*  19, -3.5dB */
+	0x288000a2, /*  20, -4.0dB */
+	0x26000098, /*  21, -4.5dB */
+	0x24000090, /*  22, -5.0dB */
+	0x22000088, /*  23, -5.5dB */
+	0x20000080, /*  24, -6.0dB */
+	0x1e400079, /*  25, -6.5dB */
+	0x1c800072, /*  26, -7.0dB */
+	0x1b00006c, /*  27. -7.5dB */
+	0x19800066, /*  28, -8.0dB */
+	0x18000060, /*  29, -8.5dB */
+	0x16c0005b, /*  30, -9.0dB */
+	0x15800056, /*  31, -9.5dB */
+	0x14400051, /*  32, -10.0dB */
+	0x1300004c, /*  33, -10.5dB */
+	0x12000048, /*  34, -11.0dB */
+	0x11000044, /*  35, -11.5dB */
+	0x10000040, /*  36, -12.0dB */
+	0x0f00003c,/*  37, -12.5dB */
+	0x0e400039,/*  38, -13.0dB */
+	0x0d800036,/*  39, -13.5dB */
+	0x0cc00033,/*  40, -14.0dB */
+	0x0c000030,/*  41, -14.5dB */
+	0x0b40002d,/*  42, -15.0dB */
 };
 
 
 u8 CCKSwingTable_Ch1_Ch13[CCK_TABLE_SIZE][8] = {
-	{0x36, 0x35, 0x2e, 0x25, 0x1c, 0x12, 0x09, 0x04},	// 0, +0dB
-	{0x33, 0x32, 0x2b, 0x23, 0x1a, 0x11, 0x08, 0x04},	// 1, -0.5dB
-	{0x30, 0x2f, 0x29, 0x21, 0x19, 0x10, 0x08, 0x03},	// 2, -1.0dB
-	{0x2d, 0x2d, 0x27, 0x1f, 0x18, 0x0f, 0x08, 0x03},	// 3, -1.5dB
-	{0x2b, 0x2a, 0x25, 0x1e, 0x16, 0x0e, 0x07, 0x03},	// 4, -2.0dB
-	{0x28, 0x28, 0x22, 0x1c, 0x15, 0x0d, 0x07, 0x03},	// 5, -2.5dB
-	{0x26, 0x25, 0x21, 0x1b, 0x14, 0x0d, 0x06, 0x03},	// 6, -3.0dB
-	{0x24, 0x23, 0x1f, 0x19, 0x13, 0x0c, 0x06, 0x03},	// 7, -3.5dB
-	{0x22, 0x21, 0x1d, 0x18, 0x11, 0x0b, 0x06, 0x02},	// 8, -4.0dB
-	{0x20, 0x20, 0x1b, 0x16, 0x11, 0x08, 0x05, 0x02},	// 9, -4.5dB
-	{0x1f, 0x1e, 0x1a, 0x15, 0x10, 0x0a, 0x05, 0x02},	// 10, -5.0dB
-	{0x1d, 0x1c, 0x18, 0x14, 0x0f, 0x0a, 0x05, 0x02},	// 11, -5.5dB
-	{0x1b, 0x1a, 0x17, 0x13, 0x0e, 0x09, 0x04, 0x02},	// 12, -6.0dB
-	{0x1a, 0x19, 0x16, 0x12, 0x0d, 0x09, 0x04, 0x02},	// 13, -6.5dB
-	{0x18, 0x17, 0x15, 0x11, 0x0c, 0x08, 0x04, 0x02},	// 14, -7.0dB
-	{0x17, 0x16, 0x13, 0x10, 0x0c, 0x08, 0x04, 0x02},	// 15, -7.5dB
-	{0x16, 0x15, 0x12, 0x0f, 0x0b, 0x07, 0x04, 0x01},	// 16, -8.0dB
-	{0x14, 0x14, 0x11, 0x0e, 0x0b, 0x07, 0x03, 0x02},	// 17, -8.5dB
-	{0x13, 0x13, 0x10, 0x0d, 0x0a, 0x06, 0x03, 0x01},	// 18, -9.0dB
-	{0x12, 0x12, 0x0f, 0x0c, 0x09, 0x06, 0x03, 0x01},	// 19, -9.5dB
-	{0x11, 0x11, 0x0f, 0x0c, 0x09, 0x06, 0x03, 0x01},	// 20, -10.0dB
-	{0x10, 0x10, 0x0e, 0x0b, 0x08, 0x05, 0x03, 0x01},	// 21, -10.5dB
-	{0x0f, 0x0f, 0x0d, 0x0b, 0x08, 0x05, 0x03, 0x01},	// 22, -11.0dB
-	{0x0e, 0x0e, 0x0c, 0x0a, 0x08, 0x05, 0x02, 0x01},	// 23, -11.5dB
-	{0x0d, 0x0d, 0x0c, 0x0a, 0x07, 0x05, 0x02, 0x01},	// 24, -12.0dB
-	{0x0d, 0x0c, 0x0b, 0x09, 0x07, 0x04, 0x02, 0x01},	// 25, -12.5dB
-	{0x0c, 0x0c, 0x0a, 0x09, 0x06, 0x04, 0x02, 0x01},	// 26, -13.0dB
-	{0x0b, 0x0b, 0x0a, 0x08, 0x06, 0x04, 0x02, 0x01},	// 27, -13.5dB
-	{0x0b, 0x0a, 0x09, 0x08, 0x06, 0x04, 0x02, 0x01},	// 28, -14.0dB
-	{0x0a, 0x0a, 0x09, 0x07, 0x05, 0x03, 0x02, 0x01},	// 29, -14.5dB
-	{0x0a, 0x09, 0x08, 0x07, 0x05, 0x03, 0x02, 0x01},	// 30, -15.0dB
-	{0x09, 0x09, 0x08, 0x06, 0x05, 0x03, 0x01, 0x01},	// 31, -15.5dB
-	{0x09, 0x08, 0x07, 0x06, 0x04, 0x03, 0x01, 0x01}	// 32, -16.0dB
+	{0x36, 0x35, 0x2e, 0x25, 0x1c, 0x12, 0x09, 0x04},/*  0, +0dB */
+	{0x33, 0x32, 0x2b, 0x23, 0x1a, 0x11, 0x08, 0x04},/*  1, -0.5dB */
+	{0x30, 0x2f, 0x29, 0x21, 0x19, 0x10, 0x08, 0x03},/*  2, -1.0dB */
+	{0x2d, 0x2d, 0x27, 0x1f, 0x18, 0x0f, 0x08, 0x03},/*  3, -1.5dB */
+	{0x2b, 0x2a, 0x25, 0x1e, 0x16, 0x0e, 0x07, 0x03},/*  4, -2.0dB */
+	{0x28, 0x28, 0x22, 0x1c, 0x15, 0x0d, 0x07, 0x03},/*  5, -2.5dB */
+	{0x26, 0x25, 0x21, 0x1b, 0x14, 0x0d, 0x06, 0x03},/*  6, -3.0dB */
+	{0x24, 0x23, 0x1f, 0x19, 0x13, 0x0c, 0x06, 0x03},/*  7, -3.5dB */
+	{0x22, 0x21, 0x1d, 0x18, 0x11, 0x0b, 0x06, 0x02},/*  8, -4.0dB */
+	{0x20, 0x20, 0x1b, 0x16, 0x11, 0x08, 0x05, 0x02},/*  9, -4.5dB */
+	{0x1f, 0x1e, 0x1a, 0x15, 0x10, 0x0a, 0x05, 0x02},/*  10, -5.0dB */
+	{0x1d, 0x1c, 0x18, 0x14, 0x0f, 0x0a, 0x05, 0x02},/*  11, -5.5dB */
+	{0x1b, 0x1a, 0x17, 0x13, 0x0e, 0x09, 0x04, 0x02},/*  12, -6.0dB */
+	{0x1a, 0x19, 0x16, 0x12, 0x0d, 0x09, 0x04, 0x02},/*  13, -6.5dB */
+	{0x18, 0x17, 0x15, 0x11, 0x0c, 0x08, 0x04, 0x02},/*  14, -7.0dB */
+	{0x17, 0x16, 0x13, 0x10, 0x0c, 0x08, 0x04, 0x02},/*  15, -7.5dB */
+	{0x16, 0x15, 0x12, 0x0f, 0x0b, 0x07, 0x04, 0x01},/*  16, -8.0dB */
+	{0x14, 0x14, 0x11, 0x0e, 0x0b, 0x07, 0x03, 0x02},/*  17, -8.5dB */
+	{0x13, 0x13, 0x10, 0x0d, 0x0a, 0x06, 0x03, 0x01},/*  18, -9.0dB */
+	{0x12, 0x12, 0x0f, 0x0c, 0x09, 0x06, 0x03, 0x01},/*  19, -9.5dB */
+	{0x11, 0x11, 0x0f, 0x0c, 0x09, 0x06, 0x03, 0x01},/*  20, -10.0dB */
+	{0x10, 0x10, 0x0e, 0x0b, 0x08, 0x05, 0x03, 0x01},/*  21, -10.5dB */
+	{0x0f, 0x0f, 0x0d, 0x0b, 0x08, 0x05, 0x03, 0x01},/*  22, -11.0dB */
+	{0x0e, 0x0e, 0x0c, 0x0a, 0x08, 0x05, 0x02, 0x01},/*  23, -11.5dB */
+	{0x0d, 0x0d, 0x0c, 0x0a, 0x07, 0x05, 0x02, 0x01},/*  24, -12.0dB */
+	{0x0d, 0x0c, 0x0b, 0x09, 0x07, 0x04, 0x02, 0x01},/*  25, -12.5dB */
+	{0x0c, 0x0c, 0x0a, 0x09, 0x06, 0x04, 0x02, 0x01},/*  26, -13.0dB */
+	{0x0b, 0x0b, 0x0a, 0x08, 0x06, 0x04, 0x02, 0x01},/*  27, -13.5dB */
+	{0x0b, 0x0a, 0x09, 0x08, 0x06, 0x04, 0x02, 0x01},/*  28, -14.0dB */
+	{0x0a, 0x0a, 0x09, 0x07, 0x05, 0x03, 0x02, 0x01},/*  29, -14.5dB */
+	{0x0a, 0x09, 0x08, 0x07, 0x05, 0x03, 0x02, 0x01},/*  30, -15.0dB */
+	{0x09, 0x09, 0x08, 0x06, 0x05, 0x03, 0x01, 0x01},/*  31, -15.5dB */
+	{0x09, 0x08, 0x07, 0x06, 0x04, 0x03, 0x01, 0x01} /*  32, -16.0dB */
 };
 
 
-u8 CCKSwingTable_Ch14 [CCK_TABLE_SIZE][8]= {
-	{0x36, 0x35, 0x2e, 0x1b, 0x00, 0x00, 0x00, 0x00},	// 0, +0dB
-	{0x33, 0x32, 0x2b, 0x19, 0x00, 0x00, 0x00, 0x00},	// 1, -0.5dB
-	{0x30, 0x2f, 0x29, 0x18, 0x00, 0x00, 0x00, 0x00},	// 2, -1.0dB
-	{0x2d, 0x2d, 0x17, 0x17, 0x00, 0x00, 0x00, 0x00},	// 3, -1.5dB
-	{0x2b, 0x2a, 0x25, 0x15, 0x00, 0x00, 0x00, 0x00},	// 4, -2.0dB
-	{0x28, 0x28, 0x24, 0x14, 0x00, 0x00, 0x00, 0x00},	// 5, -2.5dB
-	{0x26, 0x25, 0x21, 0x13, 0x00, 0x00, 0x00, 0x00},	// 6, -3.0dB
-	{0x24, 0x23, 0x1f, 0x12, 0x00, 0x00, 0x00, 0x00},	// 7, -3.5dB
-	{0x22, 0x21, 0x1d, 0x11, 0x00, 0x00, 0x00, 0x00},	// 8, -4.0dB
-	{0x20, 0x20, 0x1b, 0x10, 0x00, 0x00, 0x00, 0x00},	// 9, -4.5dB
-	{0x1f, 0x1e, 0x1a, 0x0f, 0x00, 0x00, 0x00, 0x00},	// 10, -5.0dB
-	{0x1d, 0x1c, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00},	// 11, -5.5dB
-	{0x1b, 0x1a, 0x17, 0x0e, 0x00, 0x00, 0x00, 0x00},	// 12, -6.0dB
-	{0x1a, 0x19, 0x16, 0x0d, 0x00, 0x00, 0x00, 0x00},	// 13, -6.5dB
-	{0x18, 0x17, 0x15, 0x0c, 0x00, 0x00, 0x00, 0x00},	// 14, -7.0dB
-	{0x17, 0x16, 0x13, 0x0b, 0x00, 0x00, 0x00, 0x00},	// 15, -7.5dB
-	{0x16, 0x15, 0x12, 0x0b, 0x00, 0x00, 0x00, 0x00},	// 16, -8.0dB
-	{0x14, 0x14, 0x11, 0x0a, 0x00, 0x00, 0x00, 0x00},	// 17, -8.5dB
-	{0x13, 0x13, 0x10, 0x0a, 0x00, 0x00, 0x00, 0x00},	// 18, -9.0dB
-	{0x12, 0x12, 0x0f, 0x09, 0x00, 0x00, 0x00, 0x00},	// 19, -9.5dB
-	{0x11, 0x11, 0x0f, 0x09, 0x00, 0x00, 0x00, 0x00},	// 20, -10.0dB
-	{0x10, 0x10, 0x0e, 0x08, 0x00, 0x00, 0x00, 0x00},	// 21, -10.5dB
-	{0x0f, 0x0f, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00},	// 22, -11.0dB
-	{0x0e, 0x0e, 0x0c, 0x07, 0x00, 0x00, 0x00, 0x00},	// 23, -11.5dB
-	{0x0d, 0x0d, 0x0c, 0x07, 0x00, 0x00, 0x00, 0x00},	// 24, -12.0dB
-	{0x0d, 0x0c, 0x0b, 0x06, 0x00, 0x00, 0x00, 0x00},	// 25, -12.5dB
-	{0x0c, 0x0c, 0x0a, 0x06, 0x00, 0x00, 0x00, 0x00},	// 26, -13.0dB
-	{0x0b, 0x0b, 0x0a, 0x06, 0x00, 0x00, 0x00, 0x00},	// 27, -13.5dB
-	{0x0b, 0x0a, 0x09, 0x05, 0x00, 0x00, 0x00, 0x00},	// 28, -14.0dB
-	{0x0a, 0x0a, 0x09, 0x05, 0x00, 0x00, 0x00, 0x00},	// 29, -14.5dB
-	{0x0a, 0x09, 0x08, 0x05, 0x00, 0x00, 0x00, 0x00},	// 30, -15.0dB
-	{0x09, 0x09, 0x08, 0x05, 0x00, 0x00, 0x00, 0x00},	// 31, -15.5dB
-	{0x09, 0x08, 0x07, 0x04, 0x00, 0x00, 0x00, 0x00}	// 32, -16.0dB
+u8 CCKSwingTable_Ch14[CCK_TABLE_SIZE][8] = {
+	{0x36, 0x35, 0x2e, 0x1b, 0x00, 0x00, 0x00, 0x00},/*  0, +0dB */
+	{0x33, 0x32, 0x2b, 0x19, 0x00, 0x00, 0x00, 0x00},/*  1, -0.5dB */
+	{0x30, 0x2f, 0x29, 0x18, 0x00, 0x00, 0x00, 0x00},/*  2, -1.0dB */
+	{0x2d, 0x2d, 0x17, 0x17, 0x00, 0x00, 0x00, 0x00},/*  3, -1.5dB */
+	{0x2b, 0x2a, 0x25, 0x15, 0x00, 0x00, 0x00, 0x00},/*  4, -2.0dB */
+	{0x28, 0x28, 0x24, 0x14, 0x00, 0x00, 0x00, 0x00},/*  5, -2.5dB */
+	{0x26, 0x25, 0x21, 0x13, 0x00, 0x00, 0x00, 0x00},/*  6, -3.0dB */
+	{0x24, 0x23, 0x1f, 0x12, 0x00, 0x00, 0x00, 0x00},/*  7, -3.5dB */
+	{0x22, 0x21, 0x1d, 0x11, 0x00, 0x00, 0x00, 0x00},/*  8, -4.0dB */
+	{0x20, 0x20, 0x1b, 0x10, 0x00, 0x00, 0x00, 0x00},/*  9, -4.5dB */
+	{0x1f, 0x1e, 0x1a, 0x0f, 0x00, 0x00, 0x00, 0x00},/*  10, -5.0dB */
+	{0x1d, 0x1c, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00},/*  11, -5.5dB */
+	{0x1b, 0x1a, 0x17, 0x0e, 0x00, 0x00, 0x00, 0x00},/*  12, -6.0dB */
+	{0x1a, 0x19, 0x16, 0x0d, 0x00, 0x00, 0x00, 0x00},/*  13, -6.5dB */
+	{0x18, 0x17, 0x15, 0x0c, 0x00, 0x00, 0x00, 0x00},/*  14, -7.0dB */
+	{0x17, 0x16, 0x13, 0x0b, 0x00, 0x00, 0x00, 0x00},/*  15, -7.5dB */
+	{0x16, 0x15, 0x12, 0x0b, 0x00, 0x00, 0x00, 0x00},/*  16, -8.0dB */
+	{0x14, 0x14, 0x11, 0x0a, 0x00, 0x00, 0x00, 0x00},/*  17, -8.5dB */
+	{0x13, 0x13, 0x10, 0x0a, 0x00, 0x00, 0x00, 0x00},/*  18, -9.0dB */
+	{0x12, 0x12, 0x0f, 0x09, 0x00, 0x00, 0x00, 0x00},/*  19, -9.5dB */
+	{0x11, 0x11, 0x0f, 0x09, 0x00, 0x00, 0x00, 0x00},/*  20, -10.0dB */
+	{0x10, 0x10, 0x0e, 0x08, 0x00, 0x00, 0x00, 0x00},/*  21, -10.5dB */
+	{0x0f, 0x0f, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00},/*  22, -11.0dB */
+	{0x0e, 0x0e, 0x0c, 0x07, 0x00, 0x00, 0x00, 0x00},/*  23, -11.5dB */
+	{0x0d, 0x0d, 0x0c, 0x07, 0x00, 0x00, 0x00, 0x00},/*  24, -12.0dB */
+	{0x0d, 0x0c, 0x0b, 0x06, 0x00, 0x00, 0x00, 0x00},/*  25, -12.5dB */
+	{0x0c, 0x0c, 0x0a, 0x06, 0x00, 0x00, 0x00, 0x00},/*  26, -13.0dB */
+	{0x0b, 0x0b, 0x0a, 0x06, 0x00, 0x00, 0x00, 0x00},/*  27, -13.5dB */
+	{0x0b, 0x0a, 0x09, 0x05, 0x00, 0x00, 0x00, 0x00},/*  28, -14.0dB */
+	{0x0a, 0x0a, 0x09, 0x05, 0x00, 0x00, 0x00, 0x00},/*  29, -14.5dB */
+	{0x0a, 0x09, 0x08, 0x05, 0x00, 0x00, 0x00, 0x00},/*  30, -15.0dB */
+	{0x09, 0x09, 0x08, 0x05, 0x00, 0x00, 0x00, 0x00},/*  31, -15.5dB */
+	{0x09, 0x08, 0x07, 0x04, 0x00, 0x00, 0x00, 0x00} /*  32, -16.0dB */
 };
 
 
 #ifdef CONFIG_CHIP_VER_INTEGRATION
-void dump_chip_info(HAL_VERSION	ChipVersion)
+void dump_chip_info(HAL_VERSION	chip_ver)
 {
-	if(IS_81XXC(ChipVersion)){
-		DBG_871X("Chip Version Info: %s_",IS_92C_SERIAL(ChipVersion)?"CHIP_8192C":"CHIP_8188C");
-	}
-	else if(IS_92D(ChipVersion)){
+	if (IS_92D(chip_ver))
 		DBG_871X("Chip Version Info: CHIP_8192D_");
-	}
-	else if(IS_8723_SERIES(ChipVersion)){
-		DBG_871X("Chip Version Info: CHIP_8723A_");
-	}
-	else if(IS_8188E(ChipVersion)){
-		DBG_871X("Chip Version Info: CHIP_8188E_");
-	}
 
-	DBG_871X("%s_",IS_NORMAL_CHIP(ChipVersion)?"Normal_Chip":"Test_Chip");
-	DBG_871X("%s_",IS_CHIP_VENDOR_TSMC(ChipVersion)?"TSMC":"UMC");
-	if(IS_A_CUT(ChipVersion)) DBG_871X("A_CUT_");
-	else if(IS_B_CUT(ChipVersion)) DBG_871X("B_CUT_");
-	else if(IS_C_CUT(ChipVersion)) DBG_871X("C_CUT_");
-	else if(IS_D_CUT(ChipVersion)) DBG_871X("D_CUT_");
-	else if(IS_E_CUT(ChipVersion)) DBG_871X("E_CUT_");
-	else DBG_871X("UNKNOWN_CUT(%d)_",ChipVersion.CUTVersion);
-
-	if(IS_1T1R(ChipVersion))	DBG_871X("1T1R_");
-	else if(IS_1T2R(ChipVersion))	DBG_871X("1T2R_");
-	else if(IS_2T2R(ChipVersion))	DBG_871X("2T2R_");
-	else DBG_871X("UNKNOWN_RFTYPE(%d)_",ChipVersion.RFType);
+	DBG_871X("%s_", IS_NORMAL_CHIP(chip_ver) ? "Normal_Chip" :
+		 "Test_Chip");
+	DBG_871X("%s_", IS_CHIP_VENDOR_TSMC(chip_ver) ? "TSMC" : "UMC");
+	if (IS_A_CUT(chip_ver))
+		DBG_871X("A_CUT_");
+	else if (IS_B_CUT(chip_ver))
+		DBG_871X("B_CUT_");
+	else if (IS_C_CUT(chip_ver))
+		DBG_871X("C_CUT_");
+	else if (IS_D_CUT(chip_ver))
+		DBG_871X("D_CUT_");
+	else if (IS_E_CUT(chip_ver))
+		DBG_871X("E_CUT_");
+	else
+		DBG_871X("UNKNOWN_CUT(%d)_", chip_ver.CUTVersion);
 
+	if (IS_1T1R(chip_ver))
+		DBG_871X("1T1R_");
+	else if (IS_1T2R(chip_ver))
+		DBG_871X("1T2R_");
+	else if (IS_2T2R(chip_ver))
+		DBG_871X("2T2R_");
+	else
+		DBG_871X("UNKNOWN_RFTYPE(%d)_", chip_ver.RFType);
 
-	DBG_871X("RomVer(%d)\n",ChipVersion.ROMVer);
+	DBG_871X("RomVer(%d)\n", chip_ver.ROMVer);
 }
-
 #endif
 
 #define	EEPROM_CHANNEL_PLAN_BY_HW_MASK	0x80
 
-u8	//return the final channel plan decision
+u8	/* return the final channel plan decision */
 hal_com_get_channel_plan(
-	IN	PADAPTER	padapter,
-	IN	u8			hw_channel_plan,	//channel plan from HW (efuse/eeprom)
-	IN	u8			sw_channel_plan,	//channel plan from SW (registry/module param)
-	IN	u8			def_channel_plan,	//channel plan used when the former two is invalid
-	IN	BOOLEAN		AutoLoadFail
+	PADAPTER	padapter,
+	u8 hw_channel_plan, /* from HW (efuse/eeprom) */
+	u8 sw_channel_plan, /* from SW (registry/module param) */
+	u8 def_channel_plan, /* used when the former two are invalid */
+	BOOLEAN		autoloadfail
 	)
 {
-	u8 swConfig;
-	u8 chnlPlan;
+	u8 swconfig;
+	u8 chnlplan;
 
-	swConfig = _TRUE;
-	if (!AutoLoadFail)
-	{
+	swconfig = _TRUE;
+	if (!autoloadfail) {
 		if (!rtw_is_channel_plan_valid(sw_channel_plan))
-			swConfig = _FALSE;
+			swconfig = _FALSE;
 		if (hw_channel_plan & EEPROM_CHANNEL_PLAN_BY_HW_MASK)
-			swConfig = _FALSE;
+			swconfig = _FALSE;
 	}
 
-	if (swConfig == _TRUE)
-		chnlPlan = sw_channel_plan;
+	if (swconfig == _TRUE)
+		chnlplan = sw_channel_plan;
 	else
-		chnlPlan = hw_channel_plan & (~EEPROM_CHANNEL_PLAN_BY_HW_MASK);
+		chnlplan = hw_channel_plan & (~EEPROM_CHANNEL_PLAN_BY_HW_MASK);
 
-	if (!rtw_is_channel_plan_valid(chnlPlan))
-		chnlPlan = def_channel_plan;
+	if (!rtw_is_channel_plan_valid(chnlplan))
+		chnlplan = def_channel_plan;
 
-	return chnlPlan;
+	return chnlplan;
 }
 
-u8	MRateToHwRate(u8 rate)
+u8	ratetohwrate(u8 rate)
 {
 	u8	ret = DESC_RATE1M;
 
-	switch(rate)
-	{
-		// CCK and OFDM non-HT rates
-	case IEEE80211_CCK_RATE_1MB:	ret = DESC_RATE1M;	break;
-	case IEEE80211_CCK_RATE_2MB:	ret = DESC_RATE2M;	break;
-	case IEEE80211_CCK_RATE_5MB:	ret = DESC_RATE5_5M;	break;
-	case IEEE80211_CCK_RATE_11MB:	ret = DESC_RATE11M;	break;
-	case IEEE80211_OFDM_RATE_6MB:	ret = DESC_RATE6M;	break;
-	case IEEE80211_OFDM_RATE_9MB:	ret = DESC_RATE9M;	break;
-	case IEEE80211_OFDM_RATE_12MB:	ret = DESC_RATE12M;	break;
-	case IEEE80211_OFDM_RATE_18MB:	ret = DESC_RATE18M;	break;
-	case IEEE80211_OFDM_RATE_24MB:	ret = DESC_RATE24M;	break;
-	case IEEE80211_OFDM_RATE_36MB:	ret = DESC_RATE36M;	break;
-	case IEEE80211_OFDM_RATE_48MB:	ret = DESC_RATE48M;	break;
-	case IEEE80211_OFDM_RATE_54MB:	ret = DESC_RATE54M;	break;
-
-		// HT rates since here
-	//case MGN_MCS0:		ret = DESC_RATEMCS0;	break;
-	//case MGN_MCS1:		ret = DESC_RATEMCS1;	break;
-	//case MGN_MCS2:		ret = DESC_RATEMCS2;	break;
-	//case MGN_MCS3:		ret = DESC_RATEMCS3;	break;
-	//case MGN_MCS4:		ret = DESC_RATEMCS4;	break;
-	//case MGN_MCS5:		ret = DESC_RATEMCS5;	break;
-	//case MGN_MCS6:		ret = DESC_RATEMCS6;	break;
-	//case MGN_MCS7:		ret = DESC_RATEMCS7;	break;
-
-	default:		break;
+	switch (rate) {
+		/*  CCK and OFDM non-HT rates */
+	case IEEE80211_CCK_RATE_1MB:
+		ret = DESC_RATE1M;
+		break;
+	case IEEE80211_CCK_RATE_2MB:
+		ret = DESC_RATE2M;
+		break;
+	case IEEE80211_CCK_RATE_5MB:
+		ret = DESC_RATE5_5M;
+		break;
+	case IEEE80211_CCK_RATE_11MB:
+		ret = DESC_RATE11M;
+		break;
+	case IEEE80211_OFDM_RATE_6MB:
+		ret = DESC_RATE6M;
+		break;
+	case IEEE80211_OFDM_RATE_9MB:
+		ret = DESC_RATE9M;
+		break;
+	case IEEE80211_OFDM_RATE_12MB:
+		ret = DESC_RATE12M;
+		break;
+	case IEEE80211_OFDM_RATE_18MB:
+		ret = DESC_RATE18M;
+		break;
+	case IEEE80211_OFDM_RATE_24MB:
+		ret = DESC_RATE24M;
+		break;
+	case IEEE80211_OFDM_RATE_36MB:
+		ret = DESC_RATE36M;
+		break;
+	case IEEE80211_OFDM_RATE_48MB:
+		ret = DESC_RATE48M;
+		break;
+	case IEEE80211_OFDM_RATE_54MB:
+		ret = DESC_RATE54M;
+		break;
+	default:
+		break;
 	}
-
 	return ret;
 }
 
-void	HalSetBrateCfg(
-	IN PADAPTER		Adapter,
-	IN u8			*mBratesOS,
-	OUT u16			*pBrateCfg)
+void	halsetbratecfg(PADAPTER Adapter, u8 *brates, u16 *bratecfg)
 {
 	u8	i, is_brate, brate;
 
-	for(i=0;i<NDIS_802_11_LENGTH_RATES_EX;i++)
-	{
-		is_brate = mBratesOS[i] & IEEE80211_BASIC_RATE_MASK;
-		brate = mBratesOS[i] & 0x7f;
-
-		if( is_brate )
-		{
-			switch(brate)
-			{
-				case IEEE80211_CCK_RATE_1MB:	*pBrateCfg |= RATE_1M;	break;
-				case IEEE80211_CCK_RATE_2MB:	*pBrateCfg |= RATE_2M;	break;
-				case IEEE80211_CCK_RATE_5MB:	*pBrateCfg |= RATE_5_5M;break;
-				case IEEE80211_CCK_RATE_11MB:	*pBrateCfg |= RATE_11M;	break;
-				case IEEE80211_OFDM_RATE_6MB:	*pBrateCfg |= RATE_6M;	break;
-				case IEEE80211_OFDM_RATE_9MB:	*pBrateCfg |= RATE_9M;	break;
-				case IEEE80211_OFDM_RATE_12MB:	*pBrateCfg |= RATE_12M;	break;
-				case IEEE80211_OFDM_RATE_18MB:	*pBrateCfg |= RATE_18M;	break;
-				case IEEE80211_OFDM_RATE_24MB:	*pBrateCfg |= RATE_24M;	break;
-				case IEEE80211_OFDM_RATE_36MB:	*pBrateCfg |= RATE_36M;	break;
-				case IEEE80211_OFDM_RATE_48MB:	*pBrateCfg |= RATE_48M;	break;
-				case IEEE80211_OFDM_RATE_54MB:	*pBrateCfg |= RATE_54M;	break;
+	for (i = 0; i < NDIS_802_11_LENGTH_RATES_EX; i++) {
+		is_brate = brates[i] & IEEE80211_BASIC_RATE_MASK;
+		brate = brates[i] & 0x7f;
+
+		if (is_brate) {
+			switch (brate) {
+			case IEEE80211_CCK_RATE_1MB:
+				*bratecfg |= RATE_1M;
+				break;
+			case IEEE80211_CCK_RATE_2MB:
+				*bratecfg |= RATE_2M;
+				break;
+			case IEEE80211_CCK_RATE_5MB:
+				*bratecfg |= RATE_5_5M;
+				break;
+			case IEEE80211_CCK_RATE_11MB:
+				*bratecfg |= RATE_11M;
+				break;
+			case IEEE80211_OFDM_RATE_6MB:
+				*bratecfg |= RATE_6M;
+				break;
+			case IEEE80211_OFDM_RATE_9MB:
+				*bratecfg |= RATE_9M;
+				break;
+			case IEEE80211_OFDM_RATE_12MB:
+				*bratecfg |= RATE_12M;
+				break;
+			case IEEE80211_OFDM_RATE_18MB:
+				*bratecfg |= RATE_18M;
+				break;
+			case IEEE80211_OFDM_RATE_24MB:
+				*bratecfg |= RATE_24M;
+				break;
+			case IEEE80211_OFDM_RATE_36MB:
+				*bratecfg |= RATE_36M;
+				break;
+			case IEEE80211_OFDM_RATE_48MB:
+				*bratecfg |= RATE_48M;
+				break;
+			case IEEE80211_OFDM_RATE_54MB:
+				*bratecfg |= RATE_54M;
+				break;
 			}
 		}
 	}
@@ -292,10 +320,12 @@ void	HalSetBrateCfg(
 
 void hal_init_macaddr(_adapter *adapter)
 {
-	rtw_hal_set_hwreg(adapter, HW_VAR_MAC_ADDR, adapter->eeprompriv.mac_addr);
-#ifdef  CONFIG_CONCURRENT_MODE
+	rtw_hal_set_hwreg(adapter, HW_VAR_MAC_ADDR,
+			  adapter->eeprompriv.mac_addr);
+#ifdef CONFIG_CONCURRENT_MODE
 	if (adapter->pbuddy_adapter)
-		rtw_hal_set_hwreg(adapter->pbuddy_adapter, HW_VAR_MAC_ADDR, adapter->pbuddy_adapter->eeprompriv.mac_addr);
+		rtw_hal_set_hwreg(adapter->pbuddy_adapter, HW_VAR_MAC_ADDR,
+				  adapter->pbuddy_adapter->eeprompriv.mac_addr);
 #endif
 }
 
@@ -322,11 +352,10 @@ s32 c2h_evt_read(_adapter *adapter, u8 *
 
 	trigger = rtw_read8(adapter, REG_C2HEVT_CLEAR);
 
-	if (trigger == C2H_EVT_HOST_CLOSE) {
+	if (trigger == C2H_EVT_HOST_CLOSE)
 		goto exit; /* Not ready */
-	} else if (trigger != C2H_EVT_FW_CLOSE) {
+	else if (trigger != C2H_EVT_FW_CLOSE)
 		goto clear_evt; /* Not a valid value */
-	}
 
 	c2h_evt = (struct c2h_evt_hdr *)buf;
 
@@ -336,26 +365,22 @@ s32 c2h_evt_read(_adapter *adapter, u8 *
 	*(buf+1) = rtw_read8(adapter, REG_C2HEVT_MSG_NORMAL + 1);
 
 	RT_PRINT_DATA(_module_hal_init_c_, _drv_info_, "c2h_evt_read(): ",
-		&c2h_evt , sizeof(c2h_evt));
-
-	if (0) {
-		DBG_871X("%s id:%u, len:%u, seq:%u, trigger:0x%02x\n", __func__
-			, c2h_evt->id, c2h_evt->plen, c2h_evt->seq, trigger);
-	}
+		      &c2h_evt , sizeof(c2h_evt));
 
 	/* Read the content */
 	for (i = 0; i < c2h_evt->plen; i++)
-		c2h_evt->payload[i] = rtw_read8(adapter, REG_C2HEVT_MSG_NORMAL + sizeof(*c2h_evt) + i);
-
-	RT_PRINT_DATA(_module_hal_init_c_, _drv_info_, "c2h_evt_read(): Command Content:\n",
-		c2h_evt->payload, c2h_evt->plen);
+		c2h_evt->payload[i] = rtw_read8(adapter, REG_C2HEVT_MSG_NORMAL +
+						sizeof(*c2h_evt) + i);
 
+	RT_PRINT_DATA(_module_hal_init_c_, _drv_info_,
+		      "c2h_evt_read(): Command Content:\n",
+		      c2h_evt->payload, c2h_evt->plen);
 	ret = _SUCCESS;
-
 clear_evt:
 	/*
 	* Clear event to notify FW we have read the command.
-	* If this field isn't clear, the FW won't update the next command message.
+	* If this field isn't clear, the FW won't update the next command
+	* message.
 	*/
 	c2h_evt_clear(adapter);
 exit:
--- a/drivers/staging/rtl8192du/hal/rtl8192du_xmit.c
+++ b/drivers/staging/rtl8192du/hal/rtl8192du_xmit.c
@@ -352,7 +352,7 @@ if (padapter->registrypriv.mp_mode == 0)
 			if (pmlmeinfo->preamble_mode == PREAMBLE_SHORT)
 				ptxdesc->txdw4 |= cpu_to_le32(BIT(24));// DATA_SHORT
 
-			ptxdesc->txdw5 |= cpu_to_le32(MRateToHwRate(pmlmeext->tx_rate));
+			ptxdesc->txdw5 |= cpu_to_le32(ratetohwrate(pmlmeext->tx_rate));
 		}
 
 #ifdef CONFIG_P2P
@@ -433,7 +433,7 @@ if (padapter->registrypriv.mp_mode == 0)
 		else
 #endif
 		{
-			ptxdesc->txdw5 |= cpu_to_le32(MRateToHwRate(pmlmeext->tx_rate));
+			ptxdesc->txdw5 |= cpu_to_le32(ratetohwrate(pmlmeext->tx_rate));
 		}
 	}
 	else if((pxmitframe->frame_tag&0x0f) == TXAGG_FRAMETAG)
@@ -464,7 +464,7 @@ if (padapter->registrypriv.mp_mode == 0)
 		ptxdesc->txdw4 |= cpu_to_le32(BIT(8));//driver uses rate
 
 		//offset 20
-		ptxdesc->txdw5 |= cpu_to_le32(MRateToHwRate(pmlmeext->tx_rate));
+		ptxdesc->txdw5 |= cpu_to_le32(ratetohwrate(pmlmeext->tx_rate));
 	}
 
 	// 2009.11.05. tynli_test. Suggested by SD4 Filen for FW LPS.
--- a/drivers/staging/rtl8192du/hal/usb_halinit.c
+++ b/drivers/staging/rtl8192du/hal/usb_halinit.c
@@ -3599,7 +3599,7 @@ SelectRTSInitialRate(
 
 	_rtw_memcpy(SupportRateSet, cur_network->SupportedRates, NDIS_802_11_LENGTH_RATES_EX);
 
-	HalSetBrateCfg( Adapter, SupportRateSet, &BasicRateCfg );
+	halsetbratecfg( Adapter, SupportRateSet, &BasicRateCfg );
 
 	if( bUseProtection &&
 		(!(pmlmeext->cur_wireless_mode == WIRELESS_11A|| pmlmeext->cur_wireless_mode == WIRELESS_11A_5N)))// 5G not support cck rate
@@ -4549,7 +4549,7 @@ _func_enter_;
 				// Select RRSR (in Legacy-OFDM and CCK)
 				// For 8190, we select only 24M, 12M, 6M, 11M, 5.5M, 2M, and 1M from the Basic rate.
 				// We do not use other rates.
-				HalSetBrateCfg( Adapter, val, &BrateCfg );
+				halsetbratecfg( Adapter, val, &BrateCfg );
 
 				if(pHalData->CurrentBandType92D == BAND_ON_2_4G)
 					b2GBand = _TRUE;
--- a/drivers/staging/rtl8192du/include/hal_com.h
+++ b/drivers/staging/rtl8192du/include/hal_com.h
@@ -20,12 +20,12 @@
 #ifndef __HAL_COMMON_H__
 #define __HAL_COMMON_H__
 
-//CCK
+/* CCK */
 #define RATE_1M						BIT(0)
 #define RATE_2M						BIT(1)
 #define RATE_5_5M					BIT(2)
 #define RATE_11M					BIT(3)
-//OFDM
+/* OFDM */
 #define RATE_6M						BIT(4)
 #define RATE_9M						BIT(5)
 #define RATE_12M					BIT(6)
@@ -34,7 +34,7 @@
 #define RATE_36M					BIT(9)
 #define RATE_48M					BIT(10)
 #define RATE_54M					BIT(11)
-//MCS 1 Spatial Stream
+/* MCS 1 Spatial Stream */
 #define RATE_MCS0					BIT(12)
 #define RATE_MCS1					BIT(13)
 #define RATE_MCS2					BIT(14)
@@ -43,7 +43,7 @@
 #define RATE_MCS5					BIT(17)
 #define RATE_MCS6					BIT(18)
 #define RATE_MCS7					BIT(19)
-//MCS 2 Spatial Stream
+/* MCS 2 Spatial Stream */
 #define RATE_MCS8					BIT(20)
 #define RATE_MCS9					BIT(21)
 #define RATE_MCS10					BIT(22)
@@ -53,7 +53,7 @@
 #define RATE_MCS14					BIT(26)
 #define RATE_MCS15					BIT(27)
 
-// ALL CCK Rate
+/*  ALL CCK Rate */
 #define	RATE_ALL_CCK				RATR_1M|RATR_2M|RATR_55M|RATR_11M
 #define	RATE_ALL_OFDM_AG			RATR_6M|RATR_9M|RATR_12M|RATR_18M|RATR_24M|\
 									RATR_36M|RATR_48M|RATR_54M
@@ -63,18 +63,18 @@
 									RATR_MCS12|RATR_MCS13|RATR_MCS14|RATR_MCS15
 
 /*------------------------------ Tx Desc definition Macro ------------------------*/
-//#pragma mark -- Tx Desc related definition. --
-//----------------------------------------------------------------------------
-//-----------------------------------------------------------
-//	Rate
-//-----------------------------------------------------------
-// CCK Rates, TxHT = 0
+/* pragma mark -- Tx Desc related definition. -- */
+/*  */
+/*  */
+/* 	Rate */
+/*  */
+/*  CCK Rates, TxHT = 0 */
 #define DESC_RATE1M				0x00
 #define DESC_RATE2M				0x01
 #define DESC_RATE5_5M				0x02
 #define DESC_RATE11M				0x03
 
-// OFDM Rates, TxHT = 0
+/*  OFDM Rates, TxHT = 0 */
 #define DESC_RATE6M				0x04
 #define DESC_RATE9M				0x05
 #define DESC_RATE12M				0x06
@@ -84,7 +84,7 @@
 #define DESC_RATE48M				0x0a
 #define DESC_RATE54M				0x0b
 
-// MCS Rates, TxHT = 1
+/*  MCS Rates, TxHT = 1 */
 #define DESC_RATEMCS0				0x0c
 #define DESC_RATEMCS1				0x0d
 #define DESC_RATEMCS2				0x0e
@@ -104,9 +104,9 @@
 #define DESC_RATEMCS15_SG			0x1c
 #define DESC_RATEMCS32				0x20
 
-//============================================================
-// Global var
-//============================================================
+/*  */
+/*  Global var */
+/*  */
 #define	OFDM_TABLE_SIZE_92C	37
 #define	OFDM_TABLE_SIZE_92D	43
 #define	CCK_TABLE_SIZE		33
@@ -121,25 +121,22 @@ extern u8 CCKSwingTable_Ch14 [CCK_TABLE_
 void dump_chip_info(HAL_VERSION	ChipVersion);
 #endif
 
-u8	//return the final channel plan decision
+u8	/* return the final channel plan decision */
 hal_com_get_channel_plan(
-	IN	PADAPTER	padapter,
-	IN	u8			hw_channel_plan,	//channel plan from HW (efuse/eeprom)
-	IN	u8			sw_channel_plan,	//channel plan from SW (registry/module param)
-	IN	u8			def_channel_plan,	//channel plan used when the former two is invalid
-	IN	BOOLEAN		AutoLoadFail
+	PADAPTER padapter,
+	u8 hw_channel_plan,	/* channel plan from HW (efuse/eeprom) */
+	u8 sw_channel_plan,	/* channel plan from SW (registry/module param) */
+	u8 def_channel_plan,	/* channel plan used when the former two is invalid */
+	BOOLEAN		AutoLoadFail
 	);
 
-void	HalSetBrateCfg(
-	IN PADAPTER		Adapter,
-	IN u8			*mBratesOS,
-	OUT u16			*pBrateCfg);
+void	halsetbratecfg( PADAPTER Adapter, u8 *mBratesOS, u16 *pBrateCfg);
 
-u8	MRateToHwRate(u8 rate);
+u8	ratetohwrate(u8 rate);
 
 void hal_init_macaddr(_adapter *adapter);
 
 void c2h_evt_clear(_adapter *adapter);
 s32 c2h_evt_read(_adapter *adapter, u8 *buf);
 
-#endif //__HAL_COMMON_H__
+#endif /* __HAL_COMMON_H__ */
