From ef771b14acdd1f9ad2c55c138ee1df4b368e46a9 Mon Sep 17 00:00:00 2001
From: Larry Finger <Larry.Finger@lwfinger.net>
Date: Wed, 24 Apr 2013 10:29:52 -0500
Subject: [PATCH 057/210] Remove {enter,exit}_critical_ex statements

These two routines do not differ from the *_critical() versions.

Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
---
 core/rtw_recv.c         | 18 +++++++++---------
 include/osdep_service.h | 10 ----------
 2 files changed, 9 insertions(+), 19 deletions(-)

--- a/drivers/staging/rtl8192du/core/rtw_recv.c
+++ b/drivers/staging/rtl8192du/core/rtw_recv.c
@@ -2479,7 +2479,7 @@ int enqueue_reorder_recvframe(struct rec
 
 	//DbgPrint("+enqueue_reorder_recvframe()\n");
 
-	//_enter_critical_ex(&ppending_recvframe_queue->lock, &irql);
+	//_enter_critical(&ppending_recvframe_queue->lock, &irql);
 	//_rtw_spinlock_ex(&ppending_recvframe_queue->lock);
 
 
@@ -2500,7 +2500,7 @@ int enqueue_reorder_recvframe(struct rec
 			//Duplicate entry is found!! Do not insert current entry.
 			//RT_TRACE(COMP_RX_REORDER, DBG_TRACE, ("InsertRxReorderList(): Duplicate packet is dropped!! IndicateSeq: %d, NewSeq: %d\n", pTS->RxIndicateSeq, SeqNum));
 
-			//_exit_critical_ex(&ppending_recvframe_queue->lock, &irql);
+			//_exit_critical(&ppending_recvframe_queue->lock, &irql);
 
 			return false;
 		}
@@ -2514,7 +2514,7 @@ int enqueue_reorder_recvframe(struct rec
 	}
 
 
-	//_enter_critical_ex(&ppending_recvframe_queue->lock, &irql);
+	//_enter_critical(&ppending_recvframe_queue->lock, &irql);
 	//_rtw_spinlock_ex(&ppending_recvframe_queue->lock);
 
 	rtw_list_delete(&(prframe->u.hdr.list));
@@ -2522,7 +2522,7 @@ int enqueue_reorder_recvframe(struct rec
 	rtw_list_insert_tail(&(prframe->u.hdr.list), plist);
 
 	//_rtw_spinunlock_ex(&ppending_recvframe_queue->lock);
-	//_exit_critical_ex(&ppending_recvframe_queue->lock, &irql);
+	//_exit_critical(&ppending_recvframe_queue->lock, &irql);
 
 
 	//RT_TRACE(COMP_RX_REORDER, DBG_TRACE, ("InsertRxReorderList(): Pkt insert into buffer!! IndicateSeq: %d, NewSeq: %d\n", pTS->RxIndicateSeq, SeqNum));
@@ -2548,7 +2548,7 @@ int recv_indicatepkts_in_order(_adapter
 	{
 		if(rtw_is_list_empty(phead))
 		{
-			// _exit_critical_ex(&ppending_recvframe_queue->lock, &irql);
+			// _exit_critical(&ppending_recvframe_queue->lock, &irql);
 			//_rtw_spinunlock_ex(&ppending_recvframe_queue->lock);
 			return true;
 		}
@@ -2623,7 +2623,7 @@ int recv_indicatepkts_in_order(_adapter
 	}
 
 	//_rtw_spinunlock_ex(&ppending_recvframe_queue->lock);
-	//_exit_critical_ex(&ppending_recvframe_queue->lock, &irql);
+	//_exit_critical(&ppending_recvframe_queue->lock, &irql);
 
 /*
 	//Release the indication lock and set to new indication step.
@@ -2640,7 +2640,7 @@ int recv_indicatepkts_in_order(_adapter
 		//pTS->RxIndicateState = RXTS_INDICATE_IDLE;
 	}
 */
-	//_exit_critical_ex(&ppending_recvframe_queue->lock, &irql);
+	//_exit_critical(&ppending_recvframe_queue->lock, &irql);
 
 	//return true;
 	return bPktInBuf;
@@ -2752,7 +2752,7 @@ int recv_indicatepkt_reorder(_adapter *p
 		//pHTInfo->RxReorderDropCounter++;
 		//ReturnRFDList(Adapter, pRfd);
 		//RT_TRACE(COMP_RX_REORDER, DBG_TRACE, ("RxReorderIndicatePacket() ==> Packet Drop!!\n"));
-		//_exit_critical_ex(&ppending_recvframe_queue->lock, &irql);
+		//_exit_critical(&ppending_recvframe_queue->lock, &irql);
 		//return _FAIL;
 
 		#ifdef DBG_RX_DROP_FRAME
@@ -2766,7 +2766,7 @@ int recv_indicatepkt_reorder(_adapter *p
 	if(!enqueue_reorder_recvframe(preorder_ctrl, prframe))
 	{
 		//DbgPrint("recv_indicatepkt_reorder, enqueue_reorder_recvframe fail!\n");
-		//_exit_critical_ex(&ppending_recvframe_queue->lock, &irql);
+		//_exit_critical(&ppending_recvframe_queue->lock, &irql);
 		//return _FAIL;
 		#ifdef DBG_RX_DROP_FRAME
 		DBG_8192D("DBG_RX_DROP_FRAME %s enqueue_reorder_recvframe fail\n", __FUNCTION__);
--- a/drivers/staging/rtl8192du/include/osdep_service.h
+++ b/drivers/staging/rtl8192du/include/osdep_service.h
@@ -177,16 +177,6 @@ static inline void _exit_critical(_lock
 	spin_unlock_irqrestore(plock, *pirqL);
 }
 
-static inline void _enter_critical_ex(_lock *plock, _irqL *pirqL)
-{
-	spin_lock_irqsave(plock, *pirqL);
-}
-
-static inline void _exit_critical_ex(_lock *plock, _irqL *pirqL)
-{
-	spin_unlock_irqrestore(plock, *pirqL);
-}
-
 static inline void _enter_critical_mutex(_mutex *pmutex)
 {
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,37))
