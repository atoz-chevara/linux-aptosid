From 88e4a3be61f92503baf04bb7ef6378daf068f8a7 Mon Sep 17 00:00:00 2001
From: Stefan Lippers-Hollmann <s.l-h@gmx.de>
Date: Sat, 22 Mar 2014 03:02:57 +0100
Subject: [PATCH 399/456] rtl8192du: remove special android code paths

The CONFIG_ANDROID symbol is not defined and none of the interfaces or
keywords are provided by any other in-kernel module (except rtl8188eu).

Signed-off-by: Stefan Lippers-Hollmann <s.l-h@gmx.de>
---
 Makefile                 |   1 -
 include/ioctl_cfg80211.h |   1 -
 include/rtw_android.h    |  63 ----------
 os_dep/ioctl_cfg80211.c  |   2 -
 os_dep/ioctl_linux.c     |  62 +--------
 os_dep/os_intfs.c        |   4 -
 os_dep/rtw_android.c     | 317 -----------------------------------------------
 7 files changed, 1 insertion(+), 449 deletions(-)
 delete mode 100644 include/rtw_android.h
 delete mode 100644 os_dep/rtw_android.c

--- a/drivers/staging/rtl8192du/Makefile
+++ b/drivers/staging/rtl8192du/Makefile
@@ -87,7 +87,6 @@ rtk_core :=			\
 		os_dep/mlme_linux.o \
 		os_dep/osdep_service.o \
 		os_dep/os_intfs.o \
-		os_dep/rtw_android.o \
 		os_dep/usb_intf.o \
 		os_dep/usb_ops_linux.o \
 		os_dep/xmit_linux.o \
--- a/drivers/staging/rtl8192du/include/ioctl_cfg80211.h
+++ b/drivers/staging/rtl8192du/include/ioctl_cfg80211.h
@@ -52,7 +52,6 @@ struct rtw_wdev_priv
 
 	struct rtw_wdev_invit_info invit_info;
 
-	u8 bandroid_scan;
 	bool block;
 	bool power_mgmt;
 
--- a/drivers/staging/rtl8192du/include/rtw_android.h
+++ /dev/null
@@ -1,63 +0,0 @@
-/******************************************************************************
- *
- * Copyright(c) 2007 - 2011 Realtek Corporation. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify it
- * under the terms of version 2 of the GNU General Public License as
- * published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
- * more details.
- *
- *
- ******************************************************************************/
-
-#ifndef __RTW_ANDROID_H__
-#define __RTW_ANDROID_H__
-
-#include <linux/module.h>
-#include <linux/netdevice.h>
-
-enum ANDROID_WIFI_CMD {
-	ANDROID_WIFI_CMD_START,
-	ANDROID_WIFI_CMD_STOP,
-	ANDROID_WIFI_CMD_SCAN_ACTIVE,
-	ANDROID_WIFI_CMD_SCAN_PASSIVE,
-	ANDROID_WIFI_CMD_RSSI,
-	ANDROID_WIFI_CMD_LINKSPEED,
-	ANDROID_WIFI_CMD_RXFILTER_START,
-	ANDROID_WIFI_CMD_RXFILTER_STOP,
-	ANDROID_WIFI_CMD_RXFILTER_ADD,
-	ANDROID_WIFI_CMD_RXFILTER_REMOVE,
-	ANDROID_WIFI_CMD_BTCOEXSCAN_START,
-	ANDROID_WIFI_CMD_BTCOEXSCAN_STOP,
-	ANDROID_WIFI_CMD_BTCOEXMODE,
-	ANDROID_WIFI_CMD_SETSUSPENDOPT,
-	ANDROID_WIFI_CMD_P2P_DEV_ADDR,
-	ANDROID_WIFI_CMD_SETFWPATH,
-	ANDROID_WIFI_CMD_SETBAND,
-	ANDROID_WIFI_CMD_GETBAND,
-	ANDROID_WIFI_CMD_COUNTRY,
-	ANDROID_WIFI_CMD_P2P_SET_NOA,
-	ANDROID_WIFI_CMD_P2P_GET_NOA,
-	ANDROID_WIFI_CMD_P2P_SET_PS,
-	ANDROID_WIFI_CMD_SET_AP_WPS_P2P_IE,
-	ANDROID_WIFI_CMD_MACADDR,
-	ANDROID_WIFI_CMD_BLOCK,
-	ANDROID_WIFI_CMD_WFD_ENABLE,
-	ANDROID_WIFI_CMD_WFD_DISABLE,
-	ANDROID_WIFI_CMD_WFD_SET_TCPPORT,
-	ANDROID_WIFI_CMD_WFD_SET_MAX_TPUT,
-	ANDROID_WIFI_CMD_WFD_SET_DEVTYPE,
-	ANDROID_WIFI_CMD_MAX
-};
-
-int rtw_android_cmdstr_to_num(char *cmdstr);
-int rtw_android_priv_cmd(struct net_device *net, struct ifreq *ifr, int cmd);
-
-static int rtw_android_wifictrl_func_add(void) { return 0; }
-static void rtw_android_wifictrl_func_del(void) {}
-
-#endif /* __RTW_ANDROID_H__ */
--- a/drivers/staging/rtl8192du/os_dep/ioctl_cfg80211.c
+++ b/drivers/staging/rtl8192du/os_dep/ioctl_cfg80211.c
@@ -4121,8 +4121,6 @@ int rtw_wdev_alloc(struct rtw_adapter *p
 	pwdev_priv->provdisc_req_issued = false;
 	rtw_wdev_invit_info_init(&pwdev_priv->invit_info);
 
-	pwdev_priv->bandroid_scan = false;
-
 	if (padapter->registrypriv.power_mgnt != PS_MODE_ACTIVE)
 		pwdev_priv->power_mgmt = true;
 	else
--- a/drivers/staging/rtl8192du/os_dep/ioctl_linux.c
+++ b/drivers/staging/rtl8192du/os_dep/ioctl_linux.c
@@ -1483,9 +1483,7 @@ static int rtw_wx_get_scan(struct net_de
 #endif /* CONFIG_P2P */
 
 	wait_status = _FW_UNDER_SURVEY
-		#ifndef CONFIG_ANDROID
 		|_FW_UNDER_LINKING
-		#endif
 	;
 
 #ifdef CONFIG_DUALMAC_CONCURRENT
@@ -2202,10 +2200,9 @@ static int rtw_wx_set_auth(struct net_de
 		break;
 	case IW_AUTH_80211_AUTH_ALG:
 
-		#if defined(CONFIG_ANDROID) || 1
 		/*
 		 *  It's the starting point of a link layer connection using wpa_supplicant
-		*/
+		 */
 		if (check_fwstate(&padapter->mlmepriv, _FW_LINKED)) {
 			LeaveAllPowerSaveMode(padapter);
 			rtw_disassoc_cmd(padapter, 500, false);
@@ -2213,7 +2210,6 @@ static int rtw_wx_set_auth(struct net_de
 			rtw_indicate_disconnect(padapter);
 			rtw_free_assoc_resources(padapter, 1);
 		}
-		#endif
 
 		ret = wpa_set_auth_algs(dev, (u32)param->value);
 		break;
@@ -6159,7 +6155,6 @@ out:
 }
 #endif
 
-#include <rtw_android.h>
 static int rtw_wx_set_priv(struct net_device *dev,
 				struct iw_request_info *info,
 				union iwreq_data *awrq,
@@ -6230,57 +6225,6 @@ static int rtw_wx_set_priv(struct net_de
 		goto FREE_EXT;
 	}
 
-#ifdef CONFIG_ANDROID
-	/* DBG_8192D("rtw_wx_set_priv: %s req =%s\n", dev->name, ext); */
-
-	i = rtw_android_cmdstr_to_num(ext);
-
-	switch (i) {
-	case ANDROID_WIFI_CMD_START :
-		indicate_wx_custom_event(padapter, "START");
-		break;
-	case ANDROID_WIFI_CMD_STOP :
-		indicate_wx_custom_event(padapter, "STOP");
-		break;
-	case ANDROID_WIFI_CMD_RSSI : {
-		struct	mlme_priv	*pmlmepriv = &(padapter->mlmepriv);
-		struct	wlan_network	*pcur_network = &pmlmepriv->cur_network;
-
-		if (check_fwstate(pmlmepriv, _FW_LINKED) == true)
-			sprintf(ext, "%s rssi %d", pcur_network->network.Ssid.Ssid, padapter->recvpriv.rssi);
-		else
-			sprintf(ext, "OK");
-		break; }
-	case ANDROID_WIFI_CMD_LINKSPEED : {
-		u16 mbps = rtw_get_cur_max_rate(padapter)/10;
-		sprintf(ext, "LINKSPEED %d", mbps);
-		break; }
-	case ANDROID_WIFI_CMD_MACADDR :
-		sprintf(ext, "MACADDR = %pM", dev->dev_addr);
-		break;
-	case ANDROID_WIFI_CMD_SCAN_ACTIVE :
-		/* rtw_set_scan_mode(padapter, SCAN_ACTIVE); */
-		sprintf(ext, "OK");
-		break;
-	case ANDROID_WIFI_CMD_SCAN_PASSIVE :
-		/* rtw_set_scan_mode(padapter, SCAN_PASSIVE); */
-		sprintf(ext, "OK");
-		break;
-
-	case ANDROID_WIFI_CMD_COUNTRY : {
-		char country_code[10];
-		sscanf(ext, "%*s %s", country_code);
-		rtw_set_country(padapter, country_code);
-		sprintf(ext, "OK");
-		break; }
-	default :
-		sprintf(ext, "OK");
-	}
-
-	if (copy_to_user(dwrq->pointer, ext, min(dwrq->length, (u16)(strlen(ext)+1))))
-		ret = -EFAULT;
-
-#endif /* end of CONFIG_ANDROID */
 
 FREE_EXT:
 
@@ -6869,7 +6813,6 @@ static int rtw_test(struct net_device *d
 	return 0;
 }
 
-#include <rtw_android.h>
 int rtw_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
 {
 	struct iwreq *wrq = (struct iwreq *)rq;
@@ -6884,9 +6827,6 @@ int rtw_ioctl(struct net_device *dev, st
 		ret = rtw_hostapd_ioctl(dev, &wrq->u.data);
 		break;
 #endif
-	case (SIOCDEVPRIVATE+1):
-		ret = rtw_android_priv_cmd(dev, rq, cmd);
-		break;
 	default:
 		ret = -EOPNOTSUPP;
 		break;
--- a/drivers/staging/rtl8192du/os_dep/os_intfs.c
+++ b/drivers/staging/rtl8192du/os_dep/os_intfs.c
@@ -820,7 +820,6 @@ static int netdev_if2_close(struct net_d
 			rtw_netif_stop_queue(pnetdev);
 	}
 	rtw_scan_abort(padapter);
-	wdev_to_priv(padapter->rtw_wdev)->bandroid_scan = false;
 	return 0;
 }
 
@@ -1225,7 +1224,6 @@ static int netdev_close(struct net_devic
 				rtw_netif_stop_queue(pnetdev);
 		}
 
-#ifndef CONFIG_ANDROID
 		/* s2. */
 		LeaveAllPowerSaveMode(padapter);
 		rtw_disassoc_cmd(padapter, 500, false);
@@ -1235,7 +1233,6 @@ static int netdev_close(struct net_devic
 		rtw_free_assoc_resources(padapter, 1);
 		/* s2-4. */
 		rtw_free_network_queue(padapter, true);
-#endif
 		/*  Close LED */
 		rtw_led_control(padapter, LED_CTL_POWER_OFF);
 	}
@@ -1247,7 +1244,6 @@ static int netdev_close(struct net_devic
 #endif /* CONFIG_P2P */
 
 	rtw_scan_abort(padapter);
-	wdev_to_priv(padapter->rtw_wdev)->bandroid_scan = false;
 	padapter->rtw_wdev->iftype = NL80211_IFTYPE_MONITOR; /* set this at the end */
 
 	RT_TRACE(_module_os_intfs_c_, _drv_info_, ("-871x_drv - drv_close\n"));
--- a/drivers/staging/rtl8192du/os_dep/rtw_android.c
+++ /dev/null
@@ -1,317 +0,0 @@
-/******************************************************************************
- *
- * Copyright(c) 2007 - 2011 Realtek Corporation. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify it
- * under the terms of version 2 of the GNU General Public License as
- * published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
- * more details.
- *
- *
- ******************************************************************************/
-
-#include <linux/module.h>
-#include <linux/netdevice.h>
-
-#include <rtw_android.h>
-#include <osdep_service.h>
-#include <rtw_debug.h>
-#include <ioctl_cfg80211.h>
-#include <rtw_ioctl_set.h>
-
-static const char *android_wifi_cmd_str[ANDROID_WIFI_CMD_MAX] = {
-	"START",
-	"STOP",
-	"SCAN-ACTIVE",
-	"SCAN-PASSIVE",
-	"RSSI",
-	"LINKSPEED",
-	"RXFILTER-START",
-	"RXFILTER-STOP",
-	"RXFILTER-ADD",
-	"RXFILTER-REMOVE",
-	"BTCOEXSCAN-START",
-	"BTCOEXSCAN-STOP",
-	"BTCOEXMODE",
-	"SETSUSPENDOPT",
-	"P2P_DEV_ADDR",
-	"SETFWPATH",
-	"SETBAND",
-	"GETBAND",
-	"COUNTRY",
-	"P2P_SET_NOA",
-	"P2P_GET_NOA",
-	"P2P_SET_PS",
-	"SET_AP_WPS_P2P_IE",
-	"MACADDR",
-	"BLOCK",
-	"WFD-ENABLE",
-	"WFD-DISABLE",
-	"WFD-SET-TCPPORT",
-	"WFD-SET-MAXTPUT",
-	"WFD-SET-DEVTYPE",
-};
-
-struct android_wifi_priv_cmd {
-	const char __user *buf;
-	int used_len;
-	int total_len;
-};
-
-/**
- * Local (static) functions and variables
- */
-
-/* Initialize g_wifi_on to 1 so dhd_bus_start will be called for the first
- * time (only) in dhd_open, subsequential wifi on will be handled by
- * wl_android_wifi_on
- */
-static int g_wifi_on = true;
-
-int rtw_android_cmdstr_to_num(char *cmdstr)
-{
-	int cmd_num;
-	for (cmd_num=0 ; cmd_num<ANDROID_WIFI_CMD_MAX; cmd_num++)
-		if (0 == strnicmp(cmdstr , android_wifi_cmd_str[cmd_num], strlen(android_wifi_cmd_str[cmd_num])))
-			break;
-
-	return cmd_num;
-}
-
-static int rtw_android_get_rssi(struct net_device *net, char *command, int total_len)
-{
-	struct rtw_adapter *padapter = (struct rtw_adapter *)rtw_netdev_priv(net);
-	struct	mlme_priv	*pmlmepriv = &(padapter->mlmepriv);
-	struct	wlan_network	*pcur_network = &pmlmepriv->cur_network;
-	int bytes_written = 0;
-
-	if (check_fwstate(pmlmepriv, _FW_LINKED) == true) {
-		bytes_written += snprintf(&command[bytes_written], total_len, "%s rssi %d",
-			pcur_network->network.Ssid.Ssid, padapter->recvpriv.rssi);
-	}
-
-	return bytes_written;
-}
-
-static int rtw_android_get_link_speed(struct net_device *net, char *command, int total_len)
-{
-	struct rtw_adapter *padapter = (struct rtw_adapter *)rtw_netdev_priv(net);
-	struct	mlme_priv	*pmlmepriv = &(padapter->mlmepriv);
-	struct	wlan_network	*pcur_network = &pmlmepriv->cur_network;
-	int bytes_written = 0;
-	u16 link_speed = 0;
-
-	link_speed = rtw_get_cur_max_rate(padapter)/10;
-	bytes_written = snprintf(command, total_len, "LinkSpeed %d", link_speed);
-
-	return bytes_written;
-}
-
-static int rtw_android_get_macaddr(struct net_device *net, char *command, int total_len)
-{
-	struct rtw_adapter *adapter = (struct rtw_adapter *)rtw_netdev_priv(net);
-	int bytes_written = 0;
-
-	bytes_written = snprintf(command, total_len, "Macaddr = %pM", net->dev_addr);
-	return bytes_written;
-}
-
-static int rtw_android_set_country(struct net_device *net, char *command, int total_len)
-{
-	struct rtw_adapter *adapter = (struct rtw_adapter *)rtw_netdev_priv(net);
-	char *country_code = command + strlen(android_wifi_cmd_str[ANDROID_WIFI_CMD_COUNTRY]) + 1;
-	int ret;
-
-	ret = rtw_set_country(adapter, country_code);
-
-	return (ret==_SUCCESS)?0:-1;
-}
-
-static int rtw_android_get_p2p_dev_addr(struct net_device *net, char *command, int total_len)
-{
-	int ret;
-	int bytes_written = 0;
-
-	/* We use the same address as our HW MAC address */
-	memcpy(command, net->dev_addr, ETH_ALEN);
-
-	bytes_written = ETH_ALEN;
-	return bytes_written;
-}
-
-static int rtw_android_set_block(struct net_device *net, char *command, int total_len)
-{
-	struct rtw_adapter *adapter = (struct rtw_adapter *)rtw_netdev_priv(net);
-	int ret;
-	char *block_value = command + strlen(android_wifi_cmd_str[ANDROID_WIFI_CMD_BLOCK]) + 1;
-
-	wdev_to_priv(adapter->rtw_wdev)->block = (*block_value=='0')?false:true;
-	return 0;
-}
-
-static int get_int_from_command(char* pcmd)
-{
-	int i = 0;
-
-	for (i = 0; i < strlen(pcmd); i++) {
-		if (pcmd[i] == '=') {
-			/*	Skip the '=' and space characters. */
-			i += 2;
-			break;
-		}
-	}
-	return (rtw_atoi(pcmd + i));
-}
-
-int rtw_android_priv_cmd(struct net_device *net, struct ifreq *ifr, int cmd)
-{
-	int ret = 0;
-	char *command = NULL;
-	int cmd_num;
-	int bytes_written = 0;
-	struct android_wifi_priv_cmd priv_cmd;
-
-	if (!ifr->ifr_data) {
-		ret = -EINVAL;
-		goto exit;
-	}
-	if (copy_from_user(&priv_cmd, ifr->ifr_data, sizeof(struct android_wifi_priv_cmd))) {
-		ret = -EFAULT;
-		goto exit;
-	}
-
-	command = kzalloc(priv_cmd.total_len, GFP_KERNEL);
-	if (!command) {
-		DBG_8192D("%s: failed to allocate memory\n", __func__);
-		ret = -ENOMEM;
-		goto exit;
-	}
-
-	if (!access_ok(VERIFY_READ, priv_cmd.buf, priv_cmd.total_len)) {
-		DBG_8192D("%s: failed to access memory\n", __func__);
-		ret = -EFAULT;
-		goto exit;
-	 }
-	if (copy_from_user(command, (char __user *)priv_cmd.buf, priv_cmd.total_len)) {
-		ret = -EFAULT;
-		goto exit;
-	}
-
-	DBG_8192D("%s: Android private cmd \"%s\" on %s\n"
-		, __func__, command, ifr->ifr_name);
-
-	cmd_num = rtw_android_cmdstr_to_num(command);
-
-	switch (cmd_num) {
-	case ANDROID_WIFI_CMD_START:
-		goto response;
-	case ANDROID_WIFI_CMD_SETFWPATH:
-		goto response;
-	}
-
-	if (!g_wifi_on) {
-		DBG_8192D("%s: Ignore private cmd \"%s\" - iface %s is down\n"
-			,__func__, command, ifr->ifr_name);
-		ret = 0;
-		goto exit;
-	}
-
-	switch (cmd_num) {
-	case ANDROID_WIFI_CMD_STOP:
-		break;
-	case ANDROID_WIFI_CMD_SCAN_ACTIVE:
-		break;
-	case ANDROID_WIFI_CMD_SCAN_PASSIVE:
-		break;
-	case ANDROID_WIFI_CMD_RSSI:
-		bytes_written = rtw_android_get_rssi(net, command, priv_cmd.total_len);
-		break;
-	case ANDROID_WIFI_CMD_LINKSPEED:
-		bytes_written = rtw_android_get_link_speed(net, command, priv_cmd.total_len);
-		break;
-	case ANDROID_WIFI_CMD_MACADDR:
-		bytes_written = rtw_android_get_macaddr(net, command, priv_cmd.total_len);
-		break;
-	case ANDROID_WIFI_CMD_BLOCK:
-		bytes_written = rtw_android_set_block(net, command, priv_cmd.total_len);
-		break;
-	case ANDROID_WIFI_CMD_RXFILTER_START:
-		break;
-	case ANDROID_WIFI_CMD_RXFILTER_STOP:
-		break;
-	case ANDROID_WIFI_CMD_RXFILTER_ADD:
-		break;
-	case ANDROID_WIFI_CMD_RXFILTER_REMOVE:
-		break;
-	case ANDROID_WIFI_CMD_BTCOEXSCAN_START:
-		break;
-	case ANDROID_WIFI_CMD_BTCOEXSCAN_STOP:
-		break;
-	case ANDROID_WIFI_CMD_BTCOEXMODE:
-		break;
-	case ANDROID_WIFI_CMD_SETSUSPENDOPT:
-		break;
-	case ANDROID_WIFI_CMD_SETBAND:
-	{
-		uint band = *(command + strlen("SETBAND") + 1) - '0';
-		struct rtw_adapter*	padapter = (struct rtw_adapter *) rtw_netdev_priv(net);
-
-		if (padapter->chip_type == RTL8192D)
-			padapter->setband = band;
-
-		break;
-	}
-	case ANDROID_WIFI_CMD_GETBAND:
-		break;
-	case ANDROID_WIFI_CMD_COUNTRY:
-		bytes_written = rtw_android_set_country(net, command, priv_cmd.total_len);
-		break;
-	case ANDROID_WIFI_CMD_P2P_DEV_ADDR:
-		bytes_written = rtw_android_get_p2p_dev_addr(net, command, priv_cmd.total_len);
-		break;
-	case ANDROID_WIFI_CMD_P2P_SET_NOA:
-		break;
-	case ANDROID_WIFI_CMD_P2P_GET_NOA:
-		break;
-	case ANDROID_WIFI_CMD_P2P_SET_PS:
-		break;
-	case ANDROID_WIFI_CMD_SET_AP_WPS_P2P_IE:
-	{
-		int skip = strlen(android_wifi_cmd_str[ANDROID_WIFI_CMD_SET_AP_WPS_P2P_IE]) + 3;
-		bytes_written = rtw_cfg80211_set_mgnt_wpsp2pie(net, command + skip, priv_cmd.total_len - skip, *(command + skip - 2) - '0');
-		break;
-	}
-	default:
-		DBG_8192D("Unknown PRIVATE command %s - ignored\n", command);
-		snprintf(command, 3, "OK");
-		bytes_written = strlen("OK");
-	}
-
-response:
-	if (bytes_written >= 0) {
-		if ((bytes_written == 0) && (priv_cmd.total_len > 0))
-			command[0] = '\0';
-		if (bytes_written >= priv_cmd.total_len) {
-			DBG_8192D("%s: bytes_written = %d\n", __func__, bytes_written);
-			bytes_written = priv_cmd.total_len;
-		} else {
-			bytes_written++;
-		}
-		priv_cmd.used_len = bytes_written;
-		if (copy_to_user((char __user *)priv_cmd.buf, command, bytes_written)) {
-			DBG_8192D("%s: failed to copy data to user buffer\n", __func__);
-			ret = -EFAULT;
-		}
-	} else {
-		ret = bytes_written;
-	}
-
-exit:
-	kfree(command);
-
-	return ret;
-}
