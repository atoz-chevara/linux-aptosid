--- a/fs/namei.c
+++ b/fs/namei.c
@@ -335,6 +335,7 @@ int deny_write_access(struct file * file
 
 	return 0;
 }
+EXPORT_SYMBOL_GPL(deny_write_access);
 
 /**
  * path_get - get a reference to a path
@@ -1227,6 +1228,7 @@ int __lookup_one_len(const char *name, s
 	this->hash = end_name_hash(hash);
 	return 0;
 }
+EXPORT_SYMBOL_GPL(__lookup_one_len);
 
 /**
  * lookup_one_len - filesystem helper to lookup single pathname component
@@ -2865,6 +2867,7 @@ EXPORT_SYMBOL(follow_up);
 EXPORT_SYMBOL(get_write_access); /* binfmt_aout */
 EXPORT_SYMBOL(getname);
 EXPORT_SYMBOL(lock_rename);
+EXPORT_SYMBOL_GPL(lookup_hash);
 EXPORT_SYMBOL(lookup_one_len);
 EXPORT_SYMBOL(page_follow_link_light);
 EXPORT_SYMBOL(page_put_link);
--- a/fs/splice.c
+++ b/fs/splice.c
@@ -908,6 +908,7 @@ long do_splice_from(struct pipe_inode_in
 
 	return out->f_op->splice_write(pipe, out, ppos, len, flags);
 }
+EXPORT_SYMBOL_GPL(do_splice_from);
 
 /*
  * Attempt to initiate a splice from a file to a pipe.
@@ -930,6 +931,7 @@ long do_splice_to(struct file *in, loff_
 
 	return in->f_op->splice_read(in, ppos, pipe, len, flags);
 }
+EXPORT_SYMBOL_GPL(do_splice_to);
 
 /**
  * splice_direct_to_actor - splices data directly between two non-pipes
--- a/fs/super.c
+++ b/fs/super.c
@@ -287,6 +287,7 @@ int fsync_super(struct super_block *sb)
 	__fsync_super(sb);
 	return sync_blockdev(sb->s_bdev);
 }
+EXPORT_SYMBOL_GPL(fsync_super);
 
 /**
  *	generic_shutdown_super	-	common helper for ->kill_sb()
--- a/fs/sync.c
+++ b/fs/sync.c
@@ -143,6 +143,7 @@ static int do_fsync(unsigned int fd, int
 	}
 	return ret;
 }
+EXPORT_SYMBOL_GPL(do_fsync);
 
 SYSCALL_DEFINE1(fsync, unsigned int, fd)
 {
--- a/security/device_cgroup.c
+++ b/security/device_cgroup.c
@@ -507,6 +507,7 @@ acc_check:
 
 	return -EPERM;
 }
+EXPORT_SYMBOL_GPL(devcgroup_inode_permission);
 
 int devcgroup_inode_mknod(int mode, dev_t dev)
 {
--- a/security/security.c
+++ b/security/security.c
@@ -506,6 +506,7 @@ int security_inode_readlink(struct dentr
 		return 0;
 	return security_ops->inode_readlink(dentry);
 }
+EXPORT_SYMBOL_GPL(security_inode_readlink);
 
 int security_inode_follow_link(struct dentry *dentry, struct nameidata *nd)
 {
