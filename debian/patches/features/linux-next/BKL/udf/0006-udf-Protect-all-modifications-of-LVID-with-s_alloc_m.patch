commit ebde4a31a178419ec0a606eb84660452092f0e12
Author: Jan Kara <jack@suse.cz>
Date:   Wed Oct 20 18:49:20 2010 +0200

    udf: Protect all modifications of LVID with s_alloc_mutex
    
    udf_open_lvid() and udf_close_lvid() were modifying LVID without
    s_alloc_mutex. Since they can be called from remount, the modification
    could race with other filesystem modifications of LVID so protect them
    by s_alloc_mutex just to be sure.
    
    Signed-off-by: Jan Kara <jack@suse.cz>

--- a/fs/udf/super.c
+++ b/fs/udf/super.c
@@ -1773,6 +1773,8 @@ static void udf_open_lvid(struct super_b
 
 	if (!bh)
 		return;
+
+	mutex_lock(&sbi->s_alloc_mutex);
 	lvid = (struct logicalVolIntegrityDesc *)bh->b_data;
 	lvidiu = udf_sb_lvidiu(sbi);
 
@@ -1789,6 +1791,7 @@ static void udf_open_lvid(struct super_b
 	lvid->descTag.tagChecksum = udf_tag_checksum(&lvid->descTag);
 	mark_buffer_dirty(bh);
 	sbi->s_lvid_dirty = 0;
+	mutex_unlock(&sbi->s_alloc_mutex);
 }
 
 static void udf_close_lvid(struct super_block *sb)
@@ -1801,6 +1804,7 @@ static void udf_close_lvid(struct super_
 	if (!bh)
 		return;
 
+	mutex_lock(&sbi->s_alloc_mutex);
 	lvid = (struct logicalVolIntegrityDesc *)bh->b_data;
 	lvidiu = udf_sb_lvidiu(sbi);
 	lvidiu->impIdent.identSuffix[0] = UDF_OS_CLASS_UNIX;
@@ -1821,6 +1825,7 @@ static void udf_close_lvid(struct super_
 	lvid->descTag.tagChecksum = udf_tag_checksum(&lvid->descTag);
 	mark_buffer_dirty(bh);
 	sbi->s_lvid_dirty = 0;
+	mutex_unlock(&sbi->s_alloc_mutex);
 }
 
 u64 lvid_get_unique_id(struct super_block *sb)
