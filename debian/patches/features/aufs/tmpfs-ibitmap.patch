    shmem: management for inum
    
    Using an internal bitmap, tmpfs manages its inum value to keep lowest
    number. Generally people doesn't care the inum values so this feature
    has no merit for them. But for aufs, it will greatly reduce the size of
    aufs XINO files.
    Also it prevents the duplication of inode number in tmpfs, which is
    important for NFS-exporting, backup tools, and other utilities.
    
    There are two new mount options "ino" and "noino" introduced to
    enable/disable this feature.
    
    This commit also introduces CONFIG_TMPFS_INO_DEFAULT which enables the
    new option "ino" by default. You can disable it by a mount option "noino."
    
    Signed-off-by: J. R. Okajima <hooanon05g@gmail.com>

diff --git a/fs/Kconfig b/fs/Kconfig
index d5c769c..f362223 100644
--- a/fs/Kconfig
+++ b/fs/Kconfig
@@ -148,6 +148,19 @@ config TMPFS_XATTR
 
 	  If unsure, say N.
 
+config TMPFS_INO_DEFAULT
+	bool "Tmpfs maintain inum locally by default"
+	depends on TMPFS
+	default y
+	help
+	  There are two ways to assign an inode number in tmpfs. One of
+	  them is to retrive an inum from generic global source, and the
+	  other is to maintain inums locally. You can choose by
+	  specifying a mount option "ino" (or "noino") manually.
+	  If you say Y here, then "ino" is set by default.
+
+	  If unsure, say Y.
+
 config HUGETLBFS
 	bool "HugeTLB file system support"
 	depends on X86 || IA64 || SPARC64 || (S390 && 64BIT) || \
diff --git a/include/linux/shmem_fs.h b/include/linux/shmem_fs.h
index 9d55438..f37c5df 100644
--- a/include/linux/shmem_fs.h
+++ b/include/linux/shmem_fs.h
@@ -29,6 +29,13 @@ struct shmem_sb_info {
 	unsigned long max_inodes;   /* How many inodes are allowed */
 	unsigned long free_inodes;  /* How many are left for allocation */
 	spinlock_t stat_lock;	    /* Serialize shmem_sb_info changes */
+
+	/* maintain inum privately */
+	spinlock_t ino_lock;
+	unsigned long *ino_bitmap;
+	unsigned long ino_bitmap_bytes;
+	bool ino_do, ino_did;
+
 	kuid_t uid;		    /* Mount uid for root directory */
 	kgid_t gid;		    /* Mount gid for root directory */
 	umode_t mode;		    /* Mount mode for root directory */
diff --git a/mm/shmem.c b/mm/shmem.c
index c3c9509..89aff27 100644
--- a/mm/shmem.c
+++ b/mm/shmem.c
@@ -198,14 +198,73 @@ static int shmem_reserve_inode(struct super_block *sb)
 	return 0;
 }
 
-static void shmem_free_inode(struct super_block *sb)
+static void shmem_free_inode(struct inode *inode)
 {
+	struct super_block *sb = inode->i_sb;
 	struct shmem_sb_info *sbinfo = SHMEM_SB(sb);
+
 	if (sbinfo->max_inodes) {
 		spin_lock(&sbinfo->stat_lock);
 		sbinfo->free_inodes++;
 		spin_unlock(&sbinfo->stat_lock);
 	}
+
+	if (!inode->i_nlink) {
+		unsigned long *bitmap;
+
+		spin_lock(&sbinfo->ino_lock);
+		bitmap = sbinfo->ino_bitmap;
+		if (bitmap)
+			clear_bit(inode->i_ino - 2, bitmap);
+		spin_unlock(&sbinfo->ino_lock);
+	}
+}
+
+/*
+ * The type should be same as fs/inode.c:get_next_ino()
+ */
+unsigned int shmem_next_ino(struct super_block *sb)
+{
+	unsigned long ino, maxi, *bitmap;
+	struct shmem_sb_info *sbinfo;
+	bool full;
+
+	ino = 0;
+	sbinfo = SHMEM_SB(sb);
+	if (sbinfo->ino_bitmap) {
+		full = false;
+		maxi = sbinfo->max_inodes;
+
+		/*
+		 * someone else may remount,
+		 * and ino_bitmap might be reset.
+		 */
+		spin_lock(&sbinfo->ino_lock);
+		bitmap = sbinfo->ino_bitmap;
+		if (bitmap) {
+			full = bitmap_full(bitmap, maxi);
+			if (!full) {
+				ino = find_first_zero_bit(bitmap, maxi);
+				set_bit(ino, bitmap);
+				ino += 2; /* ino 0 and 1 are reserved */
+			}
+		}
+		spin_unlock(&sbinfo->ino_lock);
+
+		/* should not happen */
+		WARN_ONCE(full, "debug me, bitmap is full. max %lu, free %lu, bytes %lu\n",
+			  maxi, sbinfo->free_inodes, sbinfo->ino_bitmap_bytes);
+	}
+
+	/*
+	 * someone else did remount,
+	 * or ino_bitmap is unused originally,
+	 * or ino_bitmap is full.
+	 */
+	if (!ino)
+		ino = get_next_ino();
+
+	return ino;
 }
 
 /**
@@ -649,7 +708,7 @@ static void shmem_evict_inode(struct inode *inode)
 
 	simple_xattrs_free(&info->xattrs);
 	WARN_ON(inode->i_blocks);
-	shmem_free_inode(inode->i_sb);
+	shmem_free_inode(inode);
 	clear_inode(inode);
 }
 
@@ -1386,7 +1445,7 @@ static struct inode *shmem_get_inode(struct super_block *sb, const struct inode
 
 	inode = new_inode(sb);
 	if (inode) {
-		inode->i_ino = get_next_ino();
+		inode->i_ino = shmem_next_ino(sb);
 		inode_init_owner(inode, dir, mode);
 		inode->i_blocks = 0;
 		inode->i_mapping->backing_dev_info = &shmem_backing_dev_info;
@@ -1428,7 +1487,7 @@ static struct inode *shmem_get_inode(struct super_block *sb, const struct inode
 			break;
 		}
 	} else
-		shmem_free_inode(sb);
+		shmem_free_inode(inode);
 	return inode;
 }
 
@@ -2043,7 +2102,7 @@ static int shmem_unlink(struct inode *dir, struct dentry *dentry)
 	struct inode *inode = dentry->d_inode;
 
 	if (inode->i_nlink > 1 && !S_ISDIR(inode->i_mode))
-		shmem_free_inode(inode->i_sb);
+		shmem_free_inode(inode);
 
 	dir->i_size -= BOGO_DIRENT_SIZE;
 	inode->i_ctime = dir->i_ctime = dir->i_mtime = CURRENT_TIME;
@@ -2413,6 +2472,150 @@ static const struct export_operations shmem_export_ops = {
 	.fh_to_dentry	= shmem_fh_to_dentry,
 };
 
+/* ---------------------------------------------------------------------- */
+/*
+ * mount option cases.
+ * - mount-time (ino, noino)
+ * - remount-time
+ *   + ino --> noino
+ *   + noino --> ino
+ *   + ino --> ino
+ *   + ino --> ino, expand
+ *   + ino --> ino, shrink x
+ */
+
+static unsigned long shmem_ibitmap_size(unsigned long maxi)
+{
+	unsigned long n;
+
+	/* n = (maxi + BITS_PER_BYTE - 1ULL) / BITS_PER_BYTE; */
+	n = maxi / BITS_PER_BYTE;
+	if (maxi % BITS_PER_BYTE)
+		n++;
+	return n;
+}
+
+static bool shmem_ibitmap_alloc(struct shmem_sb_info *sbinfo, unsigned long sz,
+				gfp_t gfp)
+{
+	bool prev;
+	unsigned long *p;
+	spinlock_t *spin;
+
+	p = kzalloc(sz, gfp | __GFP_NOWARN);
+	spin = &sbinfo->ino_lock;
+	spin_lock(spin);
+	prev = !!sbinfo->ino_bitmap;
+	if (!prev) {
+		sbinfo->ino_bitmap = p;
+		sbinfo->ino_bitmap_bytes = p ? sz : 0;
+	} else {
+		/*
+		 * already allocated.
+		 * the caller should realloc().
+		 */
+	}
+	spin_unlock(spin);
+
+#define MSG "Warning: re-enabling \"ino\" may cause the dup-inum\n"
+	if (!prev) {
+		if (p) {
+			if (sbinfo->ino_did)
+				pr_warn_once(MSG);
+			sbinfo->ino_did = true;
+		} else
+			pr_err("%s failed (%lu bytes), disabled\n",
+			       __func__, sz);
+	} else
+		kfree(p);
+#undef MSG
+
+	return prev;
+}
+
+static void shmem_ibitmap_free(struct shmem_sb_info *sbinfo)
+{
+	unsigned long *p;
+	spinlock_t *spin;
+
+	spin = &sbinfo->ino_lock;
+	spin_lock(spin);
+	p = sbinfo->ino_bitmap;
+	if (p) {
+		sbinfo->ino_bitmap = NULL;
+		sbinfo->ino_bitmap_bytes = 0;
+	}
+	spin_unlock(spin);
+	kfree(p);
+}
+
+static bool shmem_ibitmap_test_expand(struct shmem_sb_info *sbinfo,
+				      unsigned long sz)
+{
+	bool do_expand;
+
+	do_expand = false;
+	if (sz == sbinfo->ino_bitmap_bytes)
+		goto out;	/* nothig to do */
+	else if (sz < sbinfo->ino_bitmap_bytes) {
+		/*
+		 * the ino bitmap shoule never be shrinked.
+		 * otherwise when a large inode number is in use, then it will
+		 * be out of management and the duplication of inum may happen.
+		 */
+		if (sbinfo->ino_bitmap)
+			pr_warn_once("ino bitmap cannot be shrinked\n");
+		goto out;
+	}
+	do_expand = true;
+
+out:
+	return do_expand;
+}
+
+static void shmem_ibitmap_expand(struct shmem_sb_info *sbinfo)
+{
+	bool do_realloc, do_expand;
+	unsigned long n, *o, *p, d;
+	spinlock_t *spin;
+
+	/* first allocation */
+	n = shmem_ibitmap_size(sbinfo->max_inodes);
+	do_realloc = shmem_ibitmap_alloc(sbinfo, n, GFP_NOWAIT);
+	if (!do_realloc) {
+		pr_warn_once("Warning: specify \"ino\" at mount-time\n");
+		return;
+	}
+
+	do_expand = shmem_ibitmap_test_expand(sbinfo, n);
+	if (!do_expand)
+		return;
+
+	/* expand */
+	spin = &sbinfo->ino_lock;
+	spin_lock(spin);
+	o = sbinfo->ino_bitmap;
+	p = krealloc(sbinfo->ino_bitmap, n, GFP_NOWAIT | __GFP_NOWARN);
+	if (p) {
+		d = n - sbinfo->ino_bitmap_bytes;
+		memset(p + n - d, 0, d);
+	}
+	sbinfo->ino_bitmap = p;
+	sbinfo->ino_bitmap_bytes = p ? n : 0;
+	spin_unlock(spin);
+
+	if (o != p)
+		kfree(o);
+	if (p) {
+		if (!o)
+			sbinfo->ino_did = true;
+	} else
+		pr_err("%s failed (%lu bytes), disabled\n",
+		       __func__, n);
+}
+
+/* ---------------------------------------------------------------------- */
+
 static int shmem_parse_options(char *options, struct shmem_sb_info *sbinfo,
 			       bool remount)
 {
@@ -2440,6 +2643,14 @@ static int shmem_parse_options(char *options, struct shmem_sb_info *sbinfo,
 		}
 		if (!*this_char)
 			continue;
+		if (!strcmp(this_char, "ino")) {
+			sbinfo->ino_do = true;
+			continue;
+		} else if (!strcmp(this_char, "noino")) {
+			sbinfo->ino_do = false;
+			continue;
+		}
+
 		if ((value = strchr(this_char,'=')) != NULL) {
 			*value++ = 0;
 		} else {
@@ -2468,7 +2679,7 @@ static int shmem_parse_options(char *options, struct shmem_sb_info *sbinfo,
 				goto bad_val;
 		} else if (!strcmp(this_char,"nr_inodes")) {
 			sbinfo->max_inodes = memparse(value, &rest);
-			if (*rest)
+			if (*rest || !sbinfo->max_inodes)
 				goto bad_val;
 		} else if (!strcmp(this_char,"mode")) {
 			if (remount)
@@ -2548,6 +2759,10 @@ static int shmem_remount_fs(struct super_block *sb, int *flags, char *data)
 	sbinfo->max_blocks  = config.max_blocks;
 	sbinfo->max_inodes  = config.max_inodes;
 	sbinfo->free_inodes = config.max_inodes - inodes;
+	if (config.ino_do)
+		shmem_ibitmap_expand(sbinfo);
+	else
+		shmem_ibitmap_free(sbinfo);
 
 	/*
 	 * Preserve previous mempolicy unless mpol remount option was specified.
@@ -2570,6 +2785,8 @@ static int shmem_show_options(struct seq_file *seq, struct dentry *root)
 			sbinfo->max_blocks << (PAGE_CACHE_SHIFT - 10));
 	if (sbinfo->max_inodes != shmem_default_max_inodes())
 		seq_printf(seq, ",nr_inodes=%lu", sbinfo->max_inodes);
+	if (sbinfo->ino_bitmap)
+		seq_puts(seq, ",ino");
 	if (sbinfo->mode != (S_IRWXUGO | S_ISVTX))
 		seq_printf(seq, ",mode=%03ho", sbinfo->mode);
 	if (!uid_eq(sbinfo->uid, GLOBAL_ROOT_UID))
@@ -2589,6 +2806,7 @@ static void shmem_put_super(struct super_block *sb)
 
 	percpu_counter_destroy(&sbinfo->used_blocks);
 	mpol_put(sbinfo->mpol);
+	kfree(sbinfo->ino_bitmap);
 	kfree(sbinfo);
 	sb->s_fs_info = NULL;
 }
@@ -2608,6 +2826,8 @@ int shmem_fill_super(struct super_block *sb, void *data, int silent)
 	sbinfo->mode = S_IRWXUGO | S_ISVTX;
 	sbinfo->uid = current_fsuid();
 	sbinfo->gid = current_fsgid();
+	spin_lock_init(&sbinfo->ino_lock);
+	sbinfo->ino_do = IS_ENABLED(CONFIG_TMPFS_INO_DEFAULT);
 	sb->s_fs_info = sbinfo;
 
 #ifdef CONFIG_TMPFS
@@ -2623,6 +2843,10 @@ int shmem_fill_super(struct super_block *sb, void *data, int silent)
 			err = -EINVAL;
 			goto failed;
 		}
+		if (sbinfo->ino_do)
+			shmem_ibitmap_alloc(sbinfo,
+					    shmem_ibitmap_size(sbinfo->max_inodes),
+					    GFP_NOFS);
 	} else {
 		sb->s_flags |= MS_NOUSER;
 	}
