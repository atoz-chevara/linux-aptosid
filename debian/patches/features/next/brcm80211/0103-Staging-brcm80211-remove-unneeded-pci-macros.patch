commit 8ba9cfdbfc0fe3e84d150d66737210a34846e8a7
Author: Greg Kroah-Hartman <gregkh@suse.de>
Date:   Thu Oct 7 16:23:24 2010 -0700

    Staging: brcm80211: remove unneeded pci macros
    
    These wrapper macros aren't needed, remove them.
    
    Cc: Brett Rudley <brudley@broadcom.com>
    Cc: Henry Ptasinski <henryp@broadcom.com>
    Cc: Nohee Ko <noheek@broadcom.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

--- a/drivers/staging/brcm80211/brcmfmac/bcmsdh_linux.c
+++ b/drivers/staging/brcm80211/brcmfmac/bcmsdh_linux.c
@@ -540,7 +540,7 @@ int bcmsdh_register(bcmsdh_driver_t *dri
 	if (!error)
 		return 0;
 
-	SDLX_MSG(("%s: pci_module_init failed 0x%x\n", __func__, error));
+	SDLX_MSG(("%s: pci_register_driver failed 0x%x\n", __func__, error));
 #endif				/* BCMPLATFORM_BUS */
 
 	return error;
--- a/drivers/staging/brcm80211/include/linuxver.h
+++ b/drivers/staging/brcm80211/include/linuxver.h
@@ -55,14 +55,8 @@ typedef irqreturn_t(*FN_ISR) (int irq, v
 #define __devexit_p(x)	x
 #endif
 
-#define pci_module_init pci_register_driver
-
 #define netif_down(dev)
 
-/* Power management related macro & routines */
-#define	PCI_SAVE_STATE(a, b)	pci_save_state(a)
-#define	PCI_RESTORE_STATE(a, b)	pci_restore_state(a)
-
 /* suspend args */
 #define DRV_SUSPEND_STATE_TYPE pm_message_t
 
--- a/drivers/staging/brcm80211/sys/wl_mac80211.c
+++ b/drivers/staging/brcm80211/sys/wl_mac80211.c
@@ -1377,7 +1377,7 @@ static int wl_suspend(struct pci_dev *pd
 	wl_down(wl);
 	wl->pub->hw_up = FALSE;
 	WL_UNLOCK(wl);
-	PCI_SAVE_STATE(pdev, wl->pci_psstate);
+	pci_save_state(pdev, wl->pci_psstate);
 	pci_disable_device(pdev);
 	return pci_set_power_state(pdev, PCI_D3hot);
 }
@@ -1401,7 +1401,7 @@ static int wl_resume(struct pci_dev *pde
 	if (err)
 		return err;
 
-	PCI_RESTORE_STATE(pdev, wl->pci_psstate);
+	pci_restore_state(pdev, wl->pci_psstate);
 
 	err = pci_enable_device(pdev);
 	if (err)
@@ -1498,7 +1498,7 @@ static int __init wl_module_init(void)
 #endif				/* BCMDBG */
 
 #ifndef BCMSDIO
-	error = pci_module_init(&wl_pci_driver);
+	error = pci_register_driver(&wl_pci_driver);
 	if (!error)
 		return 0;
 
