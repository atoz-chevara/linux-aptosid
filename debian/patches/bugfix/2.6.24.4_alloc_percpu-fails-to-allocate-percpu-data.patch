From chrisw@sous-sol.org Fri Mar 28 19:49:50 2008
X-Envelope-From: <stable-commits-owner@vger.kernel.org>
X-Envelope-To: <vger@sl-h.de>
X-Delivery-Time: 1206730253
X-UID: 198488
Return-Path: <stable-commits-owner@vger.kernel.org>
X-RZG-CLASS-ID: mi
Received: from vger.kernel.org ([209.132.176.167])
	by mailin.webmailer.de (hamish mi8) (RZmta 16.15)
	with ESMTP id r02ceck2SIoo1V for <vger@sl-h.de>;
	Fri, 28 Mar 2008 19:50:52 +0100 (MET)
	(envelope-from: <stable-commits-owner@vger.kernel.org>)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753167AbYC1Sub (ORCPT <rfc822;vger@sl-h.de>);
	Fri, 28 Mar 2008 14:50:31 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S1757203AbYC1Sub
	(ORCPT <rfc822;stable-commits-outgoing>);
	Fri, 28 Mar 2008 14:50:31 -0400
Received: from 216-99-217-87.dsl.aracnet.com ([216.99.217.87]:57730 "EHLO
	sous-sol.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1757196AbYC1Sua (ORCPT <rfc822;stable-commits@vger.kernel.org>);
	Fri, 28 Mar 2008 14:50:30 -0400
Received: from localhost.localdomain (localhost.localdomain [127.0.0.1])
	by sous-sol.org (8.14.2/8.14.1) with ESMTP id m2SInoMD008882;
	Fri, 28 Mar 2008 11:49:50 -0700
Message-Id: <200803281849.m2SInoMD008882@sous-sol.org>
Subject: patch alloc_percpu-fails-to-allocate-percpu-data.patch queued to 2.6.24-stable tree
To: dada1@cosmosbay.com,
 akpm@linux-foundation.org,
 a.p.zijlstra@chello.nl,
 chrisw@sous-sol.org,
 torvalds@linux-foundation.org
Cc: stable@kernel.org,
 stable-commits@vger.kernel.org
From:	chrisw@sous-sol.org
Date:	Fri, 28 Mar 2008 11:49:50 -0700
In-Reply-To: <1206729763-22578-3-git-send-email-snitzer@gmail.com>
X-Virus-Scanned: ClamAV 0.93rc1/6321/Fri Mar 21 15:55:45 2008 on sequoia.sous-sol.org
X-Virus-Status:	Clean
X-Spam-Status: No, score=-4.4 required=5.0 tests=ALL_TRUSTED,AWL,BAYES_00,
	MISSING_MID autolearn=ham version=3.2.3
X-Spam-Checker-Version:	SpamAssassin 3.2.3 (2007-08-08) on sequoia.sous-sol.org
Sender:	stable-commits-owner@vger.kernel.org
Precedence: bulk
Reply-To: linux-kernel@vger.kernel.org
List-ID: <stable-commits.vger.kernel.org>
X-Mailing-List:	stable-commits@vger.kernel.org
Status: R
X-Status: NC
X-KMail-EncryptionState:  
X-KMail-SignatureState:  
X-KMail-MDN-Sent:  


This is a note to let you know that we have just queued up the patch titled

     Subject: alloc_percpu() fails to allocate percpu data

to the 2.6.24-stable tree.  Its filename is

     alloc_percpu-fails-to-allocate-percpu-data.patch

A git repo of this tree can be found at 
    http://www.kernel.org/git/?p=linux/kernel/git/stable/stable-queue.git;a=summary


>From stable-bounces@linux.kernel.org  Fri Mar 28 11:47:42 2008
From: snitzer@gmail.com
To: stable@kernel.org
Date: Fri, 28 Mar 2008 14:42:43 -0400
Message-Id: <1206729763-22578-3-git-send-email-snitzer@gmail.com>
Cc: akpm@linux-foundation.org, torvalds@linux-foundation.org, dada1@cosmosbay.com
Subject: alloc_percpu() fails to allocate percpu data

From: Eric Dumazet <dada1@cosmosbay.com>

upstream commit: be852795e1c8d3829ddf3cb1ce806113611fa555

Some oprofile results obtained while using tbench on a 2x2 cpu machine were
very surprising.

For example, loopback_xmit() function was using high number of cpu cycles
to perform the statistic updates, supposed to be real cheap since they use
percpu data

        pcpu_lstats = netdev_priv(dev);
        lb_stats = per_cpu_ptr(pcpu_lstats, smp_processor_id());
        lb_stats->packets++;  /* HERE : serious contention */
        lb_stats->bytes += skb->len;

struct pcpu_lstats is a small structure containing two longs.  It appears
that on my 32bits platform, alloc_percpu(8) allocates a single cache line,
instead of giving to each cpu a separate cache line.

Using the following patch gave me impressive boost in various benchmarks
( 6 % in tbench)
(all percpu_counters hit this bug too)

Long term fix (ie >= 2.6.26) would be to let each CPU allocate their own
block of memory, so that we dont need to roudup sizes to L1_CACHE_BYTES, or
merging the SGI stuff of course...

Note : SLUB vs SLAB is important here to *show* the improvement, since they
dont have the same minimum allocation sizes (8 bytes vs 32 bytes).  This
could very well explain regressions some guys reported when they switched
to SLUB.

Signed-off-by: Eric Dumazet <dada1@cosmosbay.com>
Acked-by: Peter Zijlstra <a.p.zijlstra@chello.nl>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Chris Wright <chrisw@sous-sol.org>
---
 mm/allocpercpu.c |   15 ++++++++++++++-
 1 file changed, 14 insertions(+), 1 deletion(-)

This is appropriate for 2.6.24.y

--- a/mm/allocpercpu.c
+++ b/mm/allocpercpu.c
@@ -6,6 +6,10 @@
 #include <linux/mm.h>
 #include <linux/module.h>
 
+#ifndef cache_line_size
+#define cache_line_size()	L1_CACHE_BYTES
+#endif
+
 /**
  * percpu_depopulate - depopulate per-cpu data for given cpu
  * @__pdata: per-cpu data to depopulate
@@ -52,6 +56,11 @@ void *percpu_populate(void *__pdata, siz
 	struct percpu_data *pdata = __percpu_disguise(__pdata);
 	int node = cpu_to_node(cpu);
 
+	/*
+	 * We should make sure each CPU gets private memory.
+	 */
+	size = roundup(size, cache_line_size());
+
 	BUG_ON(pdata->ptrs[cpu]);
 	if (node_online(node))
 		pdata->ptrs[cpu] = kmalloc_node(size, gfp|__GFP_ZERO, node);
@@ -98,7 +107,11 @@ EXPORT_SYMBOL_GPL(__percpu_populate_mask
  */
 void *__percpu_alloc_mask(size_t size, gfp_t gfp, cpumask_t *mask)
 {
-	void *pdata = kzalloc(nr_cpu_ids * sizeof(void *), gfp);
+	/*
+	 * We allocate whole cache lines to avoid false sharing
+	 */
+	size_t sz = roundup(nr_cpu_ids * sizeof(void *), cache_line_size());
+	void *pdata = kzalloc(sz, gfp);
 	void *__pdata = __percpu_disguise(pdata);
 
 	if (unlikely(!pdata))


Patches currently in stable-queue which might be from dada1@cosmosbay.com are

queue-2.6.24/alloc_percpu-fails-to-allocate-percpu-data.patch
queue-2.6.24/percpu-__percpu_alloc_mask-can-dynamically-size-percpu_data-storage.patch
--
To unsubscribe from this list: send the line "unsubscribe stable-commits" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

