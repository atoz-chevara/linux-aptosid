Gitweb:     http://git.kernel.org/git/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commit;h=26c3679101dbccc054dcf370143941844ba70531
Commit:     26c3679101dbccc054dcf370143941844ba70531
Parent:     c2b8f006909b9bf9e165dfdf3c378527938c4497
Author:     Miklos Szeredi <mszeredi@suse.cz>
AuthorDate: Mon Jan 26 15:00:59 2009 +0100
Committer:  Miklos Szeredi <mszeredi@suse.de>
CommitDate: Mon Jan 26 15:00:59 2009 +0100

    fuse: destroy bdi on umount
    
    If a fuse filesystem is unmounted but the device file descriptor
    remains open and a new mount reuses the old device number, then the
    mount fails with EEXIST and the following warning is printed in the
    kernel log:
    
      WARNING: at fs/sysfs/dir.c:462 sysfs_add_one+0x35/0x3d()
      sysfs: duplicate filename '0:15' can not be created
    
    The cause is that the bdi belonging to the fuse filesystem was
    destoryed only after the device file was released.  Fix this by
    calling bdi_destroy() from fuse_put_super() instead.
    
    Signed-off-by: Miklos Szeredi <mszeredi@suse.cz>
    CC: stable@kernel.org

 fs/fuse/dev.c   |    3 ++-
 fs/fuse/inode.c |    2 +-
 2 files changed, 3 insertions(+), 2 deletions(-)

--- a/fs/fuse/dev.c
+++ b/fs/fuse/dev.c
@@ -281,7 +281,8 @@ static void request_end(struct fuse_conn
 			fc->blocked = 0;
 			wake_up_all(&fc->blocked_waitq);
 		}
-		if (fc->num_background == FUSE_CONGESTION_THRESHOLD) {
+		if (fc->num_background == FUSE_CONGESTION_THRESHOLD &&
+		    fc->connected) {
 			clear_bdi_congested(&fc->bdi, READ);
 			clear_bdi_congested(&fc->bdi, WRITE);
 		}
--- a/fs/fuse/inode.c
+++ b/fs/fuse/inode.c
@@ -292,6 +292,7 @@ static void fuse_put_super(struct super_
 	list_del(&fc->entry);
 	fuse_ctl_remove_conn(fc);
 	mutex_unlock(&fuse_mutex);
+	bdi_destroy(&fc->bdi);
 	fuse_conn_put(fc);
 }
 
@@ -531,7 +532,6 @@ void fuse_conn_put(struct fuse_conn *fc)
 		if (fc->destroy_req)
 			fuse_request_free(fc->destroy_req);
 		mutex_destroy(&fc->inst_mutex);
-		bdi_destroy(&fc->bdi);
 		kfree(fc);
 	}
 }
