Gitweb:     http://git.kernel.org/git/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commit;h=2e4e27c7d082b2198b63041310609d7191185a9d
Commit:     2e4e27c7d082b2198b63041310609d7191185a9d
Parent:     7b574b7b0124ed344911f5d581e9bc2d83bbeb19
Author:     Adam Lackorzynski <adam@os.inf.tu-dresden.de>
AuthorDate: Sun Jan 4 12:00:46 2009 -0800
Committer:  Linus Torvalds <torvalds@linux-foundation.org>
CommitDate: Sun Jan 4 13:33:20 2009 -0800

    vmalloc.c: fix flushing in vmap_page_range()
    
    The flush_cache_vmap in vmap_page_range() is called with the end of the
    range twice.  The following patch fixes this for me.
    
    Signed-off-by: Adam Lackorzynski <adam@os.inf.tu-dresden.de>
    Cc: Nick Piggin <nickpiggin@yahoo.com.au>
    Cc: <stable@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

 mm/vmalloc.c |    5 +++--
 1 files changed, 3 insertions(+), 2 deletions(-)

diff --git a/mm/vmalloc.c b/mm/vmalloc.c
index 1ddb77b..7465f22 100644
--- a/mm/vmalloc.c
+++ b/mm/vmalloc.c
@@ -151,11 +151,12 @@ static int vmap_pud_range(pgd_t *pgd, unsigned long addr,
  *
  * Ie. pte at addr+N*PAGE_SIZE shall point to pfn corresponding to pages[N]
  */
-static int vmap_page_range(unsigned long addr, unsigned long end,
+static int vmap_page_range(unsigned long start, unsigned long end,
 				pgprot_t prot, struct page **pages)
 {
 	pgd_t *pgd;
 	unsigned long next;
+	unsigned long addr = start;
 	int err = 0;
 	int nr = 0;
 
@@ -167,7 +168,7 @@ static int vmap_page_range(unsigned long addr, unsigned long end,
 		if (err)
 			break;
 	} while (pgd++, addr = next, addr != end);
-	flush_cache_vmap(addr, end);
+	flush_cache_vmap(start, end);
 
 	if (unlikely(err))
 		return err;
